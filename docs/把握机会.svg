<svg id="kity_svg_6" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="2708" height="17431" style="background: rgb(251, 251, 251); visibility: visible;" viewBox="0 0 2708 17431"><defs id="kity_defs_7"><linearGradient id="kity_linearGradient_17" x1="0" y1="0" x2="0" y2="1"><stop id="kity_stop_18" offset="0" stop-color="rgb(255, 255, 255)"></stop><stop id="kity_stop_19" offset="1" stop-color="rgb(204, 204, 204)"></stop></linearGradient><marker id="kity_marker_2" orient="auto" refX="6" refY="0" viewBox="-7 -7 14 14" markerWidth="7" markerHeight="7" markerUnits="userSpaceOnUse"><path id="kity_path_3" fill="rgb(115, 161, 191)" stroke="none" d="M6,0A6,6,0,1,1,-6,0A6,6,0,1,1,6,0"></path></marker></defs><g id="kity_g_8"><g id="minder1" text-rendering="optimize-speed"><g id="minder_connect_group1"><path id="kity_path_31" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1064.5,9119.5A175,6840,0,0,1,1239.5,2279.5"></path><path id="kity_path_33" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1324.5,2279.5C1339.5,2279.5,1339.5,323.5,1354.5,323.5L1457.5,323.5"></path><path id="kity_path_35" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1324.5,2279.5C1339.5,2279.5,1339.5,904.5,1354.5,904.5L1409.5,904.5"></path><path id="kity_path_37" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1409.5,904.5C1424.5,904.5,1424.5,779.5,1439.5,779.5L1691.5,779.5"></path><path id="kity_path_39" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1691.5,779.5C1706.5,779.5,1706.5,869.5,1721.5,869.5L2688.5,869.5"></path><path id="kity_path_41" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1409.5,904.5C1424.5,904.5,1424.5,1029.5,1439.5,1029.5L1712.5,1029.5"></path><path id="kity_path_43" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1712.5,1029.5C1727.5,1029.5,1727.5,1137.5,1742.5,1137.5L2262.5,1137.5"></path><path id="kity_path_45" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1324.5,2279.5C1339.5,2279.5,1339.5,1661.5,1354.5,1661.5L1465.5,1661.5"></path><path id="kity_path_47" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1465.5,1661.5C1480.5,1661.5,1480.5,1471.5,1495.5,1471.5L1696.5,1471.5"></path><path id="kity_path_49" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1696.5,1471.5C1711.5,1471.5,1711.5,1342.5,1726.5,1342.5L1802.5,1342.5"></path><path id="kity_path_51" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1802.5,1342.5C1817.5,1342.5,1817.5,1495.5,1832.5,1495.5L2143.5,1495.5"></path><path id="kity_path_53" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1696.5,1471.5C1711.5,1471.5,1711.5,1601.5,1726.5,1601.5L1798.5,1601.5"></path><path id="kity_path_55" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1798.5,1601.5C1813.5,1601.5,1813.5,1655.5,1828.5,1655.5L2244.5,1655.5"></path><path id="kity_path_57" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1465.5,1661.5C1480.5,1661.5,1480.5,1851.5,1495.5,1851.5L1626.5,1851.5"></path><path id="kity_path_59" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1626.5,1851.5C1641.5,1851.5,1641.5,1995.5,1656.5,1995.5L1970.5,1995.5"></path><path id="kity_path_61" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1324.5,2279.5C1339.5,2279.5,1339.5,2222.5,1354.5,2222.5L1449.5,2222.5"></path><path id="kity_path_63" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1449.5,2222.5C1464.5,2222.5,1464.5,2120.5,1479.5,2120.5L1664.5,2120.5"></path><path id="kity_path_65" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1664.5,2120.5C1679.5,2120.5,1679.5,2192.5,1694.5,2192.5L1984.5,2192.5"></path><path id="kity_path_67" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1449.5,2222.5C1464.5,2222.5,1464.5,2325.5,1479.5,2325.5L1598.5,2325.5"></path><path id="kity_path_69" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1598.5,2325.5C1613.5,2325.5,1613.5,2406.5,1628.5,2406.5L1915.5,2406.5"></path><path id="kity_path_71" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1324.5,2279.5C1339.5,2279.5,1339.5,2753.5,1354.5,2753.5L1493.5,2753.5"></path><path id="kity_path_73" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1493.5,2753.5C1508.5,2753.5,1508.5,2592.5,1523.5,2592.5L1790.5,2592.5"></path><path id="kity_path_75" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1790.5,2592.5C1805.5,2592.5,1805.5,2727.5,1820.5,2727.5L2522.5,2727.5"></path><path id="kity_path_77" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1493.5,2753.5C1508.5,2753.5,1508.5,2914.5,1523.5,2914.5L1708.5,2914.5"></path><path id="kity_path_79" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1708.5,2914.5C1723.5,2914.5,1723.5,3049.5,1738.5,3049.5L2201.5,3049.5"></path><path id="kity_path_81" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1324.5,2279.5C1339.5,2279.5,1339.5,3200.5,1354.5,3200.5L1410.5,3200.5"></path><path id="kity_path_83" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1410.5,3200.5C1425.5,3200.5,1425.5,3200.5,1440.5,3200.5L1655.5,3200.5"></path><path id="kity_path_85" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1655.5,3200.5C1670.5,3200.5,1670.5,3299.5,1685.5,3299.5L2103.5,3299.5"></path><path id="kity_path_87" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1324.5,2279.5C1339.5,2279.5,1339.5,3504.5,1354.5,3504.5L1504.5,3504.5"></path><path id="kity_path_89" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1504.5,3504.5C1519.5,3504.5,1519.5,3504.5,1534.5,3504.5L1773.5,3504.5"></path><path id="kity_path_91" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1773.5,3504.5C1788.5,3504.5,1788.5,3504.5,1803.5,3504.5L1851.5,3504.5"></path><path id="kity_path_93" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1851.5,3504.5C1866.5,3504.5,1866.5,3657.5,1881.5,3657.5L2349.5,3657.5"></path><path id="kity_path_95" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1324.5,2279.5C1339.5,2279.5,1339.5,3812.5,1354.5,3812.5L1426.5,3812.5"></path><path id="kity_path_97" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1426.5,3812.5C1441.5,3812.5,1441.5,3710.5,1456.5,3710.5L1504.5,3710.5"></path><path id="kity_path_99" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1426.5,3812.5C1441.5,3812.5,1441.5,3915.5,1456.5,3915.5L1504.5,3915.5"></path><path id="kity_path_101" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1504.5,3915.5C1519.5,3915.5,1519.5,3915.5,1534.5,3915.5L1784.5,3915.5"></path><path id="kity_path_103" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1784.5,3915.5C1799.5,3915.5,1799.5,4068.5,1814.5,4068.5L2162.5,4068.5"></path><path id="kity_path_105" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1324.5,2279.5C1339.5,2279.5,1339.5,4263.5,1354.5,4263.5L1410.5,4263.5"></path><path id="kity_path_107" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1410.5,4263.5C1425.5,4263.5,1425.5,4263.5,1440.5,4263.5L1559.5,4263.5"></path><path id="kity_path_109" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1559.5,4263.5C1574.5,4263.5,1574.5,4407.5,1589.5,4407.5L2084.5,4407.5"></path><path id="kity_path_111" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1064.5,9119.5A175,3439,0,0,1,1239.5,5680.5"></path><path id="kity_path_113" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1311.5,5680.5C1326.5,5680.5,1326.5,4469.5,1341.5,4469.5L1420.5,4469.5"></path><path id="kity_path_115" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1311.5,5680.5C1326.5,5680.5,1326.5,4754.5,1341.5,4754.5L1421.5,4754.5"></path><path id="kity_path_117" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1421.5,4754.5C1436.5,4754.5,1436.5,4611.5,1451.5,4611.5L1612.5,4611.5"></path><path id="kity_path_119" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1612.5,4611.5C1627.5,4611.5,1627.5,4701.5,1642.5,4701.5L1929.5,4701.5"></path><path id="kity_path_121" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1929.5,4701.5C1944.5,4701.5,1944.5,4642.5,1959.5,4642.5L2189.5,4642.5"></path><path id="kity_path_123" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1421.5,4754.5C1436.5,4754.5,1436.5,4897.5,1451.5,4897.5L1647.5,4897.5"></path><path id="kity_path_125" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1647.5,4897.5C1662.5,4897.5,1662.5,5041.5,1677.5,5041.5L2008.5,5041.5"></path><path id="kity_path_127" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1311.5,5680.5C1326.5,5680.5,1326.5,5367.5,1341.5,5367.5L1465.5,5367.5"></path><path id="kity_path_129" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1465.5,5367.5C1480.5,5367.5,1480.5,5220.5,1495.5,5220.5L1704.5,5220.5"></path><path id="kity_path_131" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1704.5,5220.5C1719.5,5220.5,1719.5,5346.5,1734.5,5346.5L2174.5,5346.5"></path><path id="kity_path_133" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1465.5,5367.5C1480.5,5367.5,1480.5,5515.5,1495.5,5515.5L1722.5,5515.5"></path><path id="kity_path_135" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1722.5,5515.5C1737.5,5515.5,1737.5,5632.5,1752.5,5632.5L2096.5,5632.5"></path><path id="kity_path_137" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1311.5,5680.5C1326.5,5680.5,1326.5,6047.5,1341.5,6047.5L1413.5,6047.5"></path><path id="kity_path_139" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1413.5,6047.5C1428.5,6047.5,1428.5,5864.5,1443.5,5864.5L1550.5,5864.5"></path><path id="kity_path_141" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1550.5,5864.5C1565.5,5864.5,1565.5,6044.5,1580.5,6044.5L1873.5,6044.5"></path><path id="kity_path_143" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1413.5,6047.5C1428.5,6047.5,1428.5,6231.5,1443.5,6231.5L1593.5,6231.5"></path><path id="kity_path_145" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1593.5,6231.5C1608.5,6231.5,1608.5,6348.5,1623.5,6348.5L1891.5,6348.5"></path><path id="kity_path_147" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1311.5,5680.5C1326.5,5680.5,1326.5,6561.5,1341.5,6561.5L1397.5,6561.5"></path><path id="kity_path_149" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1397.5,6561.5C1412.5,6561.5,1412.5,6561.5,1427.5,6561.5L1648.5,6561.5"></path><path id="kity_path_151" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1648.5,6561.5C1663.5,6561.5,1663.5,6723.5,1678.5,6723.5L2153.5,6723.5"></path><path id="kity_path_153" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1311.5,5680.5C1326.5,5680.5,1326.5,6919.5,1341.5,6919.5L1397.5,6919.5"></path><path id="kity_path_155" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1397.5,6919.5C1412.5,6919.5,1412.5,6919.5,1427.5,6919.5L1683.5,6919.5"></path><path id="kity_path_157" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1683.5,6919.5C1698.5,6919.5,1698.5,7063.5,1713.5,7063.5L2160.5,7063.5"></path><path id="kity_path_159" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1064.5,9119.5A175,765,0,0,0,1239.5,9884.5"></path><path id="kity_path_161" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1311.5,9884.5C1326.5,9884.5,1326.5,7582.5,1341.5,7582.5L1397.5,7582.5"></path><path id="kity_path_163" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1397.5,7582.5C1412.5,7582.5,1412.5,7198.5,1427.5,7198.5L1636.5,7198.5"></path><path id="kity_path_165" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1636.5,7198.5C1651.5,7198.5,1651.5,7270.5,1666.5,7270.5L1937.5,7270.5"></path><path id="kity_path_167" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1397.5,7582.5C1412.5,7582.5,1412.5,7475.5,1427.5,7475.5L1682.5,7475.5"></path><path id="kity_path_169" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1682.5,7475.5C1697.5,7475.5,1697.5,7610.5,1712.5,7610.5L2041.5,7610.5"></path><path id="kity_path_171" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1397.5,7582.5C1412.5,7582.5,1412.5,7734.5,1427.5,7734.5L1582.5,7734.5"></path><path id="kity_path_173" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1582.5,7734.5C1597.5,7734.5,1597.5,7806.5,1612.5,7806.5L1854.5,7806.5"></path><path id="kity_path_175" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1397.5,7582.5C1412.5,7582.5,1412.5,7966.5,1427.5,7966.5L1518.5,7966.5"></path><path id="kity_path_177" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1518.5,7966.5C1533.5,7966.5,1533.5,8074.5,1548.5,8074.5L1910.5,8074.5"></path><path id="kity_path_179" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1311.5,9884.5C1326.5,9884.5,1326.5,8252.5,1341.5,8252.5L1420.5,8252.5"></path><path id="kity_path_181" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1420.5,8252.5C1435.5,8252.5,1435.5,8252.5,1450.5,8252.5L1653.5,8252.5"></path><path id="kity_path_183" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1653.5,8252.5C1668.5,8252.5,1668.5,8378.5,1683.5,8378.5L1999.5,8378.5"></path><path id="kity_path_185" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1311.5,9884.5C1326.5,9884.5,1326.5,8721.5,1341.5,8721.5L1421.5,8721.5"></path><path id="kity_path_187" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1421.5,8721.5C1436.5,8721.5,1436.5,8574.5,1451.5,8574.5L1743.5,8574.5"></path><path id="kity_path_189" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1743.5,8574.5C1758.5,8574.5,1758.5,8718.5,1773.5,8718.5L2122.5,8718.5"></path><path id="kity_path_191" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1421.5,8721.5C1436.5,8721.5,1436.5,8869.5,1451.5,8869.5L1546.5,8869.5"></path><path id="kity_path_193" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1546.5,8869.5C1561.5,8869.5,1561.5,8950.5,1576.5,8950.5L1818.5,8950.5"></path><path id="kity_path_195" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1818.5,8950.5C1833.5,8950.5,1833.5,8922.5,1848.5,8922.5L2078.5,8922.5"></path><path id="kity_path_197" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1311.5,9884.5C1326.5,9884.5,1326.5,9316.5,1341.5,9316.5L1428.5,9316.5"></path><path id="kity_path_199" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1428.5,9316.5C1443.5,9316.5,1443.5,9146.5,1458.5,9146.5L1678.5,9146.5"></path><path id="kity_path_201" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1678.5,9146.5C1693.5,9146.5,1693.5,9290.5,1708.5,9290.5L1964.5,9290.5"></path><path id="kity_path_203" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1428.5,9316.5C1443.5,9316.5,1443.5,9486.5,1458.5,9486.5L1655.5,9486.5"></path><path id="kity_path_205" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1655.5,9486.5C1670.5,9486.5,1670.5,9630.5,1685.5,9630.5L1947.5,9630.5"></path><path id="kity_path_207" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1311.5,9884.5C1326.5,9884.5,1326.5,10279.5,1341.5,10279.5L1500.5,10279.5"></path><path id="kity_path_209" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1500.5,10279.5C1515.5,10279.5,1515.5,9826.5,1530.5,9826.5L1751.5,9826.5"></path><path id="kity_path_211" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1751.5,9826.5C1766.5,9826.5,1766.5,9934.5,1781.5,9934.5L2128.5,9934.5"></path><path id="kity_path_213" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1500.5,10279.5C1515.5,10279.5,1515.5,10076.5,1530.5,10076.5L1773.5,10076.5"></path><path id="kity_path_215" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1773.5,10076.5C1788.5,10076.5,1788.5,10166.5,1803.5,10166.5L2055.5,10166.5"></path><path id="kity_path_217" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1500.5,10279.5C1515.5,10279.5,1515.5,10389.5,1530.5,10389.5L1734.5,10389.5"></path><path id="kity_path_219" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1734.5,10389.5C1749.5,10389.5,1749.5,10560.5,1764.5,10560.5L2190.5,10560.5"></path><path id="kity_path_221" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1500.5,10279.5C1515.5,10279.5,1515.5,10768.5,1530.5,10768.5L1811.5,10768.5"></path><path id="kity_path_223" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1811.5,10768.5C1826.5,10768.5,1826.5,10657.5,1841.5,10657.5L1928.5,10657.5"></path><path id="kity_path_225" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1928.5,10657.5C1943.5,10657.5,1943.5,10702.5,1958.5,10702.5L2213.5,10702.5"></path><path id="kity_path_227" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1811.5,10768.5C1826.5,10768.5,1826.5,10880.5,1841.5,10880.5L1932.5,10880.5"></path><path id="kity_path_229" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1932.5,10880.5C1947.5,10880.5,1947.5,11006.5,1962.5,11006.5L2217.5,11006.5"></path><path id="kity_path_231" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1311.5,9884.5C1326.5,9884.5,1326.5,11444.5,1341.5,11444.5L1397.5,11444.5"></path><path id="kity_path_233" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1397.5,11444.5C1412.5,11444.5,1412.5,11202.5,1427.5,11202.5L1635.5,11202.5"></path><path id="kity_path_235" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1635.5,11202.5C1650.5,11202.5,1650.5,11346.5,1665.5,11346.5L1892.5,11346.5"></path><path id="kity_path_237" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1397.5,11444.5C1412.5,11444.5,1412.5,11686.5,1427.5,11686.5L1634.5,11686.5"></path><path id="kity_path_239" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1634.5,11686.5C1649.5,11686.5,1649.5,11974.5,1664.5,11974.5L1922.5,11974.5"></path><path id="kity_path_241" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1311.5,9884.5C1326.5,9884.5,1326.5,12215.5,1341.5,12215.5L1397.5,12215.5"></path><path id="kity_path_243" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1397.5,12215.5C1412.5,12215.5,1412.5,12215.5,1427.5,12215.5L1579.5,12215.5"></path><path id="kity_path_245" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1579.5,12215.5C1594.5,12215.5,1594.5,12404.5,1609.5,12404.5L1912.5,12404.5"></path><path id="kity_path_247" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1064.5,9119.5A175,4164,0,0,0,1239.5,13283.5"></path><path id="kity_path_249" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1337.5,13283.5C1352.5,13283.5,1352.5,12600.5,1367.5,12600.5L1563.5,12600.5"></path><path id="kity_path_251" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1563.5,12600.5C1578.5,12600.5,1578.5,12735.5,1593.5,12735.5L1853.5,12735.5"></path><path id="kity_path_253" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1337.5,13283.5C1352.5,13283.5,1352.5,12949.5,1367.5,12949.5L1677.5,12949.5"></path><path id="kity_path_255" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1677.5,12949.5C1692.5,12949.5,1692.5,13093.5,1707.5,13093.5L1901.5,13093.5"></path><path id="kity_path_257" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1337.5,13283.5C1352.5,13283.5,1352.5,13280.5,1367.5,13280.5L1534.5,13280.5"></path><path id="kity_path_259" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1534.5,13280.5C1549.5,13280.5,1549.5,13379.5,1564.5,13379.5L1870.5,13379.5"></path><path id="kity_path_261" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1337.5,13283.5C1352.5,13283.5,1352.5,13744.5,1367.5,13744.5L1478.5,13744.5"></path><path id="kity_path_263" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1478.5,13744.5C1493.5,13744.5,1493.5,13843.5,1508.5,13843.5L1796.5,13843.5"></path><path id="kity_path_265" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1337.5,13283.5C1352.5,13283.5,1352.5,13994.5,1367.5,13994.5L1455.5,13994.5"></path><path id="kity_path_267" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1455.5,13994.5C1470.5,13994.5,1470.5,14093.5,1485.5,14093.5L1679.5,14093.5"></path><path id="kity_path_269" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1064.5,9119.5A175,6840,0,0,0,1239.5,15959.5"></path><path id="kity_path_271" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1323.5,15959.5C1338.5,15959.5,1338.5,14652.5,1353.5,14652.5L1409.5,14652.5"></path><path id="kity_path_273" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1409.5,14652.5C1424.5,14652.5,1424.5,14264.5,1439.5,14264.5L1684.5,14264.5"></path><path id="kity_path_275" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1684.5,14264.5C1699.5,14264.5,1699.5,14372.5,1714.5,14372.5L2063.5,14372.5"></path><path id="kity_path_277" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1409.5,14652.5C1424.5,14652.5,1424.5,14666.5,1439.5,14666.5L1643.5,14666.5"></path><path id="kity_path_279" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1643.5,14666.5C1658.5,14666.5,1658.5,14541.5,1673.5,14541.5L1735.5,14541.5"></path><path id="kity_path_281" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1735.5,14541.5C1750.5,14541.5,1750.5,14658.5,1765.5,14658.5L2100.5,14658.5"></path><path id="kity_path_283" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1643.5,14666.5C1658.5,14666.5,1658.5,14791.5,1673.5,14791.5L1776.5,14791.5"></path><path id="kity_path_285" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1776.5,14791.5C1791.5,14791.5,1791.5,14872.5,1806.5,14872.5L2059.5,14872.5"></path><path id="kity_path_287" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1409.5,14652.5C1424.5,14652.5,1424.5,15041.5,1439.5,15041.5L1642.5,15041.5"></path><path id="kity_path_289" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1642.5,15041.5C1657.5,15041.5,1657.5,15158.5,1672.5,15158.5L2015.5,15158.5"></path><path id="kity_path_291" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1323.5,15959.5C1338.5,15959.5,1338.5,15679.5,1353.5,15679.5L1464.5,15679.5"></path><path id="kity_path_293" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1464.5,15679.5C1479.5,15679.5,1479.5,15282.5,1494.5,15282.5L1695.5,15282.5"></path><path id="kity_path_295" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1695.5,15282.5C1710.5,15282.5,1710.5,15354.5,1725.5,15354.5L1983.5,15354.5"></path><path id="kity_path_297" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1464.5,15679.5C1479.5,15679.5,1479.5,15496.5,1494.5,15496.5L1697.5,15496.5"></path><path id="kity_path_299" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1697.5,15496.5C1712.5,15496.5,1712.5,15586.5,1727.5,15586.5L2026.5,15586.5"></path><path id="kity_path_301" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1464.5,15679.5C1479.5,15679.5,1479.5,15782.5,1494.5,15782.5L1612.5,15782.5"></path><path id="kity_path_303" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1612.5,15782.5C1627.5,15782.5,1627.5,15908.5,1642.5,15908.5L2017.5,15908.5"></path><path id="kity_path_305" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1464.5,15679.5C1479.5,15679.5,1479.5,16077.5,1494.5,16077.5L1586.5,16077.5"></path><path id="kity_path_307" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1586.5,16077.5C1601.5,16077.5,1601.5,16194.5,1616.5,16194.5L1849.5,16194.5"></path><path id="kity_path_309" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1323.5,15959.5C1338.5,15959.5,1338.5,16506.5,1353.5,16506.5L1408.5,16506.5"></path><path id="kity_path_311" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1408.5,16506.5C1423.5,16506.5,1423.5,16506.5,1438.5,16506.5L1556.5,16506.5"></path><path id="kity_path_313" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1556.5,16506.5C1571.5,16506.5,1571.5,16767.5,1586.5,16767.5L2064.5,16767.5"></path><path id="kity_path_315" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1323.5,15959.5C1338.5,15959.5,1338.5,16972.5,1353.5,16972.5L1412.5,16972.5"></path><path id="kity_path_317" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1412.5,16972.5C1427.5,16972.5,1427.5,16981.5,1442.5,16981.5L1629.5,16981.5"></path><path id="kity_path_319" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1629.5,16981.5C1644.5,16981.5,1644.5,17125.5,1659.5,17125.5L2136.5,17125.5"></path><path id="kity_path_321" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1323.5,15959.5C1338.5,15959.5,1338.5,17294.5,1353.5,17294.5L1455.5,17294.5"></path><path id="kity_path_323" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1455.5,17294.5C1470.5,17294.5,1470.5,17303.5,1485.5,17303.5L1641.5,17303.5"></path><path id="kity_path_325" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1641.5,17303.5C1656.5,17303.5,1656.5,17411.5,1671.5,17411.5L1987.5,17411.5"></path><path id="kity_path_327" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1064.5,9119.5A175,520,0,0,0,889.5,8599.5"></path><path id="kity_path_329" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M790.5,8599.5C775.5,8599.5,775.5,8631.5,760.5,8631.5L515.5,8631.5"></path><path id="kity_path_331" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M515.5,8631.5C500.5,8631.5,500.5,8883.5,485.5,8883.5L24.5,8883.5"></path><path id="kity_path_333" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1064.5,9119.5A175,35,0,0,0,889.5,9084.5"></path><path id="kity_path_335" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M817.5,9084.5C802.5,9084.5,802.5,9098.5,787.5,9098.5L502.5,9098.5"></path><path id="kity_path_337" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M502.5,9098.5C487.5,9098.5,487.5,9251.5,472.5,9251.5L20.5,9251.5"></path><path id="kity_path_339" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1064.5,9119.5A175,252,0,0,1,889.5,9371.5"></path><path id="kity_path_341" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M803.5,9371.5C788.5,9371.5,788.5,9385.5,773.5,9385.5L669.5,9385.5"></path><path id="kity_path_343" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M669.5,9385.5C654.5,9385.5,654.5,9385.5,639.5,9385.5L418.5,9385.5"></path><path id="kity_path_345" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M418.5,9385.5C403.5,9385.5,403.5,9457.5,388.5,9457.5L202.5,9457.5"></path><path id="kity_path_347" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1064.5,9119.5A175,521,0,0,1,889.5,9640.5"></path><path id="kity_path_349" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M831.5,9640.5C816.5,9640.5,816.5,9654.5,801.5,9654.5L743.5,9654.5"></path><path id="kity_path_351" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M743.5,9654.5C728.5,9654.5,728.5,9663.5,713.5,9663.5L575.5,9663.5"></path><path id="kity_path_353" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M575.5,9663.5C560.5,9663.5,560.5,9789.5,545.5,9789.5L262.5,9789.5"></path><path id="kity_path_2169" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1457.5,323.5C1472.5,323.5,1472.5,162.5,1487.5,162.5L1634.5,162.5"></path><path id="kity_path_2177" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1634.5,162.5C1649.5,162.5,1649.5,279.5,1664.5,279.5L2008.5,279.5"></path><path id="kity_path_2201" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1457.5,323.5C1472.5,323.5,1472.5,484.5,1487.5,484.5L1641.5,484.5"></path><path id="kity_path_2209" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1641.5,484.5C1656.5,484.5,1656.5,637.5,1671.5,637.5L2044.5,637.5"></path><path id="kity_path_2234" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1337.5,13283.5C1352.5,13283.5,1352.5,13521.5,1367.5,13521.5L1611.5,13521.5"></path><path id="kity_path_2242" fill="none" stroke="rgb(115, 161, 191)" stroke-width="1" d="M1611.5,13521.5C1626.5,13521.5,1626.5,13593.5,1641.5,13593.5L1878.5,13593.5"></path></g><g id="minder_node1"><path id="node_outline1" fill="rgb(115, 161, 191)" stroke="rgb(115, 161, 191)" d="M1012.5,9099.5h104a5,5,0,0,1,5,5v30a5,5,0,0,1,-5,5h-104a5,5,0,0,1,-5,-5v-30a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text1" fill="white"><text id="kity_text_22" text-rendering="inherit" font-size="16" dy=".8em" y="9109.099999904633" x="1031.5">把握机会</text></g></g><g id="kity_g_12"><path id="kity_path_13" fill="none" stroke="none" d="M1031.5,9119.5h0v0h0z"></path></g><g id="kity_g_14"><path id="kity_path_15" fill="none" stroke="none" d="M1031.5,9119.5h0v0h0z"></path><path id="kity_path_16" fill="none" stroke="none"></path></g><g id="minder_node2"><g id="node_expander40" style="cursor: pointer;"><path id="kity_path_1800" fill="white" stroke="gray" d="M1240.5,2279.5A6,6,0,1,1,1228.5,2279.5A6,6,0,1,1,1240.5,2279.5"></path><path id="kity_path_1801" fill="none" stroke="gray" d="M1230,2279.5L1239,2279.5"></path></g><path id="node_outline41" fill="rgb(238, 243, 246)" stroke="rgb(115, 161, 191)" d="M1244.5,2266.5h77a3,3,0,0,1,3,3v20a3,3,0,0,1,-3,3h-77a3,3,0,0,1,-3,-3v-20a3,3,0,0,1,3,-3z" stroke-width="1"></path><g id="node_text41" fill="black"><text id="kity_text_602" text-rendering="inherit" font-size="14" dy=".8em" y="2270.4000000953674" x="1261.5">二叉树</text></g></g><g id="minder_node3"><g id="node_expander1" style="cursor: pointer;"><path id="kity_path_1683" fill="white" stroke="gray" d="M1364.5,309.5A6,6,0,1,1,1352.5,309.5A6,6,0,1,1,1364.5,309.5"></path><path id="kity_path_1684" fill="none" stroke="gray" d="M1354,309.5L1363,309.5"></path></g><path id="node_outline2" fill="none" stroke="none" d="M1369.5,298.5h83a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-83a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text2" fill="black"><text id="kity_text_355" text-rendering="inherit" font-size="12" dy=".8em" y="301.7000000476837" x="1374.5">前序中序后序</text></g></g><g id="minder_node4"><g id="node_expander6" style="cursor: pointer;"><path id="kity_path_1698" fill="white" stroke="gray" d="M1364.5,890.5A6,6,0,1,1,1352.5,890.5A6,6,0,1,1,1364.5,890.5"></path><path id="kity_path_1699" fill="none" stroke="gray" d="M1354,890.5L1363,890.5"></path></g><path id="node_outline7" fill="none" stroke="none" d="M1369.5,879.5h35a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-35a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text7" fill="black"><text id="kity_text_387" text-rendering="inherit" font-size="12" dy=".8em" y="882.7000000476837" x="1374.5">组先</text></g></g><g id="minder_node5"><g id="node_expander3" style="cursor: pointer;"><path id="kity_path_1689" fill="white" stroke="gray" d="M1449.5,765.5A6,6,0,1,1,1437.5,765.5A6,6,0,1,1,1449.5,765.5"></path><path id="kity_path_1690" fill="none" stroke="gray" d="M1439,765.5L1448,765.5"></path></g><path id="node_outline4" fill="none" stroke="none" d="M1454.5,754.5h232a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-232a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text4" fill="black"><text id="kity_text_369" text-rendering="inherit" font-size="12" dy=".8em" y="757.7000000476837" x="1459.5">剑指 Offer 68 - II. 二叉树的最近公共祖先</text></g></g><g id="minder_node6"><g id="node_expander2" style="cursor: pointer;" display="none"><path id="kity_path_1686" fill="white" stroke="gray" d="M1731.5,765.5A6,6,0,1,1,1719.5,765.5A6,6,0,1,1,1731.5,765.5"></path><path id="kity_path_1687" fill="none" stroke="gray"></path></g><path id="node_outline3" fill="none" stroke="none" d="M1736.5,664.5h947a5,5,0,0,1,5,5v192a5,5,0,0,1,-5,5h-947a5,5,0,0,1,-5,-5v-192a5,5,0,0,1,5,-5z"></path><g id="node_text3" fill="black"><text id="kity_text_357" text-rendering="inherit" font-size="12" dy=".8em" y="667.7000000476837" x="1741.5">class Solution {</text><text id="kity_text_358" text-rendering="inherit" font-size="12" dy=".8em" y="685.7000000476837" x="1741.5">	public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {</text><text id="kity_text_359" text-rendering="inherit" font-size="12" dy=".8em" y="703.7000000476837" x="1741.5">	&#xa0; &#xa0; if(root == null) return null; // 如果树为空，直接返回null</text><text id="kity_text_360" text-rendering="inherit" font-size="12" dy=".8em" y="721.7000000476837" x="1741.5">	&#xa0; &#xa0; if(root == p || root == q) return root; // 如果 p和q中有等于 root的，那么它们的最近公共祖先即为root（一个节点也可以是它自己的祖先）</text><text id="kity_text_361" text-rendering="inherit" font-size="12" dy=".8em" y="739.7000000476837" x="1741.5">	&#xa0; &#xa0; TreeNode left = lowestCommonAncestor(root.left, p, q); // 递归遍历左子树，只要在左子树中找到了p或q，则先找到谁就返回谁</text><text id="kity_text_362" text-rendering="inherit" font-size="12" dy=".8em" y="757.7000000476837" x="1741.5">	&#xa0; &#xa0; TreeNode right = lowestCommonAncestor(root.right, p, q); // 递归遍历右子树，只要在右子树中找到了p或q，则先找到谁就返回谁</text><text id="kity_text_363" text-rendering="inherit" font-size="12" dy=".8em" y="775.7000000476837" x="1741.5">	&#xa0; &#xa0; if(left == null) return right; // 如果在左子树中 p和 q都找不到，则 p和 q一定都在右子树中，右子树中先遍历到的那个就是最近公共祖先（一个节点也可以是它自己的祖先）</text><text id="kity_text_364" text-rendering="inherit" font-size="12" dy=".8em" y="793.7000000476837" x="1741.5">	&#xa0; &#xa0; else if(right == null) return left; //&#xa0;</text><text id="kity_text_365" text-rendering="inherit" font-size="12" dy=".8em" y="811.7000000476837" x="1741.5">	&#xa0; &#xa0; else return root; //否则，当 left和 right均不为空时，说明 p、q节点分别在 root异侧, 最近公共祖先即为 root</text><text id="kity_text_366" text-rendering="inherit" font-size="12" dy=".8em" y="829.7000000476837" x="1741.5">	}</text><text id="kity_text_367" text-rendering="inherit" font-size="12" dy=".8em" y="847.7000000476837" x="1741.5">}</text></g></g><g id="minder_node7"><g id="node_expander5" style="cursor: pointer;"><path id="kity_path_1695" fill="white" stroke="gray" d="M1449.5,1015.5A6,6,0,1,1,1437.5,1015.5A6,6,0,1,1,1449.5,1015.5"></path><path id="kity_path_1696" fill="none" stroke="gray" d="M1439,1015.5L1448,1015.5"></path></g><path id="node_outline6" fill="none" stroke="none" d="M1454.5,1004.5h253a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-253a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text6" fill="black"><text id="kity_text_385" text-rendering="inherit" font-size="12" dy=".8em" y="1007.7000000476837" x="1459.5">剑指 Offer 68 - I. 二叉搜索树的最近公共祖先</text></g></g><g id="minder_node8"><g id="node_expander4" style="cursor: pointer;" display="none"><path id="kity_path_1692" fill="white" stroke="gray" d="M1752.5,1015.5A6,6,0,1,1,1740.5,1015.5A6,6,0,1,1,1752.5,1015.5"></path><path id="kity_path_1693" fill="none" stroke="gray"></path></g><path id="node_outline5" fill="none" stroke="none" d="M1757.5,896.5h500a5,5,0,0,1,5,5v228a5,5,0,0,1,-5,5h-500a5,5,0,0,1,-5,-5v-228a5,5,0,0,1,5,-5z"></path><g id="node_text5" fill="black"><text id="kity_text_371" text-rendering="inherit" font-size="12" dy=".8em" y="899.7000000476837" x="1762.5">class Solution {</text><text id="kity_text_372" text-rendering="inherit" font-size="12" dy=".8em" y="917.7000000476837" x="1762.5">	public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {</text><text id="kity_text_373" text-rendering="inherit" font-size="12" dy=".8em" y="935.7000000476837" x="1762.5">	&#xa0; &#xa0; /**</text><text id="kity_text_374" text-rendering="inherit" font-size="12" dy=".8em" y="953.7000000476837" x="1762.5">	&#xa0; &#xa0; 要么全在左(自己或者公共)。要么全在右(自己或者公共)。或者 一边一个(根节点)，</text><text id="kity_text_375" text-rendering="inherit" font-size="12" dy=".8em" y="971.7000000476837" x="1762.5">	&#xa0; &#xa0; */</text><text id="kity_text_376" text-rendering="inherit" font-size="12" dy=".8em" y="989.7000000476837" x="1762.5">	&#xa0; &#xa0; while(root!=null){</text><text id="kity_text_377" text-rendering="inherit" font-size="12" dy=".8em" y="1007.7000000476837" x="1762.5">	&#xa0; &#xa0; &#xa0; &#xa0; if(root.val&gt;q.val &amp;&amp; root.val &gt;p.val) root = root.left;</text><text id="kity_text_378" text-rendering="inherit" font-size="12" dy=".8em" y="1025.7000000476837" x="1762.5">	&#xa0; &#xa0; &#xa0; &#xa0; else if(root.val &lt;q.val &amp;&amp; root.val &lt; p.val) root = root.right;</text><text id="kity_text_379" text-rendering="inherit" font-size="12" dy=".8em" y="1043.7000000476837" x="1762.5">	&#xa0; &#xa0; &#xa0; &#xa0; else break;</text><text id="kity_text_380" text-rendering="inherit" font-size="12" dy=".8em" y="1061.7000000476837" x="1762.5">	&#xa0; &#xa0; }</text><text id="kity_text_381" text-rendering="inherit" font-size="12" dy=".8em" y="1079.7000000476837" x="1762.5">	&#xa0; &#xa0; return root;</text><text id="kity_text_382" text-rendering="inherit" font-size="12" dy=".8em" y="1097.7000000476837" x="1762.5">	}</text><text id="kity_text_383" text-rendering="inherit" font-size="12" dy=".8em" y="1115.7000000476837" x="1762.5">}</text></g></g><g id="minder_node9"><g id="node_expander14" style="cursor: pointer;"><path id="kity_path_1722" fill="white" stroke="gray" d="M1364.5,1647.5A6,6,0,1,1,1352.5,1647.5A6,6,0,1,1,1364.5,1647.5"></path><path id="kity_path_1723" fill="none" stroke="gray" d="M1354,1647.5L1363,1647.5"></path></g><path id="node_outline15" fill="none" stroke="none" d="M1369.5,1636.5h91a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-91a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text15" fill="black"><text id="kity_text_442" text-rendering="inherit" font-size="12" dy=".8em" y="1639.7000000476837" x="1374.5">深度 高度 直径</text></g></g><g id="minder_node10"><g id="node_expander11" style="cursor: pointer;"><path id="kity_path_1713" fill="white" stroke="gray" d="M1505.5,1457.5A6,6,0,1,1,1493.5,1457.5A6,6,0,1,1,1505.5,1457.5"></path><path id="kity_path_1714" fill="none" stroke="gray" d="M1495,1457.5L1504,1457.5"></path></g><path id="node_outline12" fill="none" stroke="none" d="M1510.5,1446.5h181a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-181a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text12" fill="black"><text id="kity_text_420" text-rendering="inherit" font-size="12" dy=".8em" y="1449.7000000476837" x="1515.5">剑指 Offer 55 - I. 二叉树的深度</text></g></g><g id="minder_node11"><g id="node_expander8" style="cursor: pointer;"><path id="kity_path_1704" fill="white" stroke="gray" d="M1736.5,1328.5A6,6,0,1,1,1724.5,1328.5A6,6,0,1,1,1736.5,1328.5"></path><path id="kity_path_1705" fill="none" stroke="gray" d="M1726,1328.5L1735,1328.5"></path></g><path id="node_outline9" fill="none" stroke="none" d="M1741.5,1317.5h56a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-56a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text9" fill="black"><text id="kity_text_408" text-rendering="inherit" font-size="12" dy=".8em" y="1320.7000000476837" x="1746.5">bfs 实现</text></g></g><g id="minder_node12"><g id="node_expander7" style="cursor: pointer;" display="none"><path id="kity_path_1701" fill="white" stroke="gray" d="M1842.5,1328.5A6,6,0,1,1,1830.5,1328.5A6,6,0,1,1,1842.5,1328.5"></path><path id="kity_path_1702" fill="none" stroke="gray"></path></g><path id="node_outline8" fill="none" stroke="none" d="M1847.5,1164.5h291a5,5,0,0,1,5,5v318a5,5,0,0,1,-5,5h-291a5,5,0,0,1,-5,-5v-318a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text8" fill="black"><text id="kity_text_389" text-rendering="inherit" font-size="12" dy=".8em" y="1167.7000000476837" x="1852.5">class Solution {</text><text id="kity_text_390" text-rendering="inherit" font-size="12" dy=".8em" y="1185.7000000476837" x="1852.5">public int maxDepth(TreeNode root) {</text><text id="kity_text_391" text-rendering="inherit" font-size="12" dy=".8em" y="1203.7000000476837" x="1852.5">	&#xa0; &#xa0; if(null == root ) return 0;</text><text id="kity_text_392" text-rendering="inherit" font-size="12" dy=".8em" y="1221.7000000476837" x="1852.5">	&#xa0; &#xa0; List&lt;TreeNode&gt; queue&#xa0; = new LinkedList&lt;&gt;();</text><text id="kity_text_393" text-rendering="inherit" font-size="12" dy=".8em" y="1239.7000000476837" x="1852.5">	&#xa0; &#xa0; queue.add(root);</text><text id="kity_text_394" text-rendering="inherit" font-size="12" dy=".8em" y="1257.7000000476837" x="1852.5">	&#xa0; &#xa0; int res = 0;</text><text id="kity_text_395" text-rendering="inherit" font-size="12" dy=".8em" y="1275.7000000476837" x="1852.5">	&#xa0; &#xa0; while(!queue.isEmpty()){</text><text id="kity_text_396" text-rendering="inherit" font-size="12" dy=".8em" y="1293.7000000476837" x="1852.5">	&#xa0; List&lt;TreeNode&gt;&#xa0;&#xa0; tmp = new LinkedList&lt;&gt;();</text><text id="kity_text_397" text-rendering="inherit" font-size="12" dy=".8em" y="1311.7000000476837" x="1852.5">	&#xa0; &#xa0; &#xa0; &#xa0; for(TreeNode node : queue){</text><text id="kity_text_398" text-rendering="inherit" font-size="12" dy=".8em" y="1329.7000000476837" x="1852.5">	&#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; if(node.left != null) tmp.add(node.left);</text><text id="kity_text_399" text-rendering="inherit" font-size="12" dy=".8em" y="1347.7000000476837" x="1852.5">	&#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; if(node.right != null) tmp.add(node.right);</text><text id="kity_text_400" text-rendering="inherit" font-size="12" dy=".8em" y="1365.7000000476837" x="1852.5">	&#xa0; &#xa0; &#xa0; &#xa0; }</text><text id="kity_text_401" text-rendering="inherit" font-size="12" dy=".8em" y="1383.7000000476837" x="1852.5">	&#xa0; &#xa0; &#xa0; &#xa0; queue = tmp;</text><text id="kity_text_402" text-rendering="inherit" font-size="12" dy=".8em" y="1401.7000000476837" x="1852.5">	&#xa0; &#xa0; &#xa0; &#xa0; res++;</text><text id="kity_text_403" text-rendering="inherit" font-size="12" dy=".8em" y="1419.7000000476837" x="1852.5">	&#xa0; &#xa0; }</text><text id="kity_text_404" text-rendering="inherit" font-size="12" dy=".8em" y="1437.7000000476837" x="1852.5">	&#xa0; &#xa0; return res;</text><text id="kity_text_405" text-rendering="inherit" font-size="12" dy=".8em" y="1455.7000000476837" x="1852.5">	}</text><text id="kity_text_406" text-rendering="inherit" font-size="12" dy=".8em" y="1473.7000000476837" x="1852.5">}</text></g></g><g id="minder_node13"><g id="node_expander10" style="cursor: pointer;"><path id="kity_path_1710" fill="white" stroke="gray" d="M1736.5,1587.5A6,6,0,1,1,1724.5,1587.5A6,6,0,1,1,1736.5,1587.5"></path><path id="kity_path_1711" fill="none" stroke="gray" d="M1726,1587.5L1735,1587.5"></path></g><path id="node_outline11" fill="none" stroke="none" d="M1741.5,1576.5h52a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-52a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text11" fill="black"><text id="kity_text_418" text-rendering="inherit" font-size="12" dy=".8em" y="1579.7000000476837" x="1746.5">dfs实现</text></g></g><g id="minder_node14"><g id="node_expander9" style="cursor: pointer;" display="none"><path id="kity_path_1707" fill="white" stroke="gray" d="M1838.5,1587.5A6,6,0,1,1,1826.5,1587.5A6,6,0,1,1,1838.5,1587.5"></path><path id="kity_path_1708" fill="none" stroke="gray"></path></g><path id="node_outline10" fill="none" stroke="none" d="M1843.5,1522.5h396a5,5,0,0,1,5,5v120a5,5,0,0,1,-5,5h-396a5,5,0,0,1,-5,-5v-120a5,5,0,0,1,5,-5z"></path><g id="node_text10" fill="black"><text id="kity_text_410" text-rendering="inherit" font-size="12" dy=".8em" y="1525.7000000476837" x="1848.5">class Solution {</text><text id="kity_text_411" text-rendering="inherit" font-size="12" dy=".8em" y="1543.7000000476837" x="1848.5">	public int maxDepth(TreeNode root) {</text><text id="kity_text_412" text-rendering="inherit" font-size="12" dy=".8em" y="1561.7000000476837" x="1848.5">	&#xa0; // DFS</text><text id="kity_text_413" text-rendering="inherit" font-size="12" dy=".8em" y="1579.7000000476837" x="1848.5">	&#xa0; &#xa0; &#xa0;if(root == null) return 0;</text><text id="kity_text_414" text-rendering="inherit" font-size="12" dy=".8em" y="1597.7000000476837" x="1848.5">	&#xa0; &#xa0; return Math.max(maxDepth(root.left), maxDepth(root.right)) + 1;</text><text id="kity_text_415" text-rendering="inherit" font-size="12" dy=".8em" y="1615.7000000476837" x="1848.5">}</text><text id="kity_text_416" text-rendering="inherit" font-size="12" dy=".8em" y="1633.7000000476837" x="1848.5">}</text></g></g><g id="minder_node15"><g id="node_expander13" style="cursor: pointer;"><path id="kity_path_1719" fill="white" stroke="gray" d="M1505.5,1837.5A6,6,0,1,1,1493.5,1837.5A6,6,0,1,1,1505.5,1837.5"></path><path id="kity_path_1720" fill="none" stroke="gray" d="M1495,1837.5L1504,1837.5"></path></g><path id="node_outline14" fill="none" stroke="none" d="M1510.5,1826.5h111a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-111a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text14" fill="black"><text id="kity_text_440" text-rendering="inherit" font-size="12" dy=".8em" y="1829.7000000476837" x="1515.5">543. 二叉树的直径</text></g></g><g id="minder_node16"><g id="node_expander12" style="cursor: pointer;" display="none"><path id="kity_path_1716" fill="white" stroke="gray" d="M1666.5,1837.5A6,6,0,1,1,1654.5,1837.5A6,6,0,1,1,1666.5,1837.5"></path><path id="kity_path_1717" fill="none" stroke="gray"></path></g><path id="node_outline13" fill="none" stroke="none" d="M1671.5,1682.5h294a5,5,0,0,1,5,5v300a5,5,0,0,1,-5,5h-294a5,5,0,0,1,-5,-5v-300a5,5,0,0,1,5,-5z"></path><g id="node_text13" fill="black"><text id="kity_text_422" text-rendering="inherit" font-size="12" dy=".8em" y="1685.7000000476837" x="1676.5">class Solution {</text><text id="kity_text_423" text-rendering="inherit" font-size="12" dy=".8em" y="1703.7000000476837" x="1676.5">	int maxed =0;</text><text id="kity_text_424" text-rendering="inherit" font-size="12" dy=".8em" y="1721.7000000476837" x="1676.5">	public int diameterOfBinaryTree(TreeNode root) {</text><text id="kity_text_425" text-rendering="inherit" font-size="12" dy=".8em" y="1739.7000000476837" x="1676.5">	&#xa0; &#xa0; /**</text><text id="kity_text_426" text-rendering="inherit" font-size="12" dy=".8em" y="1757.7000000476837" x="1676.5">	&#xa0; &#xa0; DFS</text><text id="kity_text_427" text-rendering="inherit" font-size="12" dy=".8em" y="1775.7000000476837" x="1676.5">	&#xa0; &#xa0; */</text><text id="kity_text_428" text-rendering="inherit" font-size="12" dy=".8em" y="1793.7000000476837" x="1676.5">	&#xa0; &#xa0; dfs(root);</text><text id="kity_text_429" text-rendering="inherit" font-size="12" dy=".8em" y="1811.7000000476837" x="1676.5">	&#xa0; &#xa0; return maxed;</text><text id="kity_text_430" text-rendering="inherit" font-size="12" dy=".8em" y="1829.7000000476837" x="1676.5">	}</text><text id="kity_text_431" text-rendering="inherit" font-size="12" dy=".8em" y="1847.7000000476837" x="1676.5">	int dfs(TreeNode node){</text><text id="kity_text_432" text-rendering="inherit" font-size="12" dy=".8em" y="1865.7000000476837" x="1676.5">	&#xa0; &#xa0; if(node == null) return 0 ;</text><text id="kity_text_433" text-rendering="inherit" font-size="12" dy=".8em" y="1883.7000000476837" x="1676.5">	&#xa0; &#xa0; int L = dfs(node.left);</text><text id="kity_text_434" text-rendering="inherit" font-size="12" dy=".8em" y="1901.7000000476837" x="1676.5">	&#xa0; &#xa0; int R&#xa0; = dfs(node.right);</text><text id="kity_text_435" text-rendering="inherit" font-size="12" dy=".8em" y="1919.7000000476837" x="1676.5">	&#xa0; &#xa0; maxed = Math.max(maxed,L+R);</text><text id="kity_text_436" text-rendering="inherit" font-size="12" dy=".8em" y="1937.7000000476837" x="1676.5">	&#xa0; &#xa0; return Math.max(L,R)+1;</text><text id="kity_text_437" text-rendering="inherit" font-size="12" dy=".8em" y="1955.7000000476837" x="1676.5">	}</text><text id="kity_text_438" text-rendering="inherit" font-size="12" dy=".8em" y="1973.7000000476837" x="1676.5">}</text></g></g><g id="minder_node17"><g id="node_expander19" style="cursor: pointer;"><path id="kity_path_1737" fill="white" stroke="gray" d="M1364.5,2208.5A6,6,0,1,1,1352.5,2208.5A6,6,0,1,1,1364.5,2208.5"></path><path id="kity_path_1738" fill="none" stroke="gray" d="M1354,2208.5L1363,2208.5"></path></g><path id="node_outline20" fill="none" stroke="none" d="M1369.5,2197.5h75a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-75a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text20" fill="black"><text id="kity_text_469" text-rendering="inherit" font-size="12" dy=".8em" y="2200.7000000476837" x="1374.5">翻转二叉树&#xa0;</text></g></g><g id="minder_node18"><g id="node_expander16" style="cursor: pointer;"><path id="kity_path_1728" fill="white" stroke="gray" d="M1489.5,2106.5A6,6,0,1,1,1477.5,2106.5A6,6,0,1,1,1489.5,2106.5"></path><path id="kity_path_1729" fill="none" stroke="gray" d="M1479,2106.5L1488,2106.5"></path></g><path id="node_outline17" fill="none" stroke="none" d="M1494.5,2095.5h165a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-165a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text17" fill="black"><text id="kity_text_454" text-rendering="inherit" font-size="12" dy=".8em" y="2098.7000000476837" x="1499.5">剑指 Offer 27. 二叉树的镜像</text></g></g><g id="minder_node19"><g id="node_expander15" style="cursor: pointer;" display="none"><path id="kity_path_1725" fill="white" stroke="gray" d="M1704.5,2106.5A6,6,0,1,1,1692.5,2106.5A6,6,0,1,1,1704.5,2106.5"></path><path id="kity_path_1726" fill="none" stroke="gray"></path></g><path id="node_outline16" fill="none" stroke="none" d="M1709.5,2023.5h270a5,5,0,0,1,5,5v156a5,5,0,0,1,-5,5h-270a5,5,0,0,1,-5,-5v-156a5,5,0,0,1,5,-5z"></path><g id="node_text16" fill="black"><text id="kity_text_444" text-rendering="inherit" font-size="12" dy=".8em" y="2026.7000000476837" x="1714.5">class Solution {</text><text id="kity_text_445" text-rendering="inherit" font-size="12" dy=".8em" y="2044.7000000476837" x="1714.5">	public TreeNode mirrorTree(TreeNode root) {</text><text id="kity_text_446" text-rendering="inherit" font-size="12" dy=".8em" y="2062.7000000476837" x="1714.5">	&#xa0; &#xa0; &#xa0; &#xa0; if(root==null) return null;</text><text id="kity_text_447" text-rendering="inherit" font-size="12" dy=".8em" y="2080.7000000476837" x="1714.5">	&#xa0; &#xa0; &#xa0; &#xa0; TreeNode temp = root.left;</text><text id="kity_text_448" text-rendering="inherit" font-size="12" dy=".8em" y="2098.7000000476837" x="1714.5">	&#xa0; &#xa0; &#xa0; &#xa0; root.left =&#xa0; mirrorTree(root.right);</text><text id="kity_text_449" text-rendering="inherit" font-size="12" dy=".8em" y="2116.7000000476837" x="1714.5">	&#xa0; &#xa0; &#xa0; &#xa0; root.right = mirrorTree(temp);</text><text id="kity_text_450" text-rendering="inherit" font-size="12" dy=".8em" y="2134.7000000476837" x="1714.5">	&#xa0; &#xa0; &#xa0; &#xa0; return root;</text><text id="kity_text_451" text-rendering="inherit" font-size="12" dy=".8em" y="2152.7000000476837" x="1714.5">	}</text><text id="kity_text_452" text-rendering="inherit" font-size="12" dy=".8em" y="2170.7000000476837" x="1714.5">}</text></g></g><g id="minder_node20"><g id="node_expander18" style="cursor: pointer;"><path id="kity_path_1734" fill="white" stroke="gray" d="M1489.5,2311.5A6,6,0,1,1,1477.5,2311.5A6,6,0,1,1,1489.5,2311.5"></path><path id="kity_path_1735" fill="none" stroke="gray" d="M1479,2311.5L1488,2311.5"></path></g><path id="node_outline19" fill="none" stroke="none" d="M1494.5,2300.5h99a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-99a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text19" fill="black"><text id="kity_text_467" text-rendering="inherit" font-size="12" dy=".8em" y="2303.7000000476837" x="1499.5">226. 翻转二叉树</text></g></g><g id="minder_node21"><g id="node_expander17" style="cursor: pointer;" display="none"><path id="kity_path_1731" fill="white" stroke="gray" d="M1638.5,2311.5A6,6,0,1,1,1626.5,2311.5A6,6,0,1,1,1638.5,2311.5"></path><path id="kity_path_1732" fill="none" stroke="gray"></path></g><path id="node_outline18" fill="none" stroke="none" d="M1643.5,2219.5h267a5,5,0,0,1,5,5v174a5,5,0,0,1,-5,5h-267a5,5,0,0,1,-5,-5v-174a5,5,0,0,1,5,-5z"></path><g id="node_text18" fill="black"><text id="kity_text_456" text-rendering="inherit" font-size="12" dy=".8em" y="2222.7000000476837" x="1648.5">class&#xa0;Solution&#xa0;{</text><text id="kity_text_457" text-rendering="inherit" font-size="12" dy=".8em" y="2240.7000000476837" x="1648.5">	public&#xa0;TreeNode&#xa0;invertTree(TreeNode&#xa0;root) {</text><text id="kity_text_458" text-rendering="inherit" font-size="12" dy=".8em" y="2258.7000000476837" x="1648.5"></text><text id="kity_text_459" text-rendering="inherit" font-size="12" dy=".8em" y="2276.7000000476837" x="1648.5">  if(root==null) return&#xa0;null;</text><text id="kity_text_460" text-rendering="inherit" font-size="12" dy=".8em" y="2294.7000000476837" x="1648.5">	&#xa0;&#xa0;&#xa0;&#xa0;TreeNode&#xa0;temp&#xa0;=&#xa0;root.left;</text><text id="kity_text_461" text-rendering="inherit" font-size="12" dy=".8em" y="2312.7000000476837" x="1648.5">	&#xa0;&#xa0;&#xa0;&#xa0;root.left&#xa0;=&#xa0;&#xa0;invertTree(root.right);</text><text id="kity_text_462" text-rendering="inherit" font-size="12" dy=".8em" y="2330.7000000476837" x="1648.5">	&#xa0;&#xa0;&#xa0;&#xa0;root.right&#xa0;=&#xa0;invertTree(temp);</text><text id="kity_text_463" text-rendering="inherit" font-size="12" dy=".8em" y="2348.7000000476837" x="1648.5">	    return&#xa0;root;</text><text id="kity_text_464" text-rendering="inherit" font-size="12" dy=".8em" y="2366.7000000476837" x="1648.5">	}</text><text id="kity_text_465" text-rendering="inherit" font-size="12" dy=".8em" y="2384.7000000476837" x="1648.5">}</text></g></g><g id="minder_node22"><g id="node_expander24" style="cursor: pointer;"><path id="kity_path_1752" fill="white" stroke="gray" d="M1364.5,2739.5A6,6,0,1,1,1352.5,2739.5A6,6,0,1,1,1364.5,2739.5"></path><path id="kity_path_1753" fill="none" stroke="gray" d="M1354,2739.5L1363,2739.5"></path></g><path id="node_outline25" fill="none" stroke="none" d="M1369.5,2728.5h119a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-119a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text25" fill="black"><text id="kity_text_509" text-rendering="inherit" font-size="12" dy=".8em" y="2731.7000000476837" x="1374.5">是否 平衡 对称 镜像</text></g></g><g id="minder_node23"><g id="node_expander21" style="cursor: pointer;"><path id="kity_path_1743" fill="white" stroke="gray" d="M1533.5,2578.5A6,6,0,1,1,1521.5,2578.5A6,6,0,1,1,1533.5,2578.5"></path><path id="kity_path_1744" fill="none" stroke="gray" d="M1523,2578.5L1532,2578.5"></path></g><path id="node_outline22" fill="none" stroke="none" d="M1538.5,2567.5h247a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-247a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text22" fill="black"><text id="kity_text_488" text-rendering="inherit" font-size="12" dy=".8em" y="2570.7000000476837" x="1543.5">剑指 Offer 55 - II. 平衡二叉树(深度不超过1)</text></g></g><g id="minder_node24"><g id="node_expander20" style="cursor: pointer;" display="none"><path id="kity_path_1740" fill="white" stroke="gray" d="M1830.5,2578.5A6,6,0,1,1,1818.5,2578.5A6,6,0,1,1,1830.5,2578.5"></path><path id="kity_path_1741" fill="none" stroke="gray"></path></g><path id="node_outline21" fill="none" stroke="none" d="M1835.5,2432.5h682a5,5,0,0,1,5,5v282a5,5,0,0,1,-5,5h-682a5,5,0,0,1,-5,-5v-282a5,5,0,0,1,5,-5z"></path><g id="node_text21" fill="black"><text id="kity_text_471" text-rendering="inherit" font-size="12" dy=".8em" y="2435.7000000476837" x="1840.5">class Solution {</text><text id="kity_text_472" text-rendering="inherit" font-size="12" dy=".8em" y="2453.7000000476837" x="1840.5">	public boolean isBalanced(TreeNode root) {</text><text id="kity_text_473" text-rendering="inherit" font-size="12" dy=".8em" y="2471.7000000476837" x="1840.5">	&#xa0; &#xa0; /**</text><text id="kity_text_474" text-rendering="inherit" font-size="12" dy=".8em" y="2489.7000000476837" x="1840.5">	&#xa0; &#xa0; 先计算此树的深度，和之前[剑指 Offer 55 - I. 二叉树的深度]一样</text><text id="kity_text_475" text-rendering="inherit" font-size="12" dy=".8em" y="2507.7000000476837" x="1840.5">	&#xa0; &#xa0; 然后比较每一个节点的左右差</text><text id="kity_text_476" text-rendering="inherit" font-size="12" dy=".8em" y="2525.7000000476837" x="1840.5">	&#xa0; &#xa0; */</text><text id="kity_text_477" text-rendering="inherit" font-size="12" dy=".8em" y="2543.7000000476837" x="1840.5">	&#xa0; &#xa0; //计算每一个节点的左右节点的深度</text><text id="kity_text_478" text-rendering="inherit" font-size="12" dy=".8em" y="2561.7000000476837" x="1840.5">	&#xa0; &#xa0; if(root==null) return true;</text><text id="kity_text_479" text-rendering="inherit" font-size="12" dy=".8em" y="2579.7000000476837" x="1840.5">	&#xa0; &#xa0; return Math.abs(maxDepth(root.left)-maxDepth(root.right))&lt;=1 &amp;&amp; isBalanced(root.left)&amp;&amp; isBalanced(root.right);</text><text id="kity_text_480" text-rendering="inherit" font-size="12" dy=".8em" y="2597.7000000476837" x="1840.5">&#xa0;}</text><text id="kity_text_481" text-rendering="inherit" font-size="12" dy=".8em" y="2615.7000000476837" x="1840.5">	&#xa0; &#xa0; // 计算节点深度</text><text id="kity_text_482" text-rendering="inherit" font-size="12" dy=".8em" y="2633.7000000476837" x="1840.5">	&#xa0; &#xa0;int maxDepth(TreeNode root){</text><text id="kity_text_483" text-rendering="inherit" font-size="12" dy=".8em" y="2651.7000000476837" x="1840.5">	&#xa0; &#xa0; &#xa0; &#xa0; if(root==null) return 0;</text><text id="kity_text_484" text-rendering="inherit" font-size="12" dy=".8em" y="2669.7000000476837" x="1840.5">	&#xa0; &#xa0; &#xa0; &#xa0; return Math.max(maxDepth(root.left),maxDepth(root.right))+1;</text><text id="kity_text_485" text-rendering="inherit" font-size="12" dy=".8em" y="2687.7000000476837" x="1840.5">	&#xa0; &#xa0; }&#xa0;</text><text id="kity_text_486" text-rendering="inherit" font-size="12" dy=".8em" y="2705.7000000476837" x="1840.5">}</text></g></g><g id="minder_node25"><g id="node_expander23" style="cursor: pointer;"><path id="kity_path_1749" fill="white" stroke="gray" d="M1533.5,2900.5A6,6,0,1,1,1521.5,2900.5A6,6,0,1,1,1533.5,2900.5"></path><path id="kity_path_1750" fill="none" stroke="gray" d="M1523,2900.5L1532,2900.5"></path></g><path id="node_outline24" fill="none" stroke="none" d="M1538.5,2889.5h165a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-165a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text24" fill="black"><text id="kity_text_507" text-rendering="inherit" font-size="12" dy=".8em" y="2892.7000000476837" x="1543.5">剑指 Offer 28. 对称的二叉树</text></g></g><g id="minder_node26"><g id="node_expander22" style="cursor: pointer;" display="none"><path id="kity_path_1746" fill="white" stroke="gray" d="M1748.5,2900.5A6,6,0,1,1,1736.5,2900.5A6,6,0,1,1,1748.5,2900.5"></path><path id="kity_path_1747" fill="none" stroke="gray"></path></g><path id="node_outline23" fill="none" stroke="none" d="M1753.5,2754.5h443a5,5,0,0,1,5,5v282a5,5,0,0,1,-5,5h-443a5,5,0,0,1,-5,-5v-282a5,5,0,0,1,5,-5z"></path><g id="node_text23" fill="black"><text id="kity_text_490" text-rendering="inherit" font-size="12" dy=".8em" y="2757.7000000476837" x="1758.5">class Solution {</text><text id="kity_text_491" text-rendering="inherit" font-size="12" dy=".8em" y="2775.7000000476837" x="1758.5">	public boolean isSymmetric(TreeNode root) {</text><text id="kity_text_492" text-rendering="inherit" font-size="12" dy=".8em" y="2793.7000000476837" x="1758.5">	&#xa0; &#xa0; /**</text><text id="kity_text_493" text-rendering="inherit" font-size="12" dy=".8em" y="2811.7000000476837" x="1758.5">	&#xa0; &#xa0; 递归遍历，也可以 BFS，虽然更加麻烦一点，</text><text id="kity_text_494" text-rendering="inherit" font-size="12" dy=".8em" y="2829.7000000476837" x="1758.5">	&#xa0; &#xa0; 需要注意root == null的情况</text><text id="kity_text_495" text-rendering="inherit" font-size="12" dy=".8em" y="2847.7000000476837" x="1758.5">	&#xa0; &#xa0; */</text><text id="kity_text_496" text-rendering="inherit" font-size="12" dy=".8em" y="2865.7000000476837" x="1758.5">	if(root==null) return true:</text><text id="kity_text_497" text-rendering="inherit" font-size="12" dy=".8em" y="2883.7000000476837" x="1758.5">	&#xa0; &#xa0;return isSymmetric(root.left,root.right);</text><text id="kity_text_498" text-rendering="inherit" font-size="12" dy=".8em" y="2901.7000000476837" x="1758.5">	}</text><text id="kity_text_499" text-rendering="inherit" font-size="12" dy=".8em" y="2919.7000000476837" x="1758.5">	boolean isSymmetric(TreeNode left,TreeNode right){</text><text id="kity_text_500" text-rendering="inherit" font-size="12" dy=".8em" y="2937.7000000476837" x="1758.5">	&#xa0; &#xa0; if(null == left &amp;&amp; null == right) return true;&#xa0; &#xa0;&#xa0;</text><text id="kity_text_501" text-rendering="inherit" font-size="12" dy=".8em" y="2955.7000000476837" x="1758.5">	&#xa0; &#xa0; if(null == left || null == right || left.val != right.val ) return false;</text><text id="kity_text_502" text-rendering="inherit" font-size="12" dy=".8em" y="2973.7000000476837" x="1758.5">	&#xa0; &#xa0; // 如果是对称的 那么互换位置也是一样的</text><text id="kity_text_503" text-rendering="inherit" font-size="12" dy=".8em" y="2991.7000000476837" x="1758.5">	&#xa0; &#xa0; return isSymmetric(left.left,right.right)&amp;&amp;isSymmetric(left.right,right.left);</text><text id="kity_text_504" text-rendering="inherit" font-size="12" dy=".8em" y="3009.7000000476837" x="1758.5">	}</text><text id="kity_text_505" text-rendering="inherit" font-size="12" dy=".8em" y="3027.7000000476837" x="1758.5">}</text></g></g><g id="minder_node27"><g id="node_expander27" style="cursor: pointer;"><path id="kity_path_1761" fill="white" stroke="gray" d="M1364.5,3186.5A6,6,0,1,1,1352.5,3186.5A6,6,0,1,1,1364.5,3186.5"></path><path id="kity_path_1762" fill="none" stroke="gray" d="M1354,3186.5L1363,3186.5"></path></g><path id="node_outline28" fill="none" stroke="none" d="M1369.5,3175.5h36a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-36a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text28" fill="black"><text id="kity_text_526" text-rendering="inherit" font-size="12" dy=".8em" y="3178.7000000476837" x="1374.5">恢复</text></g></g><g id="minder_node28"><g id="node_expander26" style="cursor: pointer;"><path id="kity_path_1758" fill="white" stroke="gray" d="M1450.5,3186.5A6,6,0,1,1,1438.5,3186.5A6,6,0,1,1,1450.5,3186.5"></path><path id="kity_path_1759" fill="none" stroke="gray" d="M1440,3186.5L1449,3186.5"></path></g><path id="node_outline27" fill="none" stroke="none" d="M1455.5,3175.5h195a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-195a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text27" fill="black"><text id="kity_text_524" text-rendering="inherit" font-size="12" dy=".8em" y="3178.7000000476837" x="1460.5">108. 将有序数组转换为二叉搜索树</text></g></g><g id="minder_node29"><g id="node_expander25" style="cursor: pointer;" display="none"><path id="kity_path_1755" fill="white" stroke="gray" d="M1695.5,3186.5A6,6,0,1,1,1683.5,3186.5A6,6,0,1,1,1695.5,3186.5"></path><path id="kity_path_1756" fill="none" stroke="gray"></path></g><path id="node_outline26" fill="none" stroke="none" d="M1700.5,3076.5h398a5,5,0,0,1,5,5v210a5,5,0,0,1,-5,5h-398a5,5,0,0,1,-5,-5v-210a5,5,0,0,1,5,-5z"></path><g id="node_text26" fill="black"><text id="kity_text_511" text-rendering="inherit" font-size="12" dy=".8em" y="3079.7000000476837" x="1705.5">class&#xa0;Solution&#xa0;{</text><text id="kity_text_512" text-rendering="inherit" font-size="12" dy=".8em" y="3097.7000000476837" x="1705.5">	public&#xa0;TreeNode&#xa0;sortedArrayToBST(int[]&#xa0;nums) {</text><text id="kity_text_513" text-rendering="inherit" font-size="12" dy=".8em" y="3115.7000000476837" x="1705.5">	  return&#xa0;dfs(nums,0,nums.length-1);    </text><text id="kity_text_514" text-rendering="inherit" font-size="12" dy=".8em" y="3133.7000000476837" x="1705.5">	}</text><text id="kity_text_515" text-rendering="inherit" font-size="12" dy=".8em" y="3151.7000000476837" x="1705.5">	TreeNode&#xa0;dfs(int[]&#xa0;nums,int&#xa0;leftIndex&#xa0;, int&#xa0;&#xa0;rightIndex){  </text><text id="kity_text_516" text-rendering="inherit" font-size="12" dy=".8em" y="3169.7000000476837" x="1705.5">	    if(leftIndex&#xa0;&gt;&#xa0;rightIndex) return&#xa0;null;</text><text id="kity_text_517" text-rendering="inherit" font-size="12" dy=".8em" y="3187.7000000476837" x="1705.5">	&#xa0;&#xa0;&#xa0;&#xa0;TreeNode&#xa0;root&#xa0;= new&#xa0;TreeNode(nums[(leftIndex+rightIndex)/2]);</text><text id="kity_text_518" text-rendering="inherit" font-size="12" dy=".8em" y="3205.7000000476837" x="1705.5">	&#xa0;&#xa0;&#xa0;&#xa0;root.left&#xa0;=&#xa0;&#xa0;dfs(nums,leftIndex,(leftIndex+rightIndex)/2-1);</text><text id="kity_text_519" text-rendering="inherit" font-size="12" dy=".8em" y="3223.7000000476837" x="1705.5">	&#xa0;&#xa0;&#xa0;&#xa0;root.right&#xa0;=&#xa0;dfs(nums,(leftIndex+rightIndex)/2+1,rightIndex);</text><text id="kity_text_520" text-rendering="inherit" font-size="12" dy=".8em" y="3241.7000000476837" x="1705.5">	    return&#xa0;root;</text><text id="kity_text_521" text-rendering="inherit" font-size="12" dy=".8em" y="3259.7000000476837" x="1705.5">	}</text><text id="kity_text_522" text-rendering="inherit" font-size="12" dy=".8em" y="3277.7000000476837" x="1705.5">}</text></g></g><g id="minder_node30"><g id="node_expander31" style="cursor: pointer;"><path id="kity_path_1773" fill="white" stroke="gray" d="M1364.5,3490.5A6,6,0,1,1,1352.5,3490.5A6,6,0,1,1,1364.5,3490.5"></path><path id="kity_path_1774" fill="none" stroke="gray" d="M1354,3490.5L1363,3490.5"></path></g><path id="node_outline32" fill="none" stroke="none" d="M1369.5,3479.5h130a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-130a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text32" fill="black"><text id="kity_text_551" text-rendering="inherit" font-size="12" dy=".8em" y="3482.7000000476837" x="1374.5">第k大，顺序大 倒序大</text></g></g><g id="minder_node31"><g id="node_expander30" style="cursor: pointer;"><path id="kity_path_1770" fill="white" stroke="gray" d="M1544.5,3490.5A6,6,0,1,1,1532.5,3490.5A6,6,0,1,1,1544.5,3490.5"></path><path id="kity_path_1771" fill="none" stroke="gray" d="M1534,3490.5L1543,3490.5"></path></g><path id="node_outline31" fill="none" stroke="none" d="M1549.5,3479.5h219a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-219a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text31" fill="black"><text id="kity_text_549" text-rendering="inherit" font-size="12" dy=".8em" y="3482.7000000476837" x="1554.5">剑指 Offer 54. 二叉搜索树的第k大节点</text></g></g><g id="minder_node32"><g id="node_expander29" style="cursor: pointer;"><path id="kity_path_1767" fill="white" stroke="gray" d="M1813.5,3490.5A6,6,0,1,1,1801.5,3490.5A6,6,0,1,1,1813.5,3490.5"></path><path id="kity_path_1768" fill="none" stroke="gray" d="M1803,3490.5L1812,3490.5"></path></g><path id="node_outline30" fill="none" stroke="none" d="M1818.5,3479.5h28a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-28a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text30" fill="black"><text id="kity_text_547" text-rendering="inherit" font-size="12" dy=".8em" y="3482.7000000476837" x="1823.5">dfs</text></g></g><g id="minder_node33"><g id="node_expander28" style="cursor: pointer;" display="none"><path id="kity_path_1764" fill="white" stroke="gray" d="M1891.5,3490.5A6,6,0,1,1,1879.5,3490.5A6,6,0,1,1,1891.5,3490.5"></path><path id="kity_path_1765" fill="none" stroke="gray"></path></g><path id="node_outline29" fill="none" stroke="none" d="M1896.5,3326.5h448a5,5,0,0,1,5,5v318a5,5,0,0,1,-5,5h-448a5,5,0,0,1,-5,-5v-318a5,5,0,0,1,5,-5z"></path><g id="node_text29" fill="black"><text id="kity_text_528" text-rendering="inherit" font-size="12" dy=".8em" y="3329.7000000476837" x="1901.5">class Solution {</text><text id="kity_text_529" text-rendering="inherit" font-size="12" dy=".8em" y="3347.7000000476837" x="1901.5">	public int kthLargest(TreeNode root, int k) {</text><text id="kity_text_530" text-rendering="inherit" font-size="12" dy=".8em" y="3365.7000000476837" x="1901.5">	&#xa0; &#xa0; /**</text><text id="kity_text_531" text-rendering="inherit" font-size="12" dy=".8em" y="3383.7000000476837" x="1901.5">	&#xa0; &#xa0; 中序遍历每一个节点 存入数组中，排序 取出来第k个元素</text><text id="kity_text_532" text-rendering="inherit" font-size="12" dy=".8em" y="3401.7000000476837" x="1901.5">	&#xa0; &#xa0; 倒中序 （二叉搜索树的一个特性：通过中序遍历所得到的序列，就是有序的。）</text><text id="kity_text_533" text-rendering="inherit" font-size="12" dy=".8em" y="3419.7000000476837" x="1901.5">	&#xa0; &#xa0; */</text><text id="kity_text_534" text-rendering="inherit" font-size="12" dy=".8em" y="3437.7000000476837" x="1901.5">	&#xa0; &#xa0; List&lt;Integer&gt; list = new ArrayList&lt;&gt;();</text><text id="kity_text_535" text-rendering="inherit" font-size="12" dy=".8em" y="3455.7000000476837" x="1901.5">	&#xa0; &#xa0; dfs(root,list);</text><text id="kity_text_536" text-rendering="inherit" font-size="12" dy=".8em" y="3473.7000000476837" x="1901.5">	&#xa0; &#xa0; return list.get(list.size()-k);</text><text id="kity_text_537" text-rendering="inherit" font-size="12" dy=".8em" y="3491.7000000476837" x="1901.5">	}</text><text id="kity_text_538" text-rendering="inherit" font-size="12" dy=".8em" y="3509.7000000476837" x="1901.5">&#xa0; // 中序遍历</text><text id="kity_text_539" text-rendering="inherit" font-size="12" dy=".8em" y="3527.7000000476837" x="1901.5">	void dfs(TreeNode root,List list){</text><text id="kity_text_540" text-rendering="inherit" font-size="12" dy=".8em" y="3545.7000000476837" x="1901.5">	&#xa0; &#xa0; if(root == null) return;</text><text id="kity_text_541" text-rendering="inherit" font-size="12" dy=".8em" y="3563.7000000476837" x="1901.5">	&#xa0; &#xa0; dfs(root.left,list);</text><text id="kity_text_542" text-rendering="inherit" font-size="12" dy=".8em" y="3581.7000000476837" x="1901.5">	&#xa0; &#xa0; list.add(root.val);</text><text id="kity_text_543" text-rendering="inherit" font-size="12" dy=".8em" y="3599.7000000476837" x="1901.5">	&#xa0; &#xa0; dfs(root.right,list);</text><text id="kity_text_544" text-rendering="inherit" font-size="12" dy=".8em" y="3617.7000000476837" x="1901.5">	}</text><text id="kity_text_545" text-rendering="inherit" font-size="12" dy=".8em" y="3635.7000000476837" x="1901.5">}</text></g></g><g id="minder_node34"><g id="node_expander36" style="cursor: pointer;"><path id="kity_path_1788" fill="white" stroke="gray" d="M1364.5,3798.5A6,6,0,1,1,1352.5,3798.5A6,6,0,1,1,1364.5,3798.5"></path><path id="kity_path_1789" fill="none" stroke="gray" d="M1354,3798.5L1363,3798.5"></path></g><path id="node_outline37" fill="none" stroke="none" d="M1369.5,3787.5h52a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-52a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text37" fill="black"><text id="kity_text_578" text-rendering="inherit" font-size="12" dy=".8em" y="3790.7000000476837" x="1374.5">dfs&#xa0; bfs</text></g></g><g id="minder_node35"><g id="node_expander32" style="cursor: pointer;" display="none"><path id="kity_path_1776" fill="white" stroke="gray" d="M1466.5,3696.5A6,6,0,1,1,1454.5,3696.5A6,6,0,1,1,1466.5,3696.5"></path><path id="kity_path_1777" fill="none" stroke="gray"></path></g><path id="node_outline33" fill="none" stroke="none" d="M1471.5,3685.5h28a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-28a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text33" fill="black"><text id="kity_text_553" text-rendering="inherit" font-size="12" dy=".8em" y="3688.7000000476837" x="1476.5">dfs</text></g></g><g id="minder_node36"><g id="node_expander35" style="cursor: pointer;"><path id="kity_path_1785" fill="white" stroke="gray" d="M1466.5,3901.5A6,6,0,1,1,1454.5,3901.5A6,6,0,1,1,1466.5,3901.5"></path><path id="kity_path_1786" fill="none" stroke="gray" d="M1456,3901.5L1465,3901.5"></path></g><path id="node_outline36" fill="none" stroke="none" d="M1471.5,3890.5h28a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-28a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text36" fill="black"><text id="kity_text_576" text-rendering="inherit" font-size="12" dy=".8em" y="3893.7000000476837" x="1476.5">bfs</text></g></g><g id="minder_node37"><g id="node_expander34" style="cursor: pointer;"><path id="kity_path_1782" fill="white" stroke="gray" d="M1544.5,3901.5A6,6,0,1,1,1532.5,3901.5A6,6,0,1,1,1544.5,3901.5"></path><path id="kity_path_1783" fill="none" stroke="gray" d="M1534,3901.5L1543,3901.5"></path></g><path id="node_outline35" fill="none" stroke="none" d="M1549.5,3890.5h230a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-230a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text35" fill="black"><text id="kity_text_574" text-rendering="inherit" font-size="12" dy=".8em" y="3893.7000000476837" x="1554.5">剑指 Offer 32 - II. 从上到下打印二叉树 II</text></g></g><g id="minder_node38"><g id="node_expander33" style="cursor: pointer;" display="none"><path id="kity_path_1779" fill="white" stroke="gray" d="M1824.5,3901.5A6,6,0,1,1,1812.5,3901.5A6,6,0,1,1,1824.5,3901.5"></path><path id="kity_path_1780" fill="none" stroke="gray"></path></g><path id="node_outline34" fill="none" stroke="none" d="M1829.5,3737.5h328a5,5,0,0,1,5,5v318a5,5,0,0,1,-5,5h-328a5,5,0,0,1,-5,-5v-318a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text34" fill="black"><text id="kity_text_555" text-rendering="inherit" font-size="12" dy=".8em" y="3740.7000000476837" x="1834.5">class Solution {</text><text id="kity_text_556" text-rendering="inherit" font-size="12" dy=".8em" y="3758.7000000476837" x="1834.5">	public List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) {</text><text id="kity_text_557" text-rendering="inherit" font-size="12" dy=".8em" y="3776.7000000476837" x="1834.5">	&#xa0; &#xa0; List&lt;List&lt;Integer&gt;&gt; resList = new ArrayList&lt;&gt;();</text><text id="kity_text_558" text-rendering="inherit" font-size="12" dy=".8em" y="3794.7000000476837" x="1834.5">	&#xa0; &#xa0; Queue&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;();</text><text id="kity_text_559" text-rendering="inherit" font-size="12" dy=".8em" y="3812.7000000476837" x="1834.5">	&#xa0; &#xa0; if(root!=null) queue.add(root);</text><text id="kity_text_560" text-rendering="inherit" font-size="12" dy=".8em" y="3830.7000000476837" x="1834.5">	&#xa0; &#xa0; while(!queue.isEmpty()){</text><text id="kity_text_561" text-rendering="inherit" font-size="12" dy=".8em" y="3848.7000000476837" x="1834.5">	&#xa0; &#xa0; &#xa0; &#xa0; List&lt;Integer&gt; tmp = new ArrayList&lt;&gt;();</text><text id="kity_text_562" text-rendering="inherit" font-size="12" dy=".8em" y="3866.7000000476837" x="1834.5">	&#xa0; &#xa0; &#xa0; &#xa0; for(int i = queue.size();i&gt;0;i--){</text><text id="kity_text_563" text-rendering="inherit" font-size="12" dy=".8em" y="3884.7000000476837" x="1834.5">	&#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; TreeNode node =&#xa0; queue.poll();</text><text id="kity_text_564" text-rendering="inherit" font-size="12" dy=".8em" y="3902.7000000476837" x="1834.5">	&#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; tmp.add(node.val);</text><text id="kity_text_565" text-rendering="inherit" font-size="12" dy=".8em" y="3920.7000000476837" x="1834.5">	&#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; if(node.left!=null) queue.add(node.left);</text><text id="kity_text_566" text-rendering="inherit" font-size="12" dy=".8em" y="3938.7000000476837" x="1834.5">	&#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; if(node.right!=null) queue.add(node.right);</text><text id="kity_text_567" text-rendering="inherit" font-size="12" dy=".8em" y="3956.7000000476837" x="1834.5">	&#xa0; &#xa0; &#xa0; &#xa0; }</text><text id="kity_text_568" text-rendering="inherit" font-size="12" dy=".8em" y="3974.7000000476837" x="1834.5">	&#xa0; &#xa0; &#xa0; &#xa0; resList.add(tmp);</text><text id="kity_text_569" text-rendering="inherit" font-size="12" dy=".8em" y="3992.7000000476837" x="1834.5">	&#xa0; &#xa0; }</text><text id="kity_text_570" text-rendering="inherit" font-size="12" dy=".8em" y="4010.7000000476837" x="1834.5">	&#xa0; &#xa0; return resList;</text><text id="kity_text_571" text-rendering="inherit" font-size="12" dy=".8em" y="4028.7000000476837" x="1834.5">	}</text><text id="kity_text_572" text-rendering="inherit" font-size="12" dy=".8em" y="4046.7000000476837" x="1834.5">}</text></g></g><g id="minder_node39"><g id="node_expander39" style="cursor: pointer;"><path id="kity_path_1797" fill="white" stroke="gray" d="M1364.5,4249.5A6,6,0,1,1,1352.5,4249.5A6,6,0,1,1,1364.5,4249.5"></path><path id="kity_path_1798" fill="none" stroke="gray" d="M1354,4249.5L1363,4249.5"></path></g><path id="node_outline40" fill="none" stroke="none" d="M1369.5,4238.5h36a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-36a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text40" fill="black"><text id="kity_text_600" text-rendering="inherit" font-size="12" dy=".8em" y="4241.700000047684" x="1374.5">合并</text></g></g><g id="minder_node40"><g id="node_expander38" style="cursor: pointer;"><path id="kity_path_1794" fill="white" stroke="gray" d="M1450.5,4249.5A6,6,0,1,1,1438.5,4249.5A6,6,0,1,1,1450.5,4249.5"></path><path id="kity_path_1795" fill="none" stroke="gray" d="M1440,4249.5L1449,4249.5"></path></g><path id="node_outline39" fill="none" stroke="none" d="M1455.5,4238.5h99a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-99a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text39" fill="black"><text id="kity_text_598" text-rendering="inherit" font-size="12" dy=".8em" y="4241.700000047684" x="1460.5">617. 合并二叉树</text></g></g><g id="minder_node41"><g id="node_expander37" style="cursor: pointer;" display="none"><path id="kity_path_1791" fill="white" stroke="gray" d="M1599.5,4249.5A6,6,0,1,1,1587.5,4249.5A6,6,0,1,1,1599.5,4249.5"></path><path id="kity_path_1792" fill="none" stroke="gray"></path></g><path id="node_outline38" fill="none" stroke="none" d="M1604.5,4094.5h475a5,5,0,0,1,5,5v300a5,5,0,0,1,-5,5h-475a5,5,0,0,1,-5,-5v-300a5,5,0,0,1,5,-5z"></path><g id="node_text38" fill="black"><text id="kity_text_580" text-rendering="inherit" font-size="12" dy=".8em" y="4097.700000047684" x="1609.5">class Solution {</text><text id="kity_text_581" text-rendering="inherit" font-size="12" dy=".8em" y="4115.700000047684" x="1609.5">	public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {</text><text id="kity_text_582" text-rendering="inherit" font-size="12" dy=".8em" y="4133.700000047684" x="1609.5">	&#xa0; &#xa0; /**</text><text id="kity_text_583" text-rendering="inherit" font-size="12" dy=".8em" y="4151.700000047684" x="1609.5">	&#xa0; &#xa0; DFS 或者是BFS&#xa0; 同时递归两树，终止条件是 node1和node2同时为null</text><text id="kity_text_584" text-rendering="inherit" font-size="12" dy=".8em" y="4169.700000047684" x="1609.5">	&#xa0; &#xa0; 把 树2加到树1上面</text><text id="kity_text_585" text-rendering="inherit" font-size="12" dy=".8em" y="4187.700000047684" x="1609.5">	&#xa0; &#xa0; */</text><text id="kity_text_586" text-rendering="inherit" font-size="12" dy=".8em" y="4205.700000047684" x="1609.5">	&#xa0; &#xa0; if(root1==null||root2==null) return root1==null?root2:root1;</text><text id="kity_text_587" text-rendering="inherit" font-size="12" dy=".8em" y="4223.700000047684" x="1609.5">	&#xa0; &#xa0; return dfs(root1,root2);</text><text id="kity_text_588" text-rendering="inherit" font-size="12" dy=".8em" y="4241.700000047684" x="1609.5">	}</text><text id="kity_text_589" text-rendering="inherit" font-size="12" dy=".8em" y="4259.700000047684" x="1609.5">	TreeNode dfs(TreeNode r1,TreeNode r2){</text><text id="kity_text_590" text-rendering="inherit" font-size="12" dy=".8em" y="4277.700000047684" x="1609.5">	&#xa0; &#xa0; if(r1==null||r2==null) return r1==null?r2:r1;</text><text id="kity_text_591" text-rendering="inherit" font-size="12" dy=".8em" y="4295.700000047684" x="1609.5">	&#xa0; &#xa0; r1.val += r2.val;</text><text id="kity_text_592" text-rendering="inherit" font-size="12" dy=".8em" y="4313.700000047684" x="1609.5">	&#xa0; &#xa0; r1.left = dfs(r1.left,r2.left); // 都是从根节点开始的 把 r1和r2的值相加 放到r1上面去</text><text id="kity_text_593" text-rendering="inherit" font-size="12" dy=".8em" y="4331.700000047684" x="1609.5">	&#xa0; &#xa0; r1.right = dfs(r1.right,r2.right);// 从根节点开始的</text><text id="kity_text_594" text-rendering="inherit" font-size="12" dy=".8em" y="4349.700000047684" x="1609.5">	&#xa0; &#xa0; return r1;</text><text id="kity_text_595" text-rendering="inherit" font-size="12" dy=".8em" y="4367.700000047684" x="1609.5">	}</text><text id="kity_text_596" text-rendering="inherit" font-size="12" dy=".8em" y="4385.700000047684" x="1609.5">}</text></g></g><g id="minder_node42"><g id="node_expander64" style="cursor: pointer;"><path id="kity_path_1872" fill="white" stroke="gray" d="M1240.5,5680.5A6,6,0,1,1,1228.5,5680.5A6,6,0,1,1,1240.5,5680.5"></path><path id="kity_path_1873" fill="none" stroke="gray" d="M1230,5680.5L1239,5680.5"></path></g><path id="node_outline65" fill="rgb(238, 243, 246)" stroke="rgb(115, 161, 191)" d="M1244.5,5667.5h64a3,3,0,0,1,3,3v20a3,3,0,0,1,-3,3h-64a3,3,0,0,1,-3,-3v-20a3,3,0,0,1,3,-3z" stroke-width="1"></path><g id="node_text65" fill="black"><text id="kity_text_772" text-rendering="inherit" font-size="14" dy=".8em" y="5671.400000095367" x="1261.5">链表</text></g></g><g id="minder_node43"><g id="node_expander41" style="cursor: pointer;" display="none"><path id="kity_path_1803" fill="white" stroke="gray" d="M1351.5,4455.5A6,6,0,1,1,1339.5,4455.5A6,6,0,1,1,1351.5,4455.5"></path><path id="kity_path_1804" fill="none" stroke="gray"></path></g><path id="node_outline42" fill="none" stroke="none" d="M1356.5,4444.5h59a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-59a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text42" fill="black"><text id="kity_text_604" text-rendering="inherit" font-size="12" dy=".8em" y="4447.700000047684" x="1361.5">前后指针</text></g></g><g id="minder_node44"><g id="node_expander47" style="cursor: pointer;"><path id="kity_path_1821" fill="white" stroke="gray" d="M1351.5,4740.5A6,6,0,1,1,1339.5,4740.5A6,6,0,1,1,1351.5,4740.5"></path><path id="kity_path_1822" fill="none" stroke="gray" d="M1341,4740.5L1350,4740.5"></path></g><path id="node_outline48" fill="none" stroke="none" d="M1356.5,4729.5h60a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-60a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text48" fill="black"><text id="kity_text_642" text-rendering="inherit" font-size="12" dy=".8em" y="4732.700000047684" x="1361.5">快慢指针</text></g></g><g id="minder_node45"><g id="node_expander44" style="cursor: pointer;"><path id="kity_path_1812" fill="white" stroke="gray" d="M1461.5,4597.5A6,6,0,1,1,1449.5,4597.5A6,6,0,1,1,1461.5,4597.5"></path><path id="kity_path_1813" fill="none" stroke="gray" d="M1451,4597.5L1460,4597.5"></path></g><path id="node_outline45" fill="none" stroke="none" d="M1466.5,4586.5h141a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-141a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text45" fill="black"><text id="kity_text_620" text-rendering="inherit" font-size="12" dy=".8em" y="4589.700000047684" x="1471.5">剑指 Offer 24. 反转链表</text></g></g><g id="minder_node46"><g id="node_expander43" style="cursor: pointer;"><path id="kity_path_1809" fill="white" stroke="gray" d="M1652.5,4597.5A6,6,0,1,1,1640.5,4597.5A6,6,0,1,1,1652.5,4597.5"></path><path id="kity_path_1810" fill="none" stroke="gray" d="M1642,4597.5L1651,4597.5"></path></g><path id="node_outline44" fill="none" stroke="none" d="M1657.5,4496.5h267a5,5,0,0,1,5,5v192a5,5,0,0,1,-5,5h-267a5,5,0,0,1,-5,-5v-192a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text44" fill="black"><text id="kity_text_608" text-rendering="inherit" font-size="12" dy=".8em" y="4499.700000047684" x="1662.5">// 方法2&#xa0; 前后指针 cur&#xa0; pre&#xa0;&#xa0;</text><text id="kity_text_609" text-rendering="inherit" font-size="12" dy=".8em" y="4517.700000047684" x="1662.5">&#xa0;public ListNode reverseList(ListNode head) {</text><text id="kity_text_610" text-rendering="inherit" font-size="12" dy=".8em" y="4535.700000047684" x="1662.5">	&#xa0; &#xa0; ListNode cur = null,pre = head;</text><text id="kity_text_611" text-rendering="inherit" font-size="12" dy=".8em" y="4553.700000047684" x="1662.5">	&#xa0; &#xa0; while(pre!=null){</text><text id="kity_text_612" text-rendering="inherit" font-size="12" dy=".8em" y="4571.700000047684" x="1662.5">	&#xa0; &#xa0; &#xa0; &#xa0; ListNode temp = pre.next;</text><text id="kity_text_613" text-rendering="inherit" font-size="12" dy=".8em" y="4589.700000047684" x="1662.5">	&#xa0; &#xa0; &#xa0; &#xa0; pre.next = cur;</text><text id="kity_text_614" text-rendering="inherit" font-size="12" dy=".8em" y="4607.700000047684" x="1662.5">	&#xa0; &#xa0; &#xa0; &#xa0; cur = pre;</text><text id="kity_text_615" text-rendering="inherit" font-size="12" dy=".8em" y="4625.700000047684" x="1662.5">	&#xa0; &#xa0; &#xa0; &#xa0; pre = temp;</text><text id="kity_text_616" text-rendering="inherit" font-size="12" dy=".8em" y="4643.700000047684" x="1662.5">	&#xa0; &#xa0; }</text><text id="kity_text_617" text-rendering="inherit" font-size="12" dy=".8em" y="4661.700000047684" x="1662.5">	&#xa0; &#xa0; return cur;</text><text id="kity_text_618" text-rendering="inherit" font-size="12" dy=".8em" y="4679.700000047684" x="1662.5">	}</text></g></g><g id="minder_node47"><g id="node_expander42" style="cursor: pointer;" display="none"><path id="kity_path_1806" fill="white" stroke="gray" d="M1969.5,4598A6,6,0,1,1,1957.5,4598A6,6,0,1,1,1969.5,4598"></path><path id="kity_path_1807" fill="none" stroke="gray"></path></g><path id="node_outline43" fill="none" stroke="none" d="M1974.5,4556.5h210a5,5,0,0,1,5,5v73a5,5,0,0,1,-5,5h-210a5,5,0,0,1,-5,-5v-73a5,5,0,0,1,5,-5z"></path><g id="node_text43" fill="black"><text id="kity_text_606" text-rendering="inherit" font-size="12" dy=".8em" y="4620.700000047684" x="2054.5">分支主题</text></g><image id="kity_image_1518" xlink:href="https://xiaoboblog-bucket.oss-cn-hangzhou.aliyuncs.com/blog/20210512171815.png" x="1979.5" y="4561.5" width="200" height="56"></image></g><g id="minder_node48"><g id="node_expander46" style="cursor: pointer;"><path id="kity_path_1818" fill="white" stroke="gray" d="M1461.5,4883.5A6,6,0,1,1,1449.5,4883.5A6,6,0,1,1,1461.5,4883.5"></path><path id="kity_path_1819" fill="none" stroke="gray" d="M1451,4883.5L1460,4883.5"></path></g><path id="node_outline47" fill="none" stroke="none" d="M1466.5,4872.5h176a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-176a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text47" fill="black"><text id="kity_text_640" text-rendering="inherit" font-size="12" dy=".8em" y="4875.700000047684" x="1471.5">剑指 Offer 18. 删除链表的节点</text></g></g><g id="minder_node49"><g id="node_expander45" style="cursor: pointer;" display="none"><path id="kity_path_1815" fill="white" stroke="gray" d="M1687.5,4883.5A6,6,0,1,1,1675.5,4883.5A6,6,0,1,1,1687.5,4883.5"></path><path id="kity_path_1816" fill="none" stroke="gray"></path></g><path id="node_outline46" fill="none" stroke="none" d="M1692.5,4728.5h311a5,5,0,0,1,5,5v300a5,5,0,0,1,-5,5h-311a5,5,0,0,1,-5,-5v-300a5,5,0,0,1,5,-5z"></path><g id="node_text46" fill="black"><text id="kity_text_622" text-rendering="inherit" font-size="12" dy=".8em" y="4731.700000047684" x="1697.5">class Solution {</text><text id="kity_text_623" text-rendering="inherit" font-size="12" dy=".8em" y="4749.700000047684" x="1697.5">	public ListNode deleteNode(ListNode head, int val) {</text><text id="kity_text_624" text-rendering="inherit" font-size="12" dy=".8em" y="4767.700000047684" x="1697.5">	  </text><text id="kity_text_625" text-rendering="inherit" font-size="12" dy=".8em" y="4785.700000047684" x="1697.5">	&#xa0; &#xa0; if(val == head.val &amp;&amp; head.next !=null){</text><text id="kity_text_626" text-rendering="inherit" font-size="12" dy=".8em" y="4803.700000047684" x="1697.5">	&#xa0; &#xa0; &#xa0; &#xa0; return head.next;</text><text id="kity_text_627" text-rendering="inherit" font-size="12" dy=".8em" y="4821.700000047684" x="1697.5">	&#xa0; &#xa0; }</text><text id="kity_text_628" text-rendering="inherit" font-size="12" dy=".8em" y="4839.700000047684" x="1697.5">	&#xa0; &#xa0; ListNode pre = null;</text><text id="kity_text_629" text-rendering="inherit" font-size="12" dy=".8em" y="4857.700000047684" x="1697.5">	&#xa0; &#xa0; ListNode cur = head;</text><text id="kity_text_630" text-rendering="inherit" font-size="12" dy=".8em" y="4875.700000047684" x="1697.5">	&#xa0; &#xa0; while(cur.val != val){</text><text id="kity_text_631" text-rendering="inherit" font-size="12" dy=".8em" y="4893.700000047684" x="1697.5">	&#xa0; &#xa0; &#xa0; &#xa0; ListNode temp = cur.next;</text><text id="kity_text_632" text-rendering="inherit" font-size="12" dy=".8em" y="4911.700000047684" x="1697.5">	&#xa0; &#xa0; &#xa0; &#xa0; pre = cur;</text><text id="kity_text_633" text-rendering="inherit" font-size="12" dy=".8em" y="4929.700000047684" x="1697.5">	&#xa0; &#xa0; &#xa0; &#xa0; cur = temp;</text><text id="kity_text_634" text-rendering="inherit" font-size="12" dy=".8em" y="4947.700000047684" x="1697.5">	&#xa0; &#xa0; }</text><text id="kity_text_635" text-rendering="inherit" font-size="12" dy=".8em" y="4965.700000047684" x="1697.5">	&#xa0; &#xa0; pre.next = cur.next;</text><text id="kity_text_636" text-rendering="inherit" font-size="12" dy=".8em" y="4983.700000047684" x="1697.5">	&#xa0; &#xa0; return head;</text><text id="kity_text_637" text-rendering="inherit" font-size="12" dy=".8em" y="5001.700000047684" x="1697.5">	}</text><text id="kity_text_638" text-rendering="inherit" font-size="12" dy=".8em" y="5019.700000047684" x="1697.5">}</text></g></g><g id="minder_node50"><g id="node_expander52" style="cursor: pointer;"><path id="kity_path_1836" fill="white" stroke="gray" d="M1351.5,5353.5A6,6,0,1,1,1339.5,5353.5A6,6,0,1,1,1351.5,5353.5"></path><path id="kity_path_1837" fill="none" stroke="gray" d="M1341,5353.5L1350,5353.5"></path></g><path id="node_outline53" fill="none" stroke="none" d="M1356.5,5342.5h104a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-104a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text53" fill="black"><text id="kity_text_679" text-rendering="inherit" font-size="12" dy=".8em" y="5345.700000047684" x="1361.5">倒数k 倒序 间隔k</text></g></g><g id="minder_node51"><g id="node_expander49" style="cursor: pointer;"><path id="kity_path_1827" fill="white" stroke="gray" d="M1505.5,5206.5A6,6,0,1,1,1493.5,5206.5A6,6,0,1,1,1505.5,5206.5"></path><path id="kity_path_1828" fill="none" stroke="gray" d="M1495,5206.5L1504,5206.5"></path></g><path id="node_outline50" fill="none" stroke="none" d="M1510.5,5195.5h189a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-189a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text50" fill="black"><text id="kity_text_660" text-rendering="inherit" font-size="12" dy=".8em" y="5198.700000047684" x="1515.5">剑指 Offer 06. 从尾到头打印链表</text></g></g><g id="minder_node52"><g id="node_expander48" style="cursor: pointer;" display="none"><path id="kity_path_1824" fill="white" stroke="gray" d="M1744.5,5206.5A6,6,0,1,1,1732.5,5206.5A6,6,0,1,1,1744.5,5206.5"></path><path id="kity_path_1825" fill="none" stroke="gray"></path></g><path id="node_outline49" fill="none" stroke="none" d="M1749.5,5069.5h420a5,5,0,0,1,5,5v264a5,5,0,0,1,-5,5h-420a5,5,0,0,1,-5,-5v-264a5,5,0,0,1,5,-5z"></path><g id="node_text49" fill="black"><text id="kity_text_644" text-rendering="inherit" font-size="12" dy=".8em" y="5072.700000047684" x="1754.5">class Solution {</text><text id="kity_text_645" text-rendering="inherit" font-size="12" dy=".8em" y="5090.700000047684" x="1754.5">	public int[] reversePrint(ListNode head) {</text><text id="kity_text_646" text-rendering="inherit" font-size="12" dy=".8em" y="5108.700000047684" x="1754.5">&#xa0;LinkedList&lt;Integer&gt; linkedList = new LinkedList&lt;&gt;();</text><text id="kity_text_647" text-rendering="inherit" font-size="12" dy=".8em" y="5126.700000047684" x="1754.5">	&#xa0; &#xa0; //把head放入栈中</text><text id="kity_text_648" text-rendering="inherit" font-size="12" dy=".8em" y="5144.700000047684" x="1754.5">	&#xa0; &#xa0; while (null!=head){</text><text id="kity_text_649" text-rendering="inherit" font-size="12" dy=".8em" y="5162.700000047684" x="1754.5">	&#xa0; &#xa0; &#xa0; &#xa0; linkedList.addLast(head.val);//尾插</text><text id="kity_text_650" text-rendering="inherit" font-size="12" dy=".8em" y="5180.700000047684" x="1754.5">	&#xa0; &#xa0; &#xa0; &#xa0; head&#xa0; = head.next;//把下一个节点给当前节点</text><text id="kity_text_651" text-rendering="inherit" font-size="12" dy=".8em" y="5198.700000047684" x="1754.5">	&#xa0; &#xa0; }</text><text id="kity_text_652" text-rendering="inherit" font-size="12" dy=".8em" y="5216.700000047684" x="1754.5">	&#xa0; &#xa0; int[] arr = new int[linkedList.size()];</text><text id="kity_text_653" text-rendering="inherit" font-size="12" dy=".8em" y="5234.700000047684" x="1754.5">	&#xa0; &#xa0; for (int i = linkedList.size()-1,j=0; i &gt;=0&amp;&amp;j&lt;linkedList.size(); i--,j++) {</text><text id="kity_text_654" text-rendering="inherit" font-size="12" dy=".8em" y="5252.700000047684" x="1754.5">	&#xa0; &#xa0; &#xa0; &#xa0; arr[j] = linkedList.get(i);</text><text id="kity_text_655" text-rendering="inherit" font-size="12" dy=".8em" y="5270.700000047684" x="1754.5">	&#xa0; &#xa0; }</text><text id="kity_text_656" text-rendering="inherit" font-size="12" dy=".8em" y="5288.700000047684" x="1754.5">	&#xa0; &#xa0; return&#xa0; arr;</text><text id="kity_text_657" text-rendering="inherit" font-size="12" dy=".8em" y="5306.700000047684" x="1754.5">	}</text><text id="kity_text_658" text-rendering="inherit" font-size="12" dy=".8em" y="5324.700000047684" x="1754.5">}</text></g></g><g id="minder_node53"><g id="node_expander51" style="cursor: pointer;"><path id="kity_path_1833" fill="white" stroke="gray" d="M1505.5,5501.5A6,6,0,1,1,1493.5,5501.5A6,6,0,1,1,1505.5,5501.5"></path><path id="kity_path_1834" fill="none" stroke="gray" d="M1495,5501.5L1504,5501.5"></path></g><path id="node_outline52" fill="none" stroke="none" d="M1510.5,5490.5h207a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-207a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text52" fill="black"><text id="kity_text_677" text-rendering="inherit" font-size="12" dy=".8em" y="5493.700000047684" x="1515.5">剑指 Offer 22. 链表中倒数第k个节点</text></g></g><g id="minder_node54"><g id="node_expander50" style="cursor: pointer;" display="none"><path id="kity_path_1830" fill="white" stroke="gray" d="M1762.5,5501.5A6,6,0,1,1,1750.5,5501.5A6,6,0,1,1,1762.5,5501.5"></path><path id="kity_path_1831" fill="none" stroke="gray"></path></g><path id="node_outline51" fill="none" stroke="none" d="M1767.5,5373.5h324a5,5,0,0,1,5,5v246a5,5,0,0,1,-5,5h-324a5,5,0,0,1,-5,-5v-246a5,5,0,0,1,5,-5z"></path><g id="node_text51" fill="black"><text id="kity_text_662" text-rendering="inherit" font-size="12" dy=".8em" y="5376.700000047684" x="1772.5">class Solution {</text><text id="kity_text_663" text-rendering="inherit" font-size="12" dy=".8em" y="5394.700000047684" x="1772.5">	public ListNode getKthFromEnd(ListNode head, int k) {</text><text id="kity_text_664" text-rendering="inherit" font-size="12" dy=".8em" y="5412.700000047684" x="1772.5">	&#xa0; &#xa0; // le在后，cur在前&#xa0; 隔着k个单位距离</text><text id="kity_text_665" text-rendering="inherit" font-size="12" dy=".8em" y="5430.700000047684" x="1772.5">	&#xa0; &#xa0; ListNode le=head,cur=head;</text><text id="kity_text_666" text-rendering="inherit" font-size="12" dy=".8em" y="5448.700000047684" x="1772.5">	&#xa0; &#xa0; for(int i =0;i&lt;k;i++){</text><text id="kity_text_667" text-rendering="inherit" font-size="12" dy=".8em" y="5466.700000047684" x="1772.5">	&#xa0; &#xa0; &#xa0; &#xa0; le = le.next;</text><text id="kity_text_668" text-rendering="inherit" font-size="12" dy=".8em" y="5484.700000047684" x="1772.5">	&#xa0; &#xa0; }</text><text id="kity_text_669" text-rendering="inherit" font-size="12" dy=".8em" y="5502.700000047684" x="1772.5">	&#xa0; &#xa0; while(le!=null){</text><text id="kity_text_670" text-rendering="inherit" font-size="12" dy=".8em" y="5520.700000047684" x="1772.5">	&#xa0; &#xa0; &#xa0; &#xa0; le=le.next;</text><text id="kity_text_671" text-rendering="inherit" font-size="12" dy=".8em" y="5538.700000047684" x="1772.5">	&#xa0; &#xa0; &#xa0; &#xa0; cur = cur.next;</text><text id="kity_text_672" text-rendering="inherit" font-size="12" dy=".8em" y="5556.700000047684" x="1772.5">	&#xa0; &#xa0; }</text><text id="kity_text_673" text-rendering="inherit" font-size="12" dy=".8em" y="5574.700000047684" x="1772.5">	&#xa0; &#xa0; return cur;</text><text id="kity_text_674" text-rendering="inherit" font-size="12" dy=".8em" y="5592.700000047684" x="1772.5">	}</text><text id="kity_text_675" text-rendering="inherit" font-size="12" dy=".8em" y="5610.700000047684" x="1772.5">}</text></g></g><g id="minder_node55"><g id="node_expander57" style="cursor: pointer;"><path id="kity_path_1851" fill="white" stroke="gray" d="M1351.5,6033.5A6,6,0,1,1,1339.5,6033.5A6,6,0,1,1,1351.5,6033.5"></path><path id="kity_path_1852" fill="none" stroke="gray" d="M1341,6033.5L1350,6033.5"></path></g><path id="node_outline58" fill="none" stroke="none" d="M1356.5,6022.5h52a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-52a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text58" fill="black"><text id="kity_text_724" text-rendering="inherit" font-size="12" dy=".8em" y="6025.700000047684" x="1361.5">环 回文</text></g></g><g id="minder_node56"><g id="node_expander54" style="cursor: pointer;"><path id="kity_path_1842" fill="white" stroke="gray" d="M1453.5,5850.5A6,6,0,1,1,1441.5,5850.5A6,6,0,1,1,1453.5,5850.5"></path><path id="kity_path_1843" fill="none" stroke="gray" d="M1443,5850.5L1452,5850.5"></path></g><path id="node_outline55" fill="none" stroke="none" d="M1458.5,5839.5h87a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-87a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text55" fill="black"><text id="kity_text_703" text-rendering="inherit" font-size="12" dy=".8em" y="5842.700000047684" x="1463.5">234. 回文链表</text></g></g><g id="minder_node57"><g id="node_expander53" style="cursor: pointer;" display="none"><path id="kity_path_1839" fill="white" stroke="gray" d="M1590.5,5850.5A6,6,0,1,1,1578.5,5850.5A6,6,0,1,1,1590.5,5850.5"></path><path id="kity_path_1840" fill="none" stroke="gray"></path></g><path id="node_outline54" fill="none" stroke="none" d="M1595.5,5659.5h273a5,5,0,0,1,5,5v372a5,5,0,0,1,-5,5h-273a5,5,0,0,1,-5,-5v-372a5,5,0,0,1,5,-5z"></path><g id="node_text54" fill="black"><text id="kity_text_681" text-rendering="inherit" font-size="12" dy=".8em" y="5662.700000047684" x="1600.5">class Solution {</text><text id="kity_text_682" text-rendering="inherit" font-size="12" dy=".8em" y="5680.700000047684" x="1600.5">	public boolean isPalindrome(ListNode head) {</text><text id="kity_text_683" text-rendering="inherit" font-size="12" dy=".8em" y="5698.700000047684" x="1600.5">	&#xa0; &#xa0; /**</text><text id="kity_text_684" text-rendering="inherit" font-size="12" dy=".8em" y="5716.700000047684" x="1600.5">	&#xa0; &#xa0; 利用栈解决</text><text id="kity_text_685" text-rendering="inherit" font-size="12" dy=".8em" y="5734.700000047684" x="1600.5">	&#xa0; &#xa0; */</text><text id="kity_text_686" text-rendering="inherit" font-size="12" dy=".8em" y="5752.700000047684" x="1600.5">	&#xa0; &#xa0; ListNode temp = head;</text><text id="kity_text_687" text-rendering="inherit" font-size="12" dy=".8em" y="5770.700000047684" x="1600.5">	&#xa0; &#xa0; Stack&lt;Integer&gt; stack = new Stack();</text><text id="kity_text_688" text-rendering="inherit" font-size="12" dy=".8em" y="5788.700000047684" x="1600.5">	&#xa0; &#xa0; // 把链表放入栈中，</text><text id="kity_text_689" text-rendering="inherit" font-size="12" dy=".8em" y="5806.700000047684" x="1600.5">	&#xa0; &#xa0; while(temp!=null){</text><text id="kity_text_690" text-rendering="inherit" font-size="12" dy=".8em" y="5824.700000047684" x="1600.5">	&#xa0; &#xa0; &#xa0; &#xa0; stack.push(temp.val);</text><text id="kity_text_691" text-rendering="inherit" font-size="12" dy=".8em" y="5842.700000047684" x="1600.5">	&#xa0; &#xa0; &#xa0; &#xa0; temp = temp.next;</text><text id="kity_text_692" text-rendering="inherit" font-size="12" dy=".8em" y="5860.700000047684" x="1600.5">	&#xa0; &#xa0; }</text><text id="kity_text_693" text-rendering="inherit" font-size="12" dy=".8em" y="5878.700000047684" x="1600.5">	&#xa0; &#xa0; while(head!=null){</text><text id="kity_text_694" text-rendering="inherit" font-size="12" dy=".8em" y="5896.700000047684" x="1600.5">	&#xa0; &#xa0; &#xa0; &#xa0; if(head.val != stack.pop()){</text><text id="kity_text_695" text-rendering="inherit" font-size="12" dy=".8em" y="5914.700000047684" x="1600.5">	&#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; return false;</text><text id="kity_text_696" text-rendering="inherit" font-size="12" dy=".8em" y="5932.700000047684" x="1600.5">	&#xa0; &#xa0; &#xa0; &#xa0; }</text><text id="kity_text_697" text-rendering="inherit" font-size="12" dy=".8em" y="5950.700000047684" x="1600.5">	&#xa0; &#xa0; &#xa0; &#xa0; head = head.next;</text><text id="kity_text_698" text-rendering="inherit" font-size="12" dy=".8em" y="5968.700000047684" x="1600.5">	&#xa0; &#xa0; }</text><text id="kity_text_699" text-rendering="inherit" font-size="12" dy=".8em" y="5986.700000047684" x="1600.5">	&#xa0; &#xa0; return true;</text><text id="kity_text_700" text-rendering="inherit" font-size="12" dy=".8em" y="6004.700000047684" x="1600.5">	}</text><text id="kity_text_701" text-rendering="inherit" font-size="12" dy=".8em" y="6022.700000047684" x="1600.5">}</text></g></g><g id="minder_node58"><g id="node_expander56" style="cursor: pointer;"><path id="kity_path_1848" fill="white" stroke="gray" d="M1453.5,6208.5A6,6,0,1,1,1441.5,6208.5A6,6,0,1,1,1453.5,6208.5"></path><path id="kity_path_1849" fill="none" stroke="gray" d="M1443,6208.5L1452,6208.5"></path></g><path id="node_outline57" fill="none" stroke="none" d="M1458.5,6188.5h130a5,5,0,0,1,5,5v30a5,5,0,0,1,-5,5h-130a5,5,0,0,1,-5,-5v-30a5,5,0,0,1,5,-5z"></path><g id="node_text57" fill="black"><text id="kity_text_721" text-rendering="inherit" font-size="12" dy=".8em" y="6191.700000047684" x="1463.5">141. 环形链表</text><text id="kity_text_722" text-rendering="inherit" font-size="12" dy=".8em" y="6209.700000047684" x="1463.5">判断链表中是否有环。</text></g></g><g id="minder_node59"><g id="node_expander55" style="cursor: pointer;" display="none"><path id="kity_path_1845" fill="white" stroke="gray" d="M1633.5,6208.5A6,6,0,1,1,1621.5,6208.5A6,6,0,1,1,1633.5,6208.5"></path><path id="kity_path_1846" fill="none" stroke="gray"></path></g><path id="node_outline56" fill="none" stroke="none" d="M1638.5,6071.5h248a5,5,0,0,1,5,5v264a5,5,0,0,1,-5,5h-248a5,5,0,0,1,-5,-5v-264a5,5,0,0,1,5,-5z"></path><g id="node_text56" fill="black"><text id="kity_text_705" text-rendering="inherit" font-size="12" dy=".8em" y="6074.700000047684" x="1643.5">public class Solution {</text><text id="kity_text_706" text-rendering="inherit" font-size="12" dy=".8em" y="6092.700000047684" x="1643.5">	public boolean hasCycle(ListNode head) {</text><text id="kity_text_707" text-rendering="inherit" font-size="12" dy=".8em" y="6110.700000047684" x="1643.5">	&#xa0; &#xa0; /**</text><text id="kity_text_708" text-rendering="inherit" font-size="12" dy=".8em" y="6128.700000047684" x="1643.5">	&#xa0; &#xa0; 快慢指针 一个走两步&#xa0; 一个走一步</text><text id="kity_text_709" text-rendering="inherit" font-size="12" dy=".8em" y="6146.700000047684" x="1643.5">	&#xa0; &#xa0; */</text><text id="kity_text_710" text-rendering="inherit" font-size="12" dy=".8em" y="6164.700000047684" x="1643.5">	&#xa0; &#xa0; if(head==null) return false;</text><text id="kity_text_711" text-rendering="inherit" font-size="12" dy=".8em" y="6182.700000047684" x="1643.5">	&#xa0; &#xa0; ListNode slow = head,fast = head;</text><text id="kity_text_712" text-rendering="inherit" font-size="12" dy=".8em" y="6200.700000047684" x="1643.5">	&#xa0; &#xa0; while(fast!=null &amp;&amp; fast.next !=null){</text><text id="kity_text_713" text-rendering="inherit" font-size="12" dy=".8em" y="6218.700000047684" x="1643.5">	&#xa0; &#xa0; &#xa0; &#xa0; slow = slow.next;</text><text id="kity_text_714" text-rendering="inherit" font-size="12" dy=".8em" y="6236.700000047684" x="1643.5">	&#xa0; &#xa0; &#xa0; &#xa0; fast = fast.next.next;</text><text id="kity_text_715" text-rendering="inherit" font-size="12" dy=".8em" y="6254.700000047684" x="1643.5">	&#xa0; &#xa0; &#xa0; &#xa0; if(slow == fast) return true;&#xa0;</text><text id="kity_text_716" text-rendering="inherit" font-size="12" dy=".8em" y="6272.700000047684" x="1643.5">	&#xa0; &#xa0; }</text><text id="kity_text_717" text-rendering="inherit" font-size="12" dy=".8em" y="6290.700000047684" x="1643.5">	&#xa0; &#xa0; return false;</text><text id="kity_text_718" text-rendering="inherit" font-size="12" dy=".8em" y="6308.700000047684" x="1643.5">	}</text><text id="kity_text_719" text-rendering="inherit" font-size="12" dy=".8em" y="6326.700000047684" x="1643.5">}</text></g></g><g id="minder_node60"><g id="node_expander60" style="cursor: pointer;"><path id="kity_path_1860" fill="white" stroke="gray" d="M1351.5,6547.5A6,6,0,1,1,1339.5,6547.5A6,6,0,1,1,1351.5,6547.5"></path><path id="kity_path_1861" fill="none" stroke="gray" d="M1341,6547.5L1350,6547.5"></path></g><path id="node_outline61" fill="none" stroke="none" d="M1356.5,6536.5h36a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-36a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text61" fill="black"><text id="kity_text_748" text-rendering="inherit" font-size="12" dy=".8em" y="6539.700000047684" x="1361.5">合并</text></g></g><g id="minder_node61"><g id="node_expander59" style="cursor: pointer;"><path id="kity_path_1857" fill="white" stroke="gray" d="M1437.5,6547.5A6,6,0,1,1,1425.5,6547.5A6,6,0,1,1,1437.5,6547.5"></path><path id="kity_path_1858" fill="none" stroke="gray" d="M1427,6547.5L1436,6547.5"></path></g><path id="node_outline60" fill="none" stroke="none" d="M1442.5,6536.5h201a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-201a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text60" fill="black"><text id="kity_text_746" text-rendering="inherit" font-size="12" dy=".8em" y="6539.700000047684" x="1447.5">剑指 Offer 25. 合并两个排序的链表</text></g></g><g id="minder_node62"><g id="node_expander58" style="cursor: pointer;" display="none"><path id="kity_path_1854" fill="white" stroke="gray" d="M1688.5,6547.5A6,6,0,1,1,1676.5,6547.5A6,6,0,1,1,1688.5,6547.5"></path><path id="kity_path_1855" fill="none" stroke="gray"></path></g><path id="node_outline59" fill="none" stroke="none" d="M1693.5,6374.5h455a5,5,0,0,1,5,5v336a5,5,0,0,1,-5,5h-455a5,5,0,0,1,-5,-5v-336a5,5,0,0,1,5,-5z"></path><g id="node_text59" fill="black"><text id="kity_text_726" text-rendering="inherit" font-size="12" dy=".8em" y="6377.700000047684" x="1698.5">	public ListNode mergeTwoLists(ListNode l1, ListNode l2) {</text><text id="kity_text_727" text-rendering="inherit" font-size="12" dy=".8em" y="6395.700000047684" x="1698.5">	&#xa0; &#xa0;ListNode temp&#xa0; = new ListNode(0);</text><text id="kity_text_728" text-rendering="inherit" font-size="12" dy=".8em" y="6413.700000047684" x="1698.5">	&#xa0; &#xa0;ListNode cur = temp;</text><text id="kity_text_729" text-rendering="inherit" font-size="12" dy=".8em" y="6431.700000047684" x="1698.5">	&#xa0; &#xa0;while(l1!=null &amp;&amp; l2!=null){</text><text id="kity_text_730" text-rendering="inherit" font-size="12" dy=".8em" y="6449.700000047684" x="1698.5">	&#xa0; &#xa0; &#xa0; &#xa0;// l1的值&lt;l2的值</text><text id="kity_text_731" text-rendering="inherit" font-size="12" dy=".8em" y="6467.700000047684" x="1698.5">	&#xa0; &#xa0; &#xa0; &#xa0;if(l1.val&lt;l2.val){</text><text id="kity_text_732" text-rendering="inherit" font-size="12" dy=".8em" y="6485.700000047684" x="1698.5">	&#xa0; &#xa0; &#xa0; &#xa0; cur.next = l1;</text><text id="kity_text_733" text-rendering="inherit" font-size="12" dy=".8em" y="6503.700000047684" x="1698.5">	&#xa0; &#xa0; &#xa0; &#xa0; l1 = l1.next;</text><text id="kity_text_734" text-rendering="inherit" font-size="12" dy=".8em" y="6521.700000047684" x="1698.5">	&#xa0; &#xa0; &#xa0; &#xa0;}else{</text><text id="kity_text_735" text-rendering="inherit" font-size="12" dy=".8em" y="6539.700000047684" x="1698.5">	&#xa0; &#xa0; &#xa0; &#xa0; // l1&gt;l2 || l1=l2</text><text id="kity_text_736" text-rendering="inherit" font-size="12" dy=".8em" y="6557.700000047684" x="1698.5">	&#xa0; &#xa0; &#xa0; &#xa0; cur.next = l2;</text><text id="kity_text_737" text-rendering="inherit" font-size="12" dy=".8em" y="6575.700000047684" x="1698.5">	&#xa0; &#xa0; &#xa0; &#xa0; l2 = l2.next;</text><text id="kity_text_738" text-rendering="inherit" font-size="12" dy=".8em" y="6593.700000047684" x="1698.5">	&#xa0; &#xa0; &#xa0; &#xa0;}</text><text id="kity_text_739" text-rendering="inherit" font-size="12" dy=".8em" y="6611.700000047684" x="1698.5">	&#xa0; &#xa0; &#xa0; &#xa0; cur = cur.next; // 移动cur指针 往前走</text><text id="kity_text_740" text-rendering="inherit" font-size="12" dy=".8em" y="6629.700000047684" x="1698.5">	&#xa0; &#xa0;}</text><text id="kity_text_741" text-rendering="inherit" font-size="12" dy=".8em" y="6647.700000047684" x="1698.5">	&#xa0; &#xa0;//合并最后一个节点 a 123&#xa0; b 123 此时a 还有3 b空 c 11223 把a中的3放在最后面</text><text id="kity_text_742" text-rendering="inherit" font-size="12" dy=".8em" y="6665.700000047684" x="1698.5">	&#xa0; &#xa0;cur.next = l1!=null?l1:l2;</text><text id="kity_text_743" text-rendering="inherit" font-size="12" dy=".8em" y="6683.700000047684" x="1698.5">	&#xa0; &#xa0;return temp.next;</text><text id="kity_text_744" text-rendering="inherit" font-size="12" dy=".8em" y="6701.700000047684" x="1698.5">	}</text></g></g><g id="minder_node63"><g id="node_expander63" style="cursor: pointer;"><path id="kity_path_1869" fill="white" stroke="gray" d="M1351.5,6905.5A6,6,0,1,1,1339.5,6905.5A6,6,0,1,1,1351.5,6905.5"></path><path id="kity_path_1870" fill="none" stroke="gray" d="M1341,6905.5L1350,6905.5"></path></g><path id="node_outline64" fill="none" stroke="none" d="M1356.5,6894.5h36a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-36a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text64" fill="black"><text id="kity_text_770" text-rendering="inherit" font-size="12" dy=".8em" y="6897.700000047684" x="1361.5">公共</text></g></g><g id="minder_node64"><g id="node_expander62" style="cursor: pointer;"><path id="kity_path_1866" fill="white" stroke="gray" d="M1437.5,6905.5A6,6,0,1,1,1425.5,6905.5A6,6,0,1,1,1437.5,6905.5"></path><path id="kity_path_1867" fill="none" stroke="gray" d="M1427,6905.5L1436,6905.5"></path></g><path id="node_outline63" fill="none" stroke="none" d="M1442.5,6894.5h236a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-236a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text63" fill="black"><text id="kity_text_768" text-rendering="inherit" font-size="12" dy=".8em" y="6897.700000047684" x="1447.5">剑指 Offer 52. 两个链表的第一个公共节点</text></g></g><g id="minder_node65"><g id="node_expander61" style="cursor: pointer;" display="none"><path id="kity_path_1863" fill="white" stroke="gray" d="M1723.5,6905.5A6,6,0,1,1,1711.5,6905.5A6,6,0,1,1,1723.5,6905.5"></path><path id="kity_path_1864" fill="none" stroke="gray"></path></g><path id="node_outline62" fill="none" stroke="none" d="M1728.5,6750.5h427a5,5,0,0,1,5,5v300a5,5,0,0,1,-5,5h-427a5,5,0,0,1,-5,-5v-300a5,5,0,0,1,5,-5z"></path><g id="node_text62" fill="black"><text id="kity_text_750" text-rendering="inherit" font-size="12" dy=".8em" y="6753.700000047684" x="1733.5">/**</text><text id="kity_text_751" text-rendering="inherit" font-size="12" dy=".8em" y="6771.700000047684" x="1733.5">1.主要是通过 a+b = b+a，</text><text id="kity_text_752" text-rendering="inherit" font-size="12" dy=".8em" y="6789.700000047684" x="1733.5">2.两个指针，a 走完 自己的走 链表b的， b走完自己的走 链表a的</text><text id="kity_text_753" text-rendering="inherit" font-size="12" dy=".8em" y="6807.700000047684" x="1733.5">3.如果他们有相交，他们就会相遇</text><text id="kity_text_754" text-rendering="inherit" font-size="12" dy=".8em" y="6825.700000047684" x="1733.5">*/</text><text id="kity_text_755" text-rendering="inherit" font-size="12" dy=".8em" y="6843.700000047684" x="1733.5">public class Solution {</text><text id="kity_text_756" text-rendering="inherit" font-size="12" dy=".8em" y="6861.700000047684" x="1733.5">	public ListNode getIntersectionNode(ListNode headA, ListNode headB) {</text><text id="kity_text_757" text-rendering="inherit" font-size="12" dy=".8em" y="6879.700000047684" x="1733.5">	ListNode a = headA;</text><text id="kity_text_758" text-rendering="inherit" font-size="12" dy=".8em" y="6897.700000047684" x="1733.5">	ListNode b = headB;</text><text id="kity_text_759" text-rendering="inherit" font-size="12" dy=".8em" y="6915.700000047684" x="1733.5">	while(a!=b){</text><text id="kity_text_760" text-rendering="inherit" font-size="12" dy=".8em" y="6933.700000047684" x="1733.5">	&#xa0; &#xa0; //</text><text id="kity_text_761" text-rendering="inherit" font-size="12" dy=".8em" y="6951.700000047684" x="1733.5">	&#xa0; &#xa0; a = a==null?headB:a.next;</text><text id="kity_text_762" text-rendering="inherit" font-size="12" dy=".8em" y="6969.700000047684" x="1733.5">	&#xa0; &#xa0; b = b==null?headA:b.next;</text><text id="kity_text_763" text-rendering="inherit" font-size="12" dy=".8em" y="6987.700000047684" x="1733.5">	}</text><text id="kity_text_764" text-rendering="inherit" font-size="12" dy=".8em" y="7005.700000047684" x="1733.5">	&#xa0; &#xa0;return a;</text><text id="kity_text_765" text-rendering="inherit" font-size="12" dy=".8em" y="7023.700000047684" x="1733.5">	}</text><text id="kity_text_766" text-rendering="inherit" font-size="12" dy=".8em" y="7041.700000047684" x="1733.5">}</text></g></g><g id="minder_node66"><g id="node_expander108" style="cursor: pointer;"><path id="kity_path_2004" fill="white" stroke="gray" d="M1240.5,9884.5A6,6,0,1,1,1228.5,9884.5A6,6,0,1,1,1240.5,9884.5"></path><path id="kity_path_2005" fill="none" stroke="gray" d="M1230,9884.5L1239,9884.5"></path></g><path id="node_outline109" fill="rgb(238, 243, 246)" stroke="rgb(115, 161, 191)" d="M1244.5,9871.5h64a3,3,0,0,1,3,3v20a3,3,0,0,1,-3,3h-64a3,3,0,0,1,-3,-3v-20a3,3,0,0,1,3,-3z" stroke-width="1"></path><g id="node_text109" fill="black"><text id="kity_text_1111" text-rendering="inherit" font-size="14" dy=".8em" y="9875.400000095367" x="1261.5">数组</text></g></g><g id="minder_node67"><g id="node_expander73" style="cursor: pointer;"><path id="kity_path_1899" fill="white" stroke="gray" d="M1351.5,7568.5A6,6,0,1,1,1339.5,7568.5A6,6,0,1,1,1351.5,7568.5"></path><path id="kity_path_1900" fill="none" stroke="gray" d="M1341,7568.5L1350,7568.5"></path></g><path id="node_outline74" fill="none" stroke="none" d="M1356.5,7557.5h36a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-36a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text74" fill="black"><text id="kity_text_835" text-rendering="inherit" font-size="12" dy=".8em" y="7560.700000047684" x="1361.5">统计</text></g></g><g id="minder_node68"><g id="node_expander66" style="cursor: pointer;"><path id="kity_path_1878" fill="white" stroke="gray" d="M1437.5,7184.5A6,6,0,1,1,1425.5,7184.5A6,6,0,1,1,1437.5,7184.5"></path><path id="kity_path_1879" fill="none" stroke="gray" d="M1427,7184.5L1436,7184.5"></path></g><path id="node_outline67" fill="none" stroke="none" d="M1442.5,7173.5h189a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-189a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text67" fill="black"><text id="kity_text_784" text-rendering="inherit" font-size="12" dy=".8em" y="7176.700000047684" x="1447.5">剑指 Offer 03. 数组中重复的数字</text></g></g><g id="minder_node69"><g id="node_expander65" style="cursor: pointer;" display="none"><path id="kity_path_1875" fill="white" stroke="gray" d="M1676.5,7184.5A6,6,0,1,1,1664.5,7184.5A6,6,0,1,1,1676.5,7184.5"></path><path id="kity_path_1876" fill="none" stroke="gray"></path></g><path id="node_outline66" fill="none" stroke="none" d="M1681.5,7101.5h251a5,5,0,0,1,5,5v156a5,5,0,0,1,-5,5h-251a5,5,0,0,1,-5,-5v-156a5,5,0,0,1,5,-5z"></path><g id="node_text66" fill="black"><text id="kity_text_774" text-rendering="inherit" font-size="12" dy=".8em" y="7104.700000047684" x="1686.5">// 方法2</text><text id="kity_text_775" text-rendering="inherit" font-size="12" dy=".8em" y="7122.700000047684" x="1686.5">public int findRepeatNumber(int[] nums) {</text><text id="kity_text_776" text-rendering="inherit" font-size="12" dy=".8em" y="7140.700000047684" x="1686.5">	&#xa0; &#xa0; Set&lt;Integer&gt; res = new HashSet&lt;&gt;();</text><text id="kity_text_777" text-rendering="inherit" font-size="12" dy=".8em" y="7158.700000047684" x="1686.5">	&#xa0; &#xa0; for(int num : nums) {</text><text id="kity_text_778" text-rendering="inherit" font-size="12" dy=".8em" y="7176.700000047684" x="1686.5">	&#xa0; &#xa0; &#xa0; &#xa0; if(res.contains(num)) return num;</text><text id="kity_text_779" text-rendering="inherit" font-size="12" dy=".8em" y="7194.700000047684" x="1686.5">	&#xa0; &#xa0; &#xa0; &#xa0; res.add(num);</text><text id="kity_text_780" text-rendering="inherit" font-size="12" dy=".8em" y="7212.700000047684" x="1686.5">	&#xa0; &#xa0; }</text><text id="kity_text_781" text-rendering="inherit" font-size="12" dy=".8em" y="7230.700000047684" x="1686.5">	&#xa0; &#xa0; return -1;</text><text id="kity_text_782" text-rendering="inherit" font-size="12" dy=".8em" y="7248.700000047684" x="1686.5">	}</text></g></g><g id="minder_node70"><g id="node_expander68" style="cursor: pointer;"><path id="kity_path_1884" fill="white" stroke="gray" d="M1437.5,7452.5A6,6,0,1,1,1425.5,7452.5A6,6,0,1,1,1437.5,7452.5"></path><path id="kity_path_1885" fill="none" stroke="gray" d="M1427,7452.5L1436,7452.5"></path></g><path id="node_outline69" fill="none" stroke="none" d="M1442.5,7432.5h235a5,5,0,0,1,5,5v30a5,5,0,0,1,-5,5h-235a5,5,0,0,1,-5,-5v-30a5,5,0,0,1,5,-5z"></path><g id="node_text69" fill="black"><text id="kity_text_804" text-rendering="inherit" font-size="12" dy=".8em" y="7435.700000047684" x="1447.5">剑指 Offer 53 - I. 在排序数组中查找数字 I</text><text id="kity_text_805" text-rendering="inherit" font-size="12" dy=".8em" y="7453.700000047684" x="1447.5">统计一个数字在排序数组中出现的次数。</text></g></g><g id="minder_node71"><g id="node_expander67" style="cursor: pointer;" display="none"><path id="kity_path_1881" fill="white" stroke="gray" d="M1722.5,7452.5A6,6,0,1,1,1710.5,7452.5A6,6,0,1,1,1722.5,7452.5"></path><path id="kity_path_1882" fill="none" stroke="gray"></path></g><path id="node_outline68" fill="none" stroke="none" d="M1727.5,7297.5h309a5,5,0,0,1,5,5v300a5,5,0,0,1,-5,5h-309a5,5,0,0,1,-5,-5v-300a5,5,0,0,1,5,-5z"></path><g id="node_text68" fill="black"><text id="kity_text_786" text-rendering="inherit" font-size="12" dy=".8em" y="7300.700000047684" x="1732.5">class Solution {</text><text id="kity_text_787" text-rendering="inherit" font-size="12" dy=".8em" y="7318.700000047684" x="1732.5">	public int search(int[] nums, int target) {</text><text id="kity_text_788" text-rendering="inherit" font-size="12" dy=".8em" y="7336.700000047684" x="1732.5">	&#xa0; &#xa0; Map&lt;Integer,Integer&gt; map = new HashMap&lt;&gt;();</text><text id="kity_text_789" text-rendering="inherit" font-size="12" dy=".8em" y="7354.700000047684" x="1732.5">	&#xa0; &#xa0; if(nums.length==0){</text><text id="kity_text_790" text-rendering="inherit" font-size="12" dy=".8em" y="7372.700000047684" x="1732.5">	&#xa0; &#xa0; &#xa0; &#xa0; return 0;</text><text id="kity_text_791" text-rendering="inherit" font-size="12" dy=".8em" y="7390.700000047684" x="1732.5">	&#xa0; &#xa0; }</text><text id="kity_text_792" text-rendering="inherit" font-size="12" dy=".8em" y="7408.700000047684" x="1732.5">	&#xa0; &#xa0;for(int i = 0;i&lt;nums.length;i++){</text><text id="kity_text_793" text-rendering="inherit" font-size="12" dy=".8em" y="7426.700000047684" x="1732.5">	&#xa0; &#xa0; &#xa0; &#xa0; if(!map.containsKey(nums[i])){</text><text id="kity_text_794" text-rendering="inherit" font-size="12" dy=".8em" y="7444.700000047684" x="1732.5">	&#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; map.put(nums[i],1);</text><text id="kity_text_795" text-rendering="inherit" font-size="12" dy=".8em" y="7462.700000047684" x="1732.5">	&#xa0; &#xa0; &#xa0; &#xa0; }else {</text><text id="kity_text_796" text-rendering="inherit" font-size="12" dy=".8em" y="7480.700000047684" x="1732.5">	&#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; int temp = map.get(nums[i]);</text><text id="kity_text_797" text-rendering="inherit" font-size="12" dy=".8em" y="7498.700000047684" x="1732.5">	&#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; map.put(nums[i],temp+1);</text><text id="kity_text_798" text-rendering="inherit" font-size="12" dy=".8em" y="7516.700000047684" x="1732.5">	&#xa0; &#xa0; &#xa0; &#xa0; }</text><text id="kity_text_799" text-rendering="inherit" font-size="12" dy=".8em" y="7534.700000047684" x="1732.5">	&#xa0; &#xa0; }</text><text id="kity_text_800" text-rendering="inherit" font-size="12" dy=".8em" y="7552.700000047684" x="1732.5">	&#xa0; &#xa0; return map.get(target)==null?0:map.get(target);</text><text id="kity_text_801" text-rendering="inherit" font-size="12" dy=".8em" y="7570.700000047684" x="1732.5">	}</text><text id="kity_text_802" text-rendering="inherit" font-size="12" dy=".8em" y="7588.700000047684" x="1732.5">}</text></g></g><g id="minder_node72"><g id="node_expander70" style="cursor: pointer;"><path id="kity_path_1890" fill="white" stroke="gray" d="M1437.5,7720.5A6,6,0,1,1,1425.5,7720.5A6,6,0,1,1,1437.5,7720.5"></path><path id="kity_path_1891" fill="none" stroke="gray" d="M1427,7720.5L1436,7720.5"></path></g><path id="node_outline71" fill="none" stroke="none" d="M1442.5,7709.5h135a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-135a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text71" fill="black"><text id="kity_text_817" text-rendering="inherit" font-size="12" dy=".8em" y="7712.700000047684" x="1447.5">136. 只出现一次的数字</text></g></g><g id="minder_node73"><g id="node_expander69" style="cursor: pointer;" display="none"><path id="kity_path_1887" fill="white" stroke="gray" d="M1622.5,7720.5A6,6,0,1,1,1610.5,7720.5A6,6,0,1,1,1622.5,7720.5"></path><path id="kity_path_1888" fill="none" stroke="gray"></path></g><path id="node_outline70" fill="none" stroke="none" d="M1627.5,7637.5h222a5,5,0,0,1,5,5v156a5,5,0,0,1,-5,5h-222a5,5,0,0,1,-5,-5v-156a5,5,0,0,1,5,-5z"></path><g id="node_text70" fill="black"><text id="kity_text_807" text-rendering="inherit" font-size="12" dy=".8em" y="7640.700000047684" x="1632.5">class Solution {</text><text id="kity_text_808" text-rendering="inherit" font-size="12" dy=".8em" y="7658.700000047684" x="1632.5">	public int singleNumber(int[] nums) {</text><text id="kity_text_809" text-rendering="inherit" font-size="12" dy=".8em" y="7676.700000047684" x="1632.5">	&#xa0; &#xa0; int temp =0;</text><text id="kity_text_810" text-rendering="inherit" font-size="12" dy=".8em" y="7694.700000047684" x="1632.5">	&#xa0; &#xa0; for(int i =0;i&lt;nums.length;i++){</text><text id="kity_text_811" text-rendering="inherit" font-size="12" dy=".8em" y="7712.700000047684" x="1632.5">	&#xa0; &#xa0; &#xa0; &#xa0; temp ^=&#xa0; &#xa0;nums[i];</text><text id="kity_text_812" text-rendering="inherit" font-size="12" dy=".8em" y="7730.700000047684" x="1632.5">	&#xa0; &#xa0; }</text><text id="kity_text_813" text-rendering="inherit" font-size="12" dy=".8em" y="7748.700000047684" x="1632.5">	&#xa0; return temp;</text><text id="kity_text_814" text-rendering="inherit" font-size="12" dy=".8em" y="7766.700000047684" x="1632.5">	}</text><text id="kity_text_815" text-rendering="inherit" font-size="12" dy=".8em" y="7784.700000047684" x="1632.5">}</text></g></g><g id="minder_node74"><g id="node_expander72" style="cursor: pointer;"><path id="kity_path_1896" fill="white" stroke="gray" d="M1437.5,7952.5A6,6,0,1,1,1425.5,7952.5A6,6,0,1,1,1437.5,7952.5"></path><path id="kity_path_1897" fill="none" stroke="gray" d="M1427,7952.5L1436,7952.5"></path></g><path id="node_outline73" fill="none" stroke="none" d="M1442.5,7941.5h71a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-71a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text73" fill="black"><text id="kity_text_833" text-rendering="inherit" font-size="12" dy=".8em" y="7944.700000047684" x="1447.5">1. 两数之和</text></g></g><g id="minder_node75"><g id="node_expander71" style="cursor: pointer;" display="none"><path id="kity_path_1893" fill="white" stroke="gray" d="M1558.5,7952.5A6,6,0,1,1,1546.5,7952.5A6,6,0,1,1,1558.5,7952.5"></path><path id="kity_path_1894" fill="none" stroke="gray"></path></g><path id="node_outline72" fill="none" stroke="none" d="M1563.5,7833.5h342a5,5,0,0,1,5,5v228a5,5,0,0,1,-5,5h-342a5,5,0,0,1,-5,-5v-228a5,5,0,0,1,5,-5z"></path><g id="node_text72" fill="black"><text id="kity_text_819" text-rendering="inherit" font-size="12" dy=".8em" y="7836.700000047684" x="1568.5">	public int[] twoSum(int[] nums, int target) {</text><text id="kity_text_820" text-rendering="inherit" font-size="12" dy=".8em" y="7854.700000047684" x="1568.5">	&#xa0; &#xa0; HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();</text><text id="kity_text_821" text-rendering="inherit" font-size="12" dy=".8em" y="7872.700000047684" x="1568.5">	&#xa0; &#xa0; for (int j = 0; j&lt;nums.length;j++){</text><text id="kity_text_822" text-rendering="inherit" font-size="12" dy=".8em" y="7890.700000047684" x="1568.5">	&#xa0; &#xa0; &#xa0; &#xa0; int temp = target - nums[j];</text><text id="kity_text_823" text-rendering="inherit" font-size="12" dy=".8em" y="7908.700000047684" x="1568.5">	&#xa0; &#xa0; &#xa0; &#xa0; if (map.containsKey(temp)) {</text><text id="kity_text_824" text-rendering="inherit" font-size="12" dy=".8em" y="7926.700000047684" x="1568.5">	&#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; return new int[]{j,map.get(temp)};</text><text id="kity_text_825" text-rendering="inherit" font-size="12" dy=".8em" y="7944.700000047684" x="1568.5">	&#xa0; &#xa0; &#xa0; &#xa0; }else</text><text id="kity_text_826" text-rendering="inherit" font-size="12" dy=".8em" y="7962.700000047684" x="1568.5">	&#xa0; &#xa0; &#xa0; &#xa0; {</text><text id="kity_text_827" text-rendering="inherit" font-size="12" dy=".8em" y="7980.700000047684" x="1568.5">	&#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; map.put(nums[j],j);</text><text id="kity_text_828" text-rendering="inherit" font-size="12" dy=".8em" y="7998.700000047684" x="1568.5">	&#xa0; &#xa0; &#xa0; &#xa0; }</text><text id="kity_text_829" text-rendering="inherit" font-size="12" dy=".8em" y="8016.700000047684" x="1568.5">	&#xa0; &#xa0; }</text><text id="kity_text_830" text-rendering="inherit" font-size="12" dy=".8em" y="8034.700000047684" x="1568.5">	&#xa0; &#xa0; return new&#xa0; int[2];</text><text id="kity_text_831" text-rendering="inherit" font-size="12" dy=".8em" y="8052.700000047684" x="1568.5">	}</text></g></g><g id="minder_node76"><g id="node_expander76" style="cursor: pointer;"><path id="kity_path_1908" fill="white" stroke="gray" d="M1351.5,8238.5A6,6,0,1,1,1339.5,8238.5A6,6,0,1,1,1351.5,8238.5"></path><path id="kity_path_1909" fill="none" stroke="gray" d="M1341,8238.5L1350,8238.5"></path></g><path id="node_outline77" fill="none" stroke="none" d="M1356.5,8227.5h59a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-59a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text77" fill="black"><text id="kity_text_855" text-rendering="inherit" font-size="12" dy=".8em" y="8230.700000047684" x="1361.5">前后指针</text></g></g><g id="minder_node77"><g id="node_expander75" style="cursor: pointer;"><path id="kity_path_1905" fill="white" stroke="gray" d="M1460.5,8238.5A6,6,0,1,1,1448.5,8238.5A6,6,0,1,1,1460.5,8238.5"></path><path id="kity_path_1906" fill="none" stroke="gray" d="M1450,8238.5L1459,8238.5"></path></g><path id="node_outline76" fill="none" stroke="none" d="M1465.5,8227.5h183a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-183a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text76" fill="black"><text id="kity_text_853" text-rendering="inherit" font-size="12" dy=".8em" y="8230.700000047684" x="1470.5">剑指 Offer 57. 和为s的两个数字</text></g></g><g id="minder_node78"><g id="node_expander74" style="cursor: pointer;" display="none"><path id="kity_path_1902" fill="white" stroke="gray" d="M1693.5,8238.5A6,6,0,1,1,1681.5,8238.5A6,6,0,1,1,1693.5,8238.5"></path><path id="kity_path_1903" fill="none" stroke="gray"></path></g><path id="node_outline75" fill="none" stroke="none" d="M1698.5,8101.5h296a5,5,0,0,1,5,5v264a5,5,0,0,1,-5,5h-296a5,5,0,0,1,-5,-5v-264a5,5,0,0,1,5,-5z"></path><g id="node_text75" fill="black"><text id="kity_text_837" text-rendering="inherit" font-size="12" dy=".8em" y="8104.700000047684" x="1703.5">class Solution {</text><text id="kity_text_838" text-rendering="inherit" font-size="12" dy=".8em" y="8122.700000047684" x="1703.5">	public int[] twoSum(int[] nums, int target) {</text><text id="kity_text_839" text-rendering="inherit" font-size="12" dy=".8em" y="8140.700000047684" x="1703.5">	&#xa0; &#xa0; // 1.双指针 一个前一个后 小了就左走，大了向右走</text><text id="kity_text_840" text-rendering="inherit" font-size="12" dy=".8em" y="8158.700000047684" x="1703.5">	&#xa0; &#xa0; int start = 0,end=nums.length-1;</text><text id="kity_text_841" text-rendering="inherit" font-size="12" dy=".8em" y="8176.700000047684" x="1703.5">	&#xa0; &#xa0; while(start&lt;end){</text><text id="kity_text_842" text-rendering="inherit" font-size="12" dy=".8em" y="8194.700000047684" x="1703.5">	&#xa0; &#xa0; &#xa0; &#xa0; int s = nums[start]+nums[end];</text><text id="kity_text_843" text-rendering="inherit" font-size="12" dy=".8em" y="8212.700000047684" x="1703.5">	&#xa0; &#xa0; &#xa0; &#xa0; if(s&lt;target) start++;</text><text id="kity_text_844" text-rendering="inherit" font-size="12" dy=".8em" y="8230.700000047684" x="1703.5">	&#xa0; &#xa0; &#xa0; &#xa0; else if(s&gt;target) end--;</text><text id="kity_text_845" text-rendering="inherit" font-size="12" dy=".8em" y="8248.700000047684" x="1703.5">	&#xa0; &#xa0; &#xa0; &#xa0; else {</text><text id="kity_text_846" text-rendering="inherit" font-size="12" dy=".8em" y="8266.700000047684" x="1703.5">	&#xa0; &#xa0; &#xa0; &#xa0; return new int[]{nums[start],nums[end]};</text><text id="kity_text_847" text-rendering="inherit" font-size="12" dy=".8em" y="8284.700000047684" x="1703.5">	&#xa0; &#xa0; }</text><text id="kity_text_848" text-rendering="inherit" font-size="12" dy=".8em" y="8302.700000047684" x="1703.5">	&#xa0; &#xa0; }</text><text id="kity_text_849" text-rendering="inherit" font-size="12" dy=".8em" y="8320.700000047684" x="1703.5">	&#xa0; &#xa0; return new int[0];</text><text id="kity_text_850" text-rendering="inherit" font-size="12" dy=".8em" y="8338.700000047684" x="1703.5">	}</text><text id="kity_text_851" text-rendering="inherit" font-size="12" dy=".8em" y="8356.700000047684" x="1703.5">}</text></g></g><g id="minder_node79"><g id="node_expander82" style="cursor: pointer;"><path id="kity_path_1926" fill="white" stroke="gray" d="M1351.5,8707.5A6,6,0,1,1,1339.5,8707.5A6,6,0,1,1,1351.5,8707.5"></path><path id="kity_path_1927" fill="none" stroke="gray" d="M1341,8707.5L1350,8707.5"></path></g><path id="node_outline83" fill="none" stroke="none" d="M1356.5,8696.5h60a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-60a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text83" fill="black"><text id="kity_text_894" text-rendering="inherit" font-size="12" dy=".8em" y="8699.700000047684" x="1361.5">快慢指针</text></g></g><g id="minder_node80"><g id="node_expander78" style="cursor: pointer;"><path id="kity_path_1914" fill="white" stroke="gray" d="M1461.5,8560.5A6,6,0,1,1,1449.5,8560.5A6,6,0,1,1,1461.5,8560.5"></path><path id="kity_path_1915" fill="none" stroke="gray" d="M1451,8560.5L1460,8560.5"></path></g><path id="node_outline79" fill="none" stroke="none" d="M1466.5,8549.5h272a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-272a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text79" fill="black"><text id="kity_text_875" text-rendering="inherit" font-size="12" dy=".8em" y="8552.700000047684" x="1471.5">剑指 Offer 21. 调整数组顺序使奇数位于偶数前面</text></g></g><g id="minder_node81"><g id="node_expander77" style="cursor: pointer;" display="none"><path id="kity_path_1911" fill="white" stroke="gray" d="M1783.5,8560.5A6,6,0,1,1,1771.5,8560.5A6,6,0,1,1,1783.5,8560.5"></path><path id="kity_path_1912" fill="none" stroke="gray"></path></g><path id="node_outline78" fill="none" stroke="none" d="M1788.5,8405.5h329a5,5,0,0,1,5,5v300a5,5,0,0,1,-5,5h-329a5,5,0,0,1,-5,-5v-300a5,5,0,0,1,5,-5z"></path><g id="node_text78" fill="black"><text id="kity_text_857" text-rendering="inherit" font-size="12" dy=".8em" y="8408.700000047684" x="1793.5">class Solution {</text><text id="kity_text_858" text-rendering="inherit" font-size="12" dy=".8em" y="8426.700000047684" x="1793.5">	public int[] exchange(int[] nums) {</text><text id="kity_text_859" text-rendering="inherit" font-size="12" dy=".8em" y="8444.700000047684" x="1793.5">	</text><text id="kity_text_860" text-rendering="inherit" font-size="12" dy=".8em" y="8462.700000047684" x="1793.5">	&#xa0; &#xa0; int len=nums.length;</text><text id="kity_text_861" text-rendering="inherit" font-size="12" dy=".8em" y="8480.700000047684" x="1793.5">	&#xa0; &#xa0; if(len==1) return nums;</text><text id="kity_text_862" text-rendering="inherit" font-size="12" dy=".8em" y="8498.700000047684" x="1793.5">	&#xa0; &#xa0; int j=0;</text><text id="kity_text_863" text-rendering="inherit" font-size="12" dy=".8em" y="8516.700000047684" x="1793.5">	&#xa0; &#xa0; for(int i=0;i&lt;len;i++){//i is on the right,j is on the left&#xa0;</text><text id="kity_text_864" text-rendering="inherit" font-size="12" dy=".8em" y="8534.700000047684" x="1793.5">	&#xa0; &#xa0; &#xa0; &#xa0; if((nums[i]%2!=0)){ // 寻找奇数 交换位置</text><text id="kity_text_865" text-rendering="inherit" font-size="12" dy=".8em" y="8552.700000047684" x="1793.5">	&#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0;int temp=nums[i];</text><text id="kity_text_866" text-rendering="inherit" font-size="12" dy=".8em" y="8570.700000047684" x="1793.5">	&#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; nums[i]=nums[j];</text><text id="kity_text_867" text-rendering="inherit" font-size="12" dy=".8em" y="8588.700000047684" x="1793.5">	&#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; nums[j]=temp;</text><text id="kity_text_868" text-rendering="inherit" font-size="12" dy=".8em" y="8606.700000047684" x="1793.5">	&#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; j++;</text><text id="kity_text_869" text-rendering="inherit" font-size="12" dy=".8em" y="8624.700000047684" x="1793.5">	&#xa0; &#xa0; &#xa0; &#xa0; }&#xa0; &#xa0; &#xa0; &#xa0;</text><text id="kity_text_870" text-rendering="inherit" font-size="12" dy=".8em" y="8642.700000047684" x="1793.5">	&#xa0; &#xa0; }</text><text id="kity_text_871" text-rendering="inherit" font-size="12" dy=".8em" y="8660.700000047684" x="1793.5">	&#xa0; &#xa0; return nums;</text><text id="kity_text_872" text-rendering="inherit" font-size="12" dy=".8em" y="8678.700000047684" x="1793.5">	}</text><text id="kity_text_873" text-rendering="inherit" font-size="12" dy=".8em" y="8696.700000047684" x="1793.5">}</text></g></g><g id="minder_node82"><g id="node_expander81" style="cursor: pointer;"><path id="kity_path_1923" fill="white" stroke="gray" d="M1461.5,8846.5A6,6,0,1,1,1449.5,8846.5A6,6,0,1,1,1461.5,8846.5"></path><path id="kity_path_1924" fill="none" stroke="gray" d="M1451,8846.5L1460,8846.5"></path></g><path id="node_outline82" fill="none" stroke="none" d="M1466.5,8826.5h75a5,5,0,0,1,5,5v30a5,5,0,0,1,-5,5h-75a5,5,0,0,1,-5,-5v-30a5,5,0,0,1,5,-5z"></path><g id="node_text82" fill="black"><text id="kity_text_891" text-rendering="inherit" font-size="12" dy=".8em" y="8829.700000047684" x="1471.5">283. 移动零</text><text id="kity_text_892" text-rendering="inherit" font-size="12" dy=".8em" y="8847.700000047684" x="1471.5">0去后面</text></g></g><g id="minder_node83"><g id="node_expander80" style="cursor: pointer;"><path id="kity_path_1920" fill="white" stroke="gray" d="M1586.5,8846.5A6,6,0,1,1,1574.5,8846.5A6,6,0,1,1,1586.5,8846.5"></path><path id="kity_path_1921" fill="none" stroke="gray" d="M1576,8846.5L1585,8846.5"></path></g><path id="node_outline81" fill="none" stroke="none" d="M1591.5,8745.5h222a5,5,0,0,1,5,5v192a5,5,0,0,1,-5,5h-222a5,5,0,0,1,-5,-5v-192a5,5,0,0,1,5,-5z"></path><g id="node_text81" fill="black"><text id="kity_text_879" text-rendering="inherit" font-size="12" dy=".8em" y="8748.700000047684" x="1596.5"> public void&#xa0;moveZeroes(int[]&#xa0;nums) {</text><text id="kity_text_880" text-rendering="inherit" font-size="12" dy=".8em" y="8766.700000047684" x="1596.5">	    int&#xa0;j&#xa0;= 0 ;</text><text id="kity_text_881" text-rendering="inherit" font-size="12" dy=".8em" y="8784.700000047684" x="1596.5">	    for(int&#xa0;i&#xa0;= 0;i&lt;nums.length;i++){</text><text id="kity_text_882" text-rendering="inherit" font-size="12" dy=".8em" y="8802.700000047684" x="1596.5">	        if(nums[i]!=0 ){</text><text id="kity_text_883" text-rendering="inherit" font-size="12" dy=".8em" y="8820.700000047684" x="1596.5">	            int&#xa0;temp&#xa0;=&#xa0;nums[i];</text><text id="kity_text_884" text-rendering="inherit" font-size="12" dy=".8em" y="8838.700000047684" x="1596.5">	&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;nums[i] =&#xa0;nums[j];</text><text id="kity_text_885" text-rendering="inherit" font-size="12" dy=".8em" y="8856.700000047684" x="1596.5">	&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;nums[j] =&#xa0;temp;</text><text id="kity_text_886" text-rendering="inherit" font-size="12" dy=".8em" y="8874.700000047684" x="1596.5">	&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;j&#xa0;++; </text><text id="kity_text_887" text-rendering="inherit" font-size="12" dy=".8em" y="8892.700000047684" x="1596.5">	        }</text><text id="kity_text_888" text-rendering="inherit" font-size="12" dy=".8em" y="8910.700000047684" x="1596.5">	    }</text><text id="kity_text_889" text-rendering="inherit" font-size="12" dy=".8em" y="8928.700000047684" x="1596.5">	}</text></g></g><g id="minder_node84"><g id="node_expander79" style="cursor: pointer;" display="none"><path id="kity_path_1917" fill="white" stroke="gray" d="M1858.5,8847A6,6,0,1,1,1846.5,8847A6,6,0,1,1,1858.5,8847"></path><path id="kity_path_1918" fill="none" stroke="gray"></path></g><path id="node_outline80" fill="none" stroke="none" d="M1863.5,8774.5h210a5,5,0,0,1,5,5v135a5,5,0,0,1,-5,5h-210a5,5,0,0,1,-5,-5v-135a5,5,0,0,1,5,-5z"></path><g id="node_text80" fill="black"><text id="kity_text_877" text-rendering="inherit" font-size="12" dy=".8em" y="8900.700000047684" x="1943.5">分支主题</text></g><image id="kity_image_1519" xlink:href="https://xiaoboblog-bucket.oss-cn-hangzhou.aliyuncs.com/blog/20210512195702.png" x="1868.5" y="8779.5" width="200" height="118"></image></g><g id="minder_node85"><g id="node_expander87" style="cursor: pointer;"><path id="kity_path_1941" fill="white" stroke="gray" d="M1351.5,9302.5A6,6,0,1,1,1339.5,9302.5A6,6,0,1,1,1351.5,9302.5"></path><path id="kity_path_1942" fill="none" stroke="gray" d="M1341,9302.5L1350,9302.5"></path></g><path id="node_outline88" fill="none" stroke="none" d="M1356.5,9291.5h67a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-67a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text88" fill="black"><text id="kity_text_936" text-rendering="inherit" font-size="12" dy=".8em" y="9294.700000047684" x="1361.5">求和&#xa0; 连续</text></g></g><g id="minder_node86"><g id="node_expander84" style="cursor: pointer;"><path id="kity_path_1932" fill="white" stroke="gray" d="M1468.5,9132.5A6,6,0,1,1,1456.5,9132.5A6,6,0,1,1,1468.5,9132.5"></path><path id="kity_path_1933" fill="none" stroke="gray" d="M1458,9132.5L1467,9132.5"></path></g><path id="node_outline85" fill="none" stroke="none" d="M1473.5,9121.5h200a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-200a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text85" fill="black"><text id="kity_text_914" text-rendering="inherit" font-size="12" dy=".8em" y="9124.700000047684" x="1478.5">剑指 Offer 42. 连续子数组的最大和</text></g></g><g id="minder_node87"><g id="node_expander83" style="cursor: pointer;" display="none"><path id="kity_path_1929" fill="white" stroke="gray" d="M1718.5,9132.5A6,6,0,1,1,1706.5,9132.5A6,6,0,1,1,1718.5,9132.5"></path><path id="kity_path_1930" fill="none" stroke="gray"></path></g><path id="node_outline84" fill="none" stroke="none" d="M1723.5,8977.5h236a5,5,0,0,1,5,5v300a5,5,0,0,1,-5,5h-236a5,5,0,0,1,-5,-5v-300a5,5,0,0,1,5,-5z"></path><g id="node_text84" fill="black"><text id="kity_text_896" text-rendering="inherit" font-size="12" dy=".8em" y="8980.700000047684" x="1728.5">class Solution {</text><text id="kity_text_897" text-rendering="inherit" font-size="12" dy=".8em" y="8998.700000047684" x="1728.5">	public int maxSubArray(int[] nums) {</text><text id="kity_text_898" text-rendering="inherit" font-size="12" dy=".8em" y="9016.700000047684" x="1728.5">	&#xa0; &#xa0; /**</text><text id="kity_text_899" text-rendering="inherit" font-size="12" dy=".8em" y="9034.700000047684" x="1728.5">	&#xa0; &#xa0; -2 1 -3 4</text><text id="kity_text_900" text-rendering="inherit" font-size="12" dy=".8em" y="9052.700000047684" x="1728.5">	&#xa0; &#xa0; 1. -2</text><text id="kity_text_901" text-rendering="inherit" font-size="12" dy=".8em" y="9070.700000047684" x="1728.5">	&#xa0; &#xa0; 2. -2&#xa0; &lt; -2 + 1 = 1</text><text id="kity_text_902" text-rendering="inherit" font-size="12" dy=".8em" y="9088.700000047684" x="1728.5">	&#xa0; &#xa0; 3. 1 &gt; -2+1+(-3) = 1</text><text id="kity_text_903" text-rendering="inherit" font-size="12" dy=".8em" y="9106.700000047684" x="1728.5">	&#xa0; &#xa0; 4. 1 &gt; -2+1+(-3)+4 = 1 最大的&#xa0; -2 1</text><text id="kity_text_904" text-rendering="inherit" font-size="12" dy=".8em" y="9124.700000047684" x="1728.5">	&#xa0; &#xa0; */</text><text id="kity_text_905" text-rendering="inherit" font-size="12" dy=".8em" y="9142.700000047684" x="1728.5">	&#xa0; &#xa0;int res = nums[0];</text><text id="kity_text_906" text-rendering="inherit" font-size="12" dy=".8em" y="9160.700000047684" x="1728.5">	&#xa0; &#xa0;for(int i = 1;i&lt;nums.length;i++){</text><text id="kity_text_907" text-rendering="inherit" font-size="12" dy=".8em" y="9178.700000047684" x="1728.5">	&#xa0; &#xa0; &#xa0; &#xa0;nums[i] += Math.max(nums[i-1],0);</text><text id="kity_text_908" text-rendering="inherit" font-size="12" dy=".8em" y="9196.700000047684" x="1728.5">	&#xa0; &#xa0; &#xa0; &#xa0; res = Math.max(res,nums[i]);</text><text id="kity_text_909" text-rendering="inherit" font-size="12" dy=".8em" y="9214.700000047684" x="1728.5">	&#xa0; &#xa0;}</text><text id="kity_text_910" text-rendering="inherit" font-size="12" dy=".8em" y="9232.700000047684" x="1728.5">	&#xa0; &#xa0;return res;</text><text id="kity_text_911" text-rendering="inherit" font-size="12" dy=".8em" y="9250.700000047684" x="1728.5">	}</text><text id="kity_text_912" text-rendering="inherit" font-size="12" dy=".8em" y="9268.700000047684" x="1728.5">}</text></g></g><g id="minder_node88"><g id="node_expander86" style="cursor: pointer;"><path id="kity_path_1938" fill="white" stroke="gray" d="M1468.5,9472.5A6,6,0,1,1,1456.5,9472.5A6,6,0,1,1,1468.5,9472.5"></path><path id="kity_path_1939" fill="none" stroke="gray" d="M1458,9472.5L1467,9472.5"></path></g><path id="node_outline87" fill="none" stroke="none" d="M1473.5,9461.5h177a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-177a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text87" fill="black"><text id="kity_text_934" text-rendering="inherit" font-size="12" dy=".8em" y="9464.700000047684" x="1478.5">剑指 Offer 61. 扑克牌中的顺子</text></g></g><g id="minder_node89"><g id="node_expander85" style="cursor: pointer;" display="none"><path id="kity_path_1935" fill="white" stroke="gray" d="M1695.5,9472.5A6,6,0,1,1,1683.5,9472.5A6,6,0,1,1,1695.5,9472.5"></path><path id="kity_path_1936" fill="none" stroke="gray"></path></g><path id="node_outline86" fill="none" stroke="none" d="M1700.5,9317.5h242a5,5,0,0,1,5,5v300a5,5,0,0,1,-5,5h-242a5,5,0,0,1,-5,-5v-300a5,5,0,0,1,5,-5z"></path><g id="node_text86" fill="black"><text id="kity_text_916" text-rendering="inherit" font-size="12" dy=".8em" y="9320.700000047684" x="1705.5">class&#xa0;Solution&#xa0;{</text><text id="kity_text_917" text-rendering="inherit" font-size="12" dy=".8em" y="9338.700000047684" x="1705.5">	public boolean&#xa0;isStraight(int[]&#xa0;nums) {</text><text id="kity_text_918" text-rendering="inherit" font-size="12" dy=".8em" y="9356.700000047684" x="1705.5">	    /**</text><text id="kity_text_919" text-rendering="inherit" font-size="12" dy=".8em" y="9374.700000047684" x="1705.5">	&#xa0;&#xa0;&#xa0;&#xa0;排序+遍历，</text><text id="kity_text_920" text-rendering="inherit" font-size="12" dy=".8em" y="9392.700000047684" x="1705.5">	&#xa0;&#xa0;&#xa0;&#xa0;0&#xa0;0&#xa0;1&#xa0;3&#xa0;4&#xa0;&#xa0;=&gt;&#xa0;1&#xa0;2&#xa0;3&#xa0;4&#xa0;5&#xa0;</text><text id="kity_text_921" text-rendering="inherit" font-size="12" dy=".8em" y="9410.700000047684" x="1705.5">	&#xa0;&#xa0;&#xa0;&#xa0;4-nums[2]&#xa0;=&#xa0;3&#xa0;&lt;5&#xa0;</text><text id="kity_text_922" text-rendering="inherit" font-size="12" dy=".8em" y="9428.700000047684" x="1705.5">	&#xa0;&#xa0;&#xa0;&#xa0;*/</text><text id="kity_text_923" text-rendering="inherit" font-size="12" dy=".8em" y="9446.700000047684" x="1705.5">	    int&#xa0;joker&#xa0;= 0;</text><text id="kity_text_924" text-rendering="inherit" font-size="12" dy=".8em" y="9464.700000047684" x="1705.5">	&#xa0;&#xa0;&#xa0;&#xa0;Arrays.sort(nums);</text><text id="kity_text_925" text-rendering="inherit" font-size="12" dy=".8em" y="9482.700000047684" x="1705.5">	    for(int&#xa0;i&#xa0;= 0;i&lt;4;i++){</text><text id="kity_text_926" text-rendering="inherit" font-size="12" dy=".8em" y="9500.700000047684" x="1705.5">	           if(nums[i]==0)&#xa0;joker&#xa0;++;</text><text id="kity_text_927" text-rendering="inherit" font-size="12" dy=".8em" y="9518.700000047684" x="1705.5">	           else if(nums[i]==nums[i+1]) return false; </text><text id="kity_text_928" text-rendering="inherit" font-size="12" dy=".8em" y="9536.700000047684" x="1705.5">	    }</text><text id="kity_text_929" text-rendering="inherit" font-size="12" dy=".8em" y="9554.700000047684" x="1705.5">	    int&#xa0;min&#xa0;=&#xa0;nums[joker];</text><text id="kity_text_930" text-rendering="inherit" font-size="12" dy=".8em" y="9572.700000047684" x="1705.5">	    return&#xa0;nums[4]-min&lt;5;</text><text id="kity_text_931" text-rendering="inherit" font-size="12" dy=".8em" y="9590.700000047684" x="1705.5">	}</text><text id="kity_text_932" text-rendering="inherit" font-size="12" dy=".8em" y="9608.700000047684" x="1705.5">}</text></g></g><g id="minder_node90"><g id="node_expander99" style="cursor: pointer;"><path id="kity_path_1977" fill="white" stroke="gray" d="M1351.5,10265.5A6,6,0,1,1,1339.5,10265.5A6,6,0,1,1,1351.5,10265.5"></path><path id="kity_path_1978" fill="none" stroke="gray" d="M1341,10265.5L1350,10265.5"></path></g><path id="node_outline100" fill="none" stroke="none" d="M1356.5,10254.5h139a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-139a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text100" fill="black"><text id="kity_text_1024" text-rendering="inherit" font-size="12" dy=".8em" y="10257.700000047684" x="1361.5">最大最小寻找&#xa0; 二分查找</text></g></g><g id="minder_node91"><g id="node_expander89" style="cursor: pointer;"><path id="kity_path_1947" fill="white" stroke="gray" d="M1540.5,9794.5A6,6,0,1,1,1528.5,9794.5A6,6,0,1,1,1540.5,9794.5"></path><path id="kity_path_1948" fill="none" stroke="gray" d="M1530,9794.5L1539,9794.5"></path></g><path id="node_outline90" fill="none" stroke="none" d="M1545.5,9765.5h201a5,5,0,0,1,5,5v48a5,5,0,0,1,-5,5h-201a5,5,0,0,1,-5,-5v-48a5,5,0,0,1,5,-5z"></path><g id="node_text90" fill="black"><text id="kity_text_954" text-rendering="inherit" font-size="12" dy=".8em" y="9768.700000047684" x="1550.5">剑指 Offer 11. 旋转数组的最小数字</text><text id="kity_text_955" text-rendering="inherit" font-size="12" dy=".8em" y="9786.700000047684" x="1550.5">输入：[3,4,5,1,2]</text><text id="kity_text_956" text-rendering="inherit" font-size="12" dy=".8em" y="9804.700000047684" x="1550.5">输出：1</text></g></g><g id="minder_node92"><g id="node_expander88" style="cursor: pointer;" display="none"><path id="kity_path_1944" fill="white" stroke="gray" d="M1791.5,9794.5A6,6,0,1,1,1779.5,9794.5A6,6,0,1,1,1791.5,9794.5"></path><path id="kity_path_1945" fill="none" stroke="gray"></path></g><path id="node_outline89" fill="none" stroke="none" d="M1796.5,9657.5h327a5,5,0,0,1,5,5v264a5,5,0,0,1,-5,5h-327a5,5,0,0,1,-5,-5v-264a5,5,0,0,1,5,-5z"></path><g id="node_text89" fill="black"><text id="kity_text_938" text-rendering="inherit" font-size="12" dy=".8em" y="9660.700000047684" x="1801.5">class Solution {</text><text id="kity_text_939" text-rendering="inherit" font-size="12" dy=".8em" y="9678.700000047684" x="1801.5">	public int minArray(int[] numbers) {</text><text id="kity_text_940" text-rendering="inherit" font-size="12" dy=".8em" y="9696.700000047684" x="1801.5">	&#xa0; &#xa0; /**</text><text id="kity_text_941" text-rendering="inherit" font-size="12" dy=".8em" y="9714.700000047684" x="1801.5">	&#xa0; &#xa0; 遍历一边数组，或者二分查找，</text><text id="kity_text_942" text-rendering="inherit" font-size="12" dy=".8em" y="9732.700000047684" x="1801.5">	&#xa0; &#xa0; */</text><text id="kity_text_943" text-rendering="inherit" font-size="12" dy=".8em" y="9750.700000047684" x="1801.5">	&#xa0; &#xa0; int left = 0,rigth= numbers.length -1;</text><text id="kity_text_944" text-rendering="inherit" font-size="12" dy=".8em" y="9768.700000047684" x="1801.5">	&#xa0; &#xa0; while(left&lt;rigth){</text><text id="kity_text_945" text-rendering="inherit" font-size="12" dy=".8em" y="9786.700000047684" x="1801.5">	&#xa0; &#xa0; &#xa0; &#xa0; int mid = left+(rigth-left)/2;</text><text id="kity_text_946" text-rendering="inherit" font-size="12" dy=".8em" y="9804.700000047684" x="1801.5">	&#xa0; &#xa0; &#xa0; &#xa0; if(numbers[mid]&gt;numbers[rigth]) left = mid+1;</text><text id="kity_text_947" text-rendering="inherit" font-size="12" dy=".8em" y="9822.700000047684" x="1801.5">	&#xa0; &#xa0; &#xa0; &#xa0; else if (numbers[mid]&lt;numbers[rigth]) rigth= mid;</text><text id="kity_text_948" text-rendering="inherit" font-size="12" dy=".8em" y="9840.700000047684" x="1801.5">	&#xa0; &#xa0; &#xa0; &#xa0; else&#xa0; rigth -- ;</text><text id="kity_text_949" text-rendering="inherit" font-size="12" dy=".8em" y="9858.700000047684" x="1801.5">	&#xa0; &#xa0; }</text><text id="kity_text_950" text-rendering="inherit" font-size="12" dy=".8em" y="9876.700000047684" x="1801.5">	&#xa0; &#xa0; return numbers[left];</text><text id="kity_text_951" text-rendering="inherit" font-size="12" dy=".8em" y="9894.700000047684" x="1801.5">	}</text><text id="kity_text_952" text-rendering="inherit" font-size="12" dy=".8em" y="9912.700000047684" x="1801.5">}</text></g></g><g id="minder_node93"><g id="node_expander91" style="cursor: pointer;"><path id="kity_path_1953" fill="white" stroke="gray" d="M1540.5,10062.5A6,6,0,1,1,1528.5,10062.5A6,6,0,1,1,1540.5,10062.5"></path><path id="kity_path_1954" fill="none" stroke="gray" d="M1530,10062.5L1539,10062.5"></path></g><path id="node_outline92" fill="none" stroke="none" d="M1545.5,10051.5h223a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-223a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text92" fill="black"><text id="kity_text_970" text-rendering="inherit" font-size="12" dy=".8em" y="10054.700000047684" x="1550.5">剑指 Offer 53 - II. 0～n-1中缺失的数字</text></g></g><g id="minder_node94"><g id="node_expander90" style="cursor: pointer;" display="none"><path id="kity_path_1950" fill="white" stroke="gray" d="M1813.5,10062.5A6,6,0,1,1,1801.5,10062.5A6,6,0,1,1,1813.5,10062.5"></path><path id="kity_path_1951" fill="none" stroke="gray"></path></g><path id="node_outline91" fill="none" stroke="none" d="M1818.5,9961.5h232a5,5,0,0,1,5,5v192a5,5,0,0,1,-5,5h-232a5,5,0,0,1,-5,-5v-192a5,5,0,0,1,5,-5z"></path><g id="node_text91" fill="black"><text id="kity_text_958" text-rendering="inherit" font-size="12" dy=".8em" y="9964.700000047684" x="1823.5">class Solution {</text><text id="kity_text_959" text-rendering="inherit" font-size="12" dy=".8em" y="9982.700000047684" x="1823.5">	public int missingNumber(int[] nums) {</text><text id="kity_text_960" text-rendering="inherit" font-size="12" dy=".8em" y="10000.700000047684" x="1823.5">	        </text><text id="kity_text_961" text-rendering="inherit" font-size="12" dy=".8em" y="10018.700000047684" x="1823.5">	&#xa0; &#xa0; &#xa0; &#xa0; for(int i = 0; i&lt;nums.length;i++ ){</text><text id="kity_text_962" text-rendering="inherit" font-size="12" dy=".8em" y="10036.700000047684" x="1823.5">	&#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; if(&#xa0; i != nums[i]){</text><text id="kity_text_963" text-rendering="inherit" font-size="12" dy=".8em" y="10054.700000047684" x="1823.5">	&#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; return i;</text><text id="kity_text_964" text-rendering="inherit" font-size="12" dy=".8em" y="10072.700000047684" x="1823.5">	&#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; }</text><text id="kity_text_965" text-rendering="inherit" font-size="12" dy=".8em" y="10090.700000047684" x="1823.5">	&#xa0; &#xa0; &#xa0; &#xa0; }</text><text id="kity_text_966" text-rendering="inherit" font-size="12" dy=".8em" y="10108.700000047684" x="1823.5">	&#xa0; &#xa0; &#xa0; &#xa0; return nums.length;</text><text id="kity_text_967" text-rendering="inherit" font-size="12" dy=".8em" y="10126.700000047684" x="1823.5">	}</text><text id="kity_text_968" text-rendering="inherit" font-size="12" dy=".8em" y="10144.700000047684" x="1823.5">}</text></g></g><g id="minder_node95"><g id="node_expander93" style="cursor: pointer;"><path id="kity_path_1959" fill="white" stroke="gray" d="M1540.5,10375.5A6,6,0,1,1,1528.5,10375.5A6,6,0,1,1,1540.5,10375.5"></path><path id="kity_path_1960" fill="none" stroke="gray" d="M1530,10375.5L1539,10375.5"></path></g><path id="node_outline94" fill="none" stroke="none" d="M1545.5,10364.5h184a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-184a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text94" fill="black"><text id="kity_text_993" text-rendering="inherit" font-size="12" dy=".8em" y="10367.700000047684" x="1550.5">448. 找到所有数组中消失的数字</text></g></g><g id="minder_node96"><g id="node_expander92" style="cursor: pointer;" display="none"><path id="kity_path_1956" fill="white" stroke="gray" d="M1774.5,10375.5A6,6,0,1,1,1762.5,10375.5A6,6,0,1,1,1774.5,10375.5"></path><path id="kity_path_1957" fill="none" stroke="gray"></path></g><path id="node_outline93" fill="none" stroke="none" d="M1779.5,10193.5h406a5,5,0,0,1,5,5v354a5,5,0,0,1,-5,5h-406a5,5,0,0,1,-5,-5v-354a5,5,0,0,1,5,-5z"></path><g id="node_text93" fill="black"><text id="kity_text_972" text-rendering="inherit" font-size="12" dy=".8em" y="10196.700000047684" x="1784.5">class Solution {</text><text id="kity_text_973" text-rendering="inherit" font-size="12" dy=".8em" y="10214.700000047684" x="1784.5">	// 1 2 2 3&#xa0; =&gt; -1 -2 -2 3</text><text id="kity_text_974" text-rendering="inherit" font-size="12" dy=".8em" y="10232.700000047684" x="1784.5">&#xa0; &#xa0;public List&lt;Integer&gt; findDisappearedNumbers(int[] nums) {</text><text id="kity_text_975" text-rendering="inherit" font-size="12" dy=".8em" y="10250.700000047684" x="1784.5">	&#xa0; &#xa0; List&lt;Integer&gt; list = new LinkedList&lt;&gt;();</text><text id="kity_text_976" text-rendering="inherit" font-size="12" dy=".8em" y="10268.700000047684" x="1784.5">	&#xa0; &#xa0; int length = nums.length;</text><text id="kity_text_977" text-rendering="inherit" font-size="12" dy=".8em" y="10286.700000047684" x="1784.5">	&#xa0; &#xa0; for(int i=0;i&lt;length;i++){</text><text id="kity_text_978" text-rendering="inherit" font-size="12" dy=".8em" y="10304.700000047684" x="1784.5">	&#xa0; &#xa0; &#xa0; &#xa0; int cur = Math.abs(nums[i]);// 防止 明明已经是-1 再赋值一次变 +1</text><text id="kity_text_979" text-rendering="inherit" font-size="12" dy=".8em" y="10322.700000047684" x="1784.5">	&#xa0; &#xa0; &#xa0; &#xa0; int&#xa0; index =&#xa0; cur - 1; // 当前索引</text><text id="kity_text_980" text-rendering="inherit" font-size="12" dy=".8em" y="10340.700000047684" x="1784.5">	&#xa0; &#xa0; &#xa0; &#xa0; if(nums[index]&gt;0){ // 正的变负的</text><text id="kity_text_981" text-rendering="inherit" font-size="12" dy=".8em" y="10358.700000047684" x="1784.5">	&#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; nums[index] = -nums[index];</text><text id="kity_text_982" text-rendering="inherit" font-size="12" dy=".8em" y="10376.700000047684" x="1784.5">	&#xa0; &#xa0; &#xa0; &#xa0; }</text><text id="kity_text_983" text-rendering="inherit" font-size="12" dy=".8em" y="10394.700000047684" x="1784.5">	&#xa0; &#xa0; }</text><text id="kity_text_984" text-rendering="inherit" font-size="12" dy=".8em" y="10412.700000047684" x="1784.5">	&#xa0; &#xa0; for(int i = 0;i&lt;length;i++){</text><text id="kity_text_985" text-rendering="inherit" font-size="12" dy=".8em" y="10430.700000047684" x="1784.5">	&#xa0; &#xa0; &#xa0; &#xa0; if(nums[i]&gt;0){</text><text id="kity_text_986" text-rendering="inherit" font-size="12" dy=".8em" y="10448.700000047684" x="1784.5">	&#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; list.add(i+1);</text><text id="kity_text_987" text-rendering="inherit" font-size="12" dy=".8em" y="10466.700000047684" x="1784.5">	&#xa0; &#xa0; &#xa0; &#xa0; }</text><text id="kity_text_988" text-rendering="inherit" font-size="12" dy=".8em" y="10484.700000047684" x="1784.5">	&#xa0; &#xa0; }</text><text id="kity_text_989" text-rendering="inherit" font-size="12" dy=".8em" y="10502.700000047684" x="1784.5">	&#xa0; &#xa0; return list;</text><text id="kity_text_990" text-rendering="inherit" font-size="12" dy=".8em" y="10520.700000047684" x="1784.5">	}</text><text id="kity_text_991" text-rendering="inherit" font-size="12" dy=".8em" y="10538.700000047684" x="1784.5">}</text></g></g><g id="minder_node97"><g id="node_expander98" style="cursor: pointer;"><path id="kity_path_1974" fill="white" stroke="gray" d="M1540.5,10754.5A6,6,0,1,1,1528.5,10754.5A6,6,0,1,1,1540.5,10754.5"></path><path id="kity_path_1975" fill="none" stroke="gray" d="M1530,10754.5L1539,10754.5"></path></g><path id="node_outline99" fill="none" stroke="none" d="M1545.5,10743.5h261a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-261a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text99" fill="black"><text id="kity_text_1022" text-rendering="inherit" font-size="12" dy=".8em" y="10746.700000047684" x="1550.5">剑指 Offer 39. 数组中出现次数超过一半的数字</text></g></g><g id="minder_node98"><g id="node_expander95" style="cursor: pointer;"><path id="kity_path_1965" fill="white" stroke="gray" d="M1851.5,10643.5A6,6,0,1,1,1839.5,10643.5A6,6,0,1,1,1851.5,10643.5"></path><path id="kity_path_1966" fill="none" stroke="gray" d="M1841,10643.5L1850,10643.5"></path></g><path id="node_outline96" fill="none" stroke="none" d="M1856.5,10632.5h67a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-67a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text96" fill="black"><text id="kity_text_1002" text-rendering="inherit" font-size="12" dy=".8em" y="10635.700000047684" x="1861.5">方法1排序</text></g></g><g id="minder_node99"><g id="node_expander94" style="cursor: pointer;" display="none"><path id="kity_path_1962" fill="white" stroke="gray" d="M1968.5,10643.5A6,6,0,1,1,1956.5,10643.5A6,6,0,1,1,1968.5,10643.5"></path><path id="kity_path_1963" fill="none" stroke="gray"></path></g><path id="node_outline95" fill="none" stroke="none" d="M1973.5,10587.5h235a5,5,0,0,1,5,5v102a5,5,0,0,1,-5,5h-235a5,5,0,0,1,-5,-5v-102a5,5,0,0,1,5,-5z"></path><g id="node_text95" fill="black"><text id="kity_text_995" text-rendering="inherit" font-size="12" dy=".8em" y="10590.700000047684" x="1978.5">class&#xa0;Solution&#xa0;{</text><text id="kity_text_996" text-rendering="inherit" font-size="12" dy=".8em" y="10608.700000047684" x="1978.5">	public int&#xa0;majorityElement(int[]&#xa0;nums) {</text><text id="kity_text_997" text-rendering="inherit" font-size="12" dy=".8em" y="10626.700000047684" x="1978.5">	&#xa0;&#xa0;&#xa0;&#xa0;Arrays.sort(nums);</text><text id="kity_text_998" text-rendering="inherit" font-size="12" dy=".8em" y="10644.700000047684" x="1978.5">	    return&#xa0;nums[(nums.length-1)/2];</text><text id="kity_text_999" text-rendering="inherit" font-size="12" dy=".8em" y="10662.700000047684" x="1978.5">	}</text><text id="kity_text_1000" text-rendering="inherit" font-size="12" dy=".8em" y="10680.700000047684" x="1978.5">}</text></g></g><g id="minder_node100"><g id="node_expander97" style="cursor: pointer;"><path id="kity_path_1971" fill="white" stroke="gray" d="M1851.5,10866.5A6,6,0,1,1,1839.5,10866.5A6,6,0,1,1,1851.5,10866.5"></path><path id="kity_path_1972" fill="none" stroke="gray" d="M1841,10866.5L1850,10866.5"></path></g><path id="node_outline98" fill="none" stroke="none" d="M1856.5,10855.5h71a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-71a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text98" fill="black"><text id="kity_text_1020" text-rendering="inherit" font-size="12" dy=".8em" y="10858.700000047684" x="1861.5">方法2 投票</text></g></g><g id="minder_node101"><g id="node_expander96" style="cursor: pointer;" display="none"><path id="kity_path_1968" fill="white" stroke="gray" d="M1972.5,10866.5A6,6,0,1,1,1960.5,10866.5A6,6,0,1,1,1972.5,10866.5"></path><path id="kity_path_1969" fill="none" stroke="gray"></path></g><path id="node_outline97" fill="none" stroke="none" d="M1977.5,10729.5h235a5,5,0,0,1,5,5v264a5,5,0,0,1,-5,5h-235a5,5,0,0,1,-5,-5v-264a5,5,0,0,1,5,-5z"></path><g id="node_text97" fill="black"><text id="kity_text_1004" text-rendering="inherit" font-size="12" dy=".8em" y="10732.700000047684" x="1982.5">class Solution {</text><text id="kity_text_1005" text-rendering="inherit" font-size="12" dy=".8em" y="10750.700000047684" x="1982.5">	public int majorityElement(int[] nums) {</text><text id="kity_text_1006" text-rendering="inherit" font-size="12" dy=".8em" y="10768.700000047684" x="1982.5">	&#xa0; &#xa0; int res = 0;</text><text id="kity_text_1007" text-rendering="inherit" font-size="12" dy=".8em" y="10786.700000047684" x="1982.5">	&#xa0; &#xa0; int count = 0;</text><text id="kity_text_1008" text-rendering="inherit" font-size="12" dy=".8em" y="10804.700000047684" x="1982.5">	&#xa0; &#xa0; for(int i:nums){</text><text id="kity_text_1009" text-rendering="inherit" font-size="12" dy=".8em" y="10822.700000047684" x="1982.5">	&#xa0; &#xa0; &#xa0; &#xa0; if(count==0) res = i;&#xa0;</text><text id="kity_text_1010" text-rendering="inherit" font-size="12" dy=".8em" y="10840.700000047684" x="1982.5">	&#xa0; &#xa0; &#xa0; &#xa0; if(i == res ) {</text><text id="kity_text_1011" text-rendering="inherit" font-size="12" dy=".8em" y="10858.700000047684" x="1982.5">	        	count++;</text><text id="kity_text_1012" text-rendering="inherit" font-size="12" dy=".8em" y="10876.700000047684" x="1982.5">	&#xa0; &#xa0; &#xa0; &#xa0; }else{</text><text id="kity_text_1013" text-rendering="inherit" font-size="12" dy=".8em" y="10894.700000047684" x="1982.5">	&#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; count--;</text><text id="kity_text_1014" text-rendering="inherit" font-size="12" dy=".8em" y="10912.700000047684" x="1982.5">	&#xa0; &#xa0; &#xa0; &#xa0; }</text><text id="kity_text_1015" text-rendering="inherit" font-size="12" dy=".8em" y="10930.700000047684" x="1982.5">	&#xa0; &#xa0; }</text><text id="kity_text_1016" text-rendering="inherit" font-size="12" dy=".8em" y="10948.700000047684" x="1982.5">	&#xa0; &#xa0; return res;</text><text id="kity_text_1017" text-rendering="inherit" font-size="12" dy=".8em" y="10966.700000047684" x="1982.5">	}</text><text id="kity_text_1018" text-rendering="inherit" font-size="12" dy=".8em" y="10984.700000047684" x="1982.5">}</text></g></g><g id="minder_node102"><g id="node_expander104" style="cursor: pointer;"><path id="kity_path_1992" fill="white" stroke="gray" d="M1351.5,11430.5A6,6,0,1,1,1339.5,11430.5A6,6,0,1,1,1351.5,11430.5"></path><path id="kity_path_1993" fill="none" stroke="gray" d="M1341,11430.5L1350,11430.5"></path></g><path id="node_outline105" fill="none" stroke="none" d="M1356.5,11419.5h36a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-36a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text105" fill="black"><text id="kity_text_1082" text-rendering="inherit" font-size="12" dy=".8em" y="11422.700000047684" x="1361.5">实现</text></g></g><g id="minder_node103"><g id="node_expander101" style="cursor: pointer;"><path id="kity_path_1983" fill="white" stroke="gray" d="M1437.5,11188.5A6,6,0,1,1,1425.5,11188.5A6,6,0,1,1,1437.5,11188.5"></path><path id="kity_path_1984" fill="none" stroke="gray" d="M1427,11188.5L1436,11188.5"></path></g><path id="node_outline102" fill="none" stroke="none" d="M1442.5,11177.5h188a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-188a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text102" fill="black"><text id="kity_text_1044" text-rendering="inherit" font-size="12" dy=".8em" y="11180.700000047684" x="1447.5">剑指 Offer 09. 用两个栈实现队列</text></g></g><g id="minder_node104"><g id="node_expander100" style="cursor: pointer;" display="none"><path id="kity_path_1980" fill="white" stroke="gray" d="M1675.5,11188.5A6,6,0,1,1,1663.5,11188.5A6,6,0,1,1,1675.5,11188.5"></path><path id="kity_path_1981" fill="none" stroke="gray"></path></g><path id="node_outline101" fill="none" stroke="none" d="M1680.5,11033.5h207a5,5,0,0,1,5,5v300a5,5,0,0,1,-5,5h-207a5,5,0,0,1,-5,-5v-300a5,5,0,0,1,5,-5z"></path><g id="node_text101" fill="black"><text id="kity_text_1026" text-rendering="inherit" font-size="12" dy=".8em" y="11036.700000047684" x="1685.5">class CQueue {</text><text id="kity_text_1027" text-rendering="inherit" font-size="12" dy=".8em" y="11054.700000047684" x="1685.5">	LinkedList&lt;Integer&gt; a;</text><text id="kity_text_1028" text-rendering="inherit" font-size="12" dy=".8em" y="11072.700000047684" x="1685.5">	LinkedList&lt;Integer&gt; b;</text><text id="kity_text_1029" text-rendering="inherit" font-size="12" dy=".8em" y="11090.700000047684" x="1685.5">	public CQueue() {</text><text id="kity_text_1030" text-rendering="inherit" font-size="12" dy=".8em" y="11108.700000047684" x="1685.5">	&#xa0; &#xa0; a = new LinkedList&lt;&gt;();</text><text id="kity_text_1031" text-rendering="inherit" font-size="12" dy=".8em" y="11126.700000047684" x="1685.5">	&#xa0; &#xa0; b = new LinkedList&lt;&gt;();</text><text id="kity_text_1032" text-rendering="inherit" font-size="12" dy=".8em" y="11144.700000047684" x="1685.5">	}</text><text id="kity_text_1033" text-rendering="inherit" font-size="12" dy=".8em" y="11162.700000047684" x="1685.5">	</text><text id="kity_text_1034" text-rendering="inherit" font-size="12" dy=".8em" y="11180.700000047684" x="1685.5">	public void appendTail(int value) {</text><text id="kity_text_1035" text-rendering="inherit" font-size="12" dy=".8em" y="11198.700000047684" x="1685.5">	&#xa0; &#xa0; a.addLast(value);</text><text id="kity_text_1036" text-rendering="inherit" font-size="12" dy=".8em" y="11216.700000047684" x="1685.5">	}</text><text id="kity_text_1037" text-rendering="inherit" font-size="12" dy=".8em" y="11234.700000047684" x="1685.5">	</text><text id="kity_text_1038" text-rendering="inherit" font-size="12" dy=".8em" y="11252.700000047684" x="1685.5">	public int deleteHead() {</text><text id="kity_text_1039" text-rendering="inherit" font-size="12" dy=".8em" y="11270.700000047684" x="1685.5">	&#xa0; &#xa0; if(a.size()!=0) return a.pollFirst();</text><text id="kity_text_1040" text-rendering="inherit" font-size="12" dy=".8em" y="11288.700000047684" x="1685.5">	&#xa0; &#xa0; return -1;</text><text id="kity_text_1041" text-rendering="inherit" font-size="12" dy=".8em" y="11306.700000047684" x="1685.5">	}</text><text id="kity_text_1042" text-rendering="inherit" font-size="12" dy=".8em" y="11324.700000047684" x="1685.5">}</text></g></g><g id="minder_node105"><g id="node_expander103" style="cursor: pointer;"><path id="kity_path_1989" fill="white" stroke="gray" d="M1437.5,11672.5A6,6,0,1,1,1425.5,11672.5A6,6,0,1,1,1437.5,11672.5"></path><path id="kity_path_1990" fill="none" stroke="gray" d="M1427,11672.5L1436,11672.5"></path></g><path id="node_outline104" fill="none" stroke="none" d="M1442.5,11661.5h187a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-187a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text104" fill="black"><text id="kity_text_1080" text-rendering="inherit" font-size="12" dy=".8em" y="11664.700000047684" x="1447.5">剑指 Offer 30. 包含min函数的栈</text></g></g><g id="minder_node106"><g id="node_expander102" style="cursor: pointer;" display="none"><path id="kity_path_1986" fill="white" stroke="gray" d="M1674.5,11672.5A6,6,0,1,1,1662.5,11672.5A6,6,0,1,1,1674.5,11672.5"></path><path id="kity_path_1987" fill="none" stroke="gray"></path></g><path id="node_outline103" fill="none" stroke="none" d="M1679.5,11373.5h238a5,5,0,0,1,5,5v588a5,5,0,0,1,-5,5h-238a5,5,0,0,1,-5,-5v-588a5,5,0,0,1,5,-5z"></path><g id="node_text103" fill="black"><text id="kity_text_1046" text-rendering="inherit" font-size="12" dy=".8em" y="11376.700000047684" x="1684.5">class MinStack {</text><text id="kity_text_1047" text-rendering="inherit" font-size="12" dy=".8em" y="11394.700000047684" x="1684.5">	Stack&lt;Integer&gt; a;</text><text id="kity_text_1048" text-rendering="inherit" font-size="12" dy=".8em" y="11412.700000047684" x="1684.5">	Stack&lt;Integer&gt; b;</text><text id="kity_text_1049" text-rendering="inherit" font-size="12" dy=".8em" y="11430.700000047684" x="1684.5"></text><text id="kity_text_1050" text-rendering="inherit" font-size="12" dy=".8em" y="11448.700000047684" x="1684.5"></text><text id="kity_text_1051" text-rendering="inherit" font-size="12" dy=".8em" y="11466.700000047684" x="1684.5">	/** initialize your data structure here. */</text><text id="kity_text_1052" text-rendering="inherit" font-size="12" dy=".8em" y="11484.700000047684" x="1684.5">	public MinStack() {</text><text id="kity_text_1053" text-rendering="inherit" font-size="12" dy=".8em" y="11502.700000047684" x="1684.5">	&#xa0; &#xa0; a = new Stack&lt;&gt;(); //&#xa0;</text><text id="kity_text_1054" text-rendering="inherit" font-size="12" dy=".8em" y="11520.700000047684" x="1684.5">	&#xa0; &#xa0; b = new Stack&lt;&gt;();// 放最小值</text><text id="kity_text_1055" text-rendering="inherit" font-size="12" dy=".8em" y="11538.700000047684" x="1684.5">	}</text><text id="kity_text_1056" text-rendering="inherit" font-size="12" dy=".8em" y="11556.700000047684" x="1684.5">	</text><text id="kity_text_1057" text-rendering="inherit" font-size="12" dy=".8em" y="11574.700000047684" x="1684.5">	public void push(int x) {</text><text id="kity_text_1058" text-rendering="inherit" font-size="12" dy=".8em" y="11592.700000047684" x="1684.5">	&#xa0; &#xa0; a.add(x);</text><text id="kity_text_1059" text-rendering="inherit" font-size="12" dy=".8em" y="11610.700000047684" x="1684.5">	&#xa0; &#xa0; if(b.empty() || x&lt;=b.peek()){</text><text id="kity_text_1060" text-rendering="inherit" font-size="12" dy=".8em" y="11628.700000047684" x="1684.5">	&#xa0; &#xa0; &#xa0; &#xa0; b.add(x);</text><text id="kity_text_1061" text-rendering="inherit" font-size="12" dy=".8em" y="11646.700000047684" x="1684.5">	&#xa0; &#xa0; }</text><text id="kity_text_1062" text-rendering="inherit" font-size="12" dy=".8em" y="11664.700000047684" x="1684.5">	}</text><text id="kity_text_1063" text-rendering="inherit" font-size="12" dy=".8em" y="11682.700000047684" x="1684.5">	</text><text id="kity_text_1064" text-rendering="inherit" font-size="12" dy=".8em" y="11700.700000047684" x="1684.5">	public void pop() {</text><text id="kity_text_1065" text-rendering="inherit" font-size="12" dy=".8em" y="11718.700000047684" x="1684.5">	&#xa0; &#xa0; if(a.pop().equals(b.peek())){</text><text id="kity_text_1066" text-rendering="inherit" font-size="12" dy=".8em" y="11736.700000047684" x="1684.5">	&#xa0; &#xa0; &#xa0; &#xa0; b.pop();</text><text id="kity_text_1067" text-rendering="inherit" font-size="12" dy=".8em" y="11754.700000047684" x="1684.5">	&#xa0; &#xa0; }</text><text id="kity_text_1068" text-rendering="inherit" font-size="12" dy=".8em" y="11772.700000047684" x="1684.5">	}</text><text id="kity_text_1069" text-rendering="inherit" font-size="12" dy=".8em" y="11790.700000047684" x="1684.5">	</text><text id="kity_text_1070" text-rendering="inherit" font-size="12" dy=".8em" y="11808.700000047684" x="1684.5">	public int top() {</text><text id="kity_text_1071" text-rendering="inherit" font-size="12" dy=".8em" y="11826.700000047684" x="1684.5">	&#xa0; return a.peek();</text><text id="kity_text_1072" text-rendering="inherit" font-size="12" dy=".8em" y="11844.700000047684" x="1684.5">	}</text><text id="kity_text_1073" text-rendering="inherit" font-size="12" dy=".8em" y="11862.700000047684" x="1684.5">	</text><text id="kity_text_1074" text-rendering="inherit" font-size="12" dy=".8em" y="11880.700000047684" x="1684.5">	public int min() {</text><text id="kity_text_1075" text-rendering="inherit" font-size="12" dy=".8em" y="11898.700000047684" x="1684.5">	&#xa0; // 直接栈顶的就是最小的</text><text id="kity_text_1076" text-rendering="inherit" font-size="12" dy=".8em" y="11916.700000047684" x="1684.5">	&#xa0; &#xa0; return b.peek();</text><text id="kity_text_1077" text-rendering="inherit" font-size="12" dy=".8em" y="11934.700000047684" x="1684.5">	}</text><text id="kity_text_1078" text-rendering="inherit" font-size="12" dy=".8em" y="11952.700000047684" x="1684.5">}</text></g></g><g id="minder_node107"><g id="node_expander107" style="cursor: pointer;"><path id="kity_path_2001" fill="white" stroke="gray" d="M1351.5,12201.5A6,6,0,1,1,1339.5,12201.5A6,6,0,1,1,1351.5,12201.5"></path><path id="kity_path_2002" fill="none" stroke="gray" d="M1341,12201.5L1350,12201.5"></path></g><path id="node_outline108" fill="none" stroke="none" d="M1356.5,12190.5h36a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-36a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text108" fill="black"><text id="kity_text_1109" text-rendering="inherit" font-size="12" dy=".8em" y="12193.700000047684" x="1361.5">交集</text></g></g><g id="minder_node108"><g id="node_expander106" style="cursor: pointer;"><path id="kity_path_1998" fill="white" stroke="gray" d="M1437.5,12201.5A6,6,0,1,1,1425.5,12201.5A6,6,0,1,1,1437.5,12201.5"></path><path id="kity_path_1999" fill="none" stroke="gray" d="M1427,12201.5L1436,12201.5"></path></g><path id="node_outline107" fill="none" stroke="none" d="M1442.5,12190.5h132a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-132a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text107" fill="black"><text id="kity_text_1107" text-rendering="inherit" font-size="12" dy=".8em" y="12193.700000047684" x="1447.5">350. 两个数组的交集 II</text></g></g><g id="minder_node109"><g id="node_expander105" style="cursor: pointer;" display="none"><path id="kity_path_1995" fill="white" stroke="gray" d="M1619.5,12201.5A6,6,0,1,1,1607.5,12201.5A6,6,0,1,1,1619.5,12201.5"></path><path id="kity_path_1996" fill="none" stroke="gray"></path></g><path id="node_outline106" fill="none" stroke="none" d="M1624.5,12001.5h283a5,5,0,0,1,5,5v390a5,5,0,0,1,-5,5h-283a5,5,0,0,1,-5,-5v-390a5,5,0,0,1,5,-5z"></path><g id="node_text106" fill="black"><text id="kity_text_1084" text-rendering="inherit" font-size="12" dy=".8em" y="12004.700000047684" x="1629.5"> class&#xa0;Solution&#xa0;{</text><text id="kity_text_1085" text-rendering="inherit" font-size="12" dy=".8em" y="12022.700000047684" x="1629.5"> public int[]&#xa0;intersect(int[]&#xa0;nums1, int[]&#xa0;nums2) {</text><text id="kity_text_1086" text-rendering="inherit" font-size="12" dy=".8em" y="12040.700000047684" x="1629.5">	&#xa0;&#xa0;&#xa0;&#xa0;Arrays.sort(nums1);</text><text id="kity_text_1087" text-rendering="inherit" font-size="12" dy=".8em" y="12058.700000047684" x="1629.5">	&#xa0;&#xa0;&#xa0;&#xa0;Arrays.sort(nums2);</text><text id="kity_text_1088" text-rendering="inherit" font-size="12" dy=".8em" y="12076.700000047684" x="1629.5">	    int&#xa0;i&#xa0;= 0,&#xa0;j&#xa0;= 0;</text><text id="kity_text_1089" text-rendering="inherit" font-size="12" dy=".8em" y="12094.700000047684" x="1629.5">	&#xa0;&#xa0;&#xa0;&#xa0;List&lt;Integer&gt;&#xa0;list&#xa0;= new&#xa0;ArrayList&lt;&gt;();</text><text id="kity_text_1090" text-rendering="inherit" font-size="12" dy=".8em" y="12112.700000047684" x="1629.5">while (i&#xa0;&lt;&#xa0;nums1.length&#xa0;&amp;&amp;&#xa0;j&#xa0;&lt;&#xa0;nums2.length) {</text><text id="kity_text_1091" text-rendering="inherit" font-size="12" dy=".8em" y="12130.700000047684" x="1629.5">if (nums1[i] ==&#xa0;nums2[j]) {</text><text id="kity_text_1092" text-rendering="inherit" font-size="12" dy=".8em" y="12148.700000047684" x="1629.5">	&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;list.add(nums1[i]);</text><text id="kity_text_1093" text-rendering="inherit" font-size="12" dy=".8em" y="12166.700000047684" x="1629.5">	&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;i++;</text><text id="kity_text_1094" text-rendering="inherit" font-size="12" dy=".8em" y="12184.700000047684" x="1629.5">	&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;j++;</text><text id="kity_text_1095" text-rendering="inherit" font-size="12" dy=".8em" y="12202.700000047684" x="1629.5">	        } else if (nums1[i] &lt;&#xa0;nums2[j])&#xa0;i++;</text><text id="kity_text_1096" text-rendering="inherit" font-size="12" dy=".8em" y="12220.700000047684" x="1629.5">	        else&#xa0;&#xa0;j++;</text><text id="kity_text_1097" text-rendering="inherit" font-size="12" dy=".8em" y="12238.700000047684" x="1629.5">	    }</text><text id="kity_text_1098" text-rendering="inherit" font-size="12" dy=".8em" y="12256.700000047684" x="1629.5">	    int[]&#xa0;res&#xa0;= new int[list.size()];</text><text id="kity_text_1099" text-rendering="inherit" font-size="12" dy=".8em" y="12274.700000047684" x="1629.5">	    int&#xa0;index&#xa0;= 0;</text><text id="kity_text_1100" text-rendering="inherit" font-size="12" dy=".8em" y="12292.700000047684" x="1629.5">	    for (int&#xa0;num&#xa0;:&#xa0;list) {</text><text id="kity_text_1101" text-rendering="inherit" font-size="12" dy=".8em" y="12310.700000047684" x="1629.5">	&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;res[index++] =&#xa0;num;</text><text id="kity_text_1102" text-rendering="inherit" font-size="12" dy=".8em" y="12328.700000047684" x="1629.5">	    }</text><text id="kity_text_1103" text-rendering="inherit" font-size="12" dy=".8em" y="12346.700000047684" x="1629.5">	    return&#xa0;res;</text><text id="kity_text_1104" text-rendering="inherit" font-size="12" dy=".8em" y="12364.700000047684" x="1629.5">	}</text><text id="kity_text_1105" text-rendering="inherit" font-size="12" dy=".8em" y="12382.700000047684" x="1629.5"> }</text></g></g><g id="minder_node110"><g id="node_expander119" style="cursor: pointer;"><path id="kity_path_2037" fill="white" stroke="gray" d="M1240.5,13283.5A6,6,0,1,1,1228.5,13283.5A6,6,0,1,1,1240.5,13283.5"></path><path id="kity_path_2038" fill="none" stroke="gray" d="M1230,13283.5L1239,13283.5"></path></g><path id="node_outline120" fill="rgb(238, 243, 246)" stroke="rgb(115, 161, 191)" d="M1244.5,13270.5h90a3,3,0,0,1,3,3v20a3,3,0,0,1,-3,3h-90a3,3,0,0,1,-3,-3v-20a3,3,0,0,1,3,-3z" stroke-width="1"></path><g id="node_text120" fill="black"><text id="kity_text_1203" text-rendering="inherit" font-size="14" dy=".8em" y="13274.400000095367" x="1261.5">动态规划</text></g></g><g id="minder_node111"><g id="node_expander110" style="cursor: pointer;"><path id="kity_path_2010" fill="white" stroke="gray" d="M1377.5,12586.5A6,6,0,1,1,1365.5,12586.5A6,6,0,1,1,1377.5,12586.5"></path><path id="kity_path_2011" fill="none" stroke="gray" d="M1367,12586.5L1376,12586.5"></path></g><path id="node_outline111" fill="none" stroke="none" d="M1382.5,12575.5h176a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-176a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text111" fill="black"><text id="kity_text_1130" text-rendering="inherit" font-size="12" dy=".8em" y="12578.700000047684" x="1387.5">剑指 Offer 10- I. 斐波那契数列</text></g></g><g id="minder_node112"><g id="node_expander109" style="cursor: pointer;" display="none"><path id="kity_path_2007" fill="white" stroke="gray" d="M1603.5,12586.5A6,6,0,1,1,1591.5,12586.5A6,6,0,1,1,1603.5,12586.5"></path><path id="kity_path_2008" fill="none" stroke="gray"></path></g><path id="node_outline110" fill="none" stroke="none" d="M1608.5,12440.5h240a5,5,0,0,1,5,5v282a5,5,0,0,1,-5,5h-240a5,5,0,0,1,-5,-5v-282a5,5,0,0,1,5,-5z"></path><g id="node_text110" fill="black"><text id="kity_text_1113" text-rendering="inherit" font-size="12" dy=".8em" y="12443.700000047684" x="1613.5">class Solution {</text><text id="kity_text_1114" text-rendering="inherit" font-size="12" dy=".8em" y="12461.700000047684" x="1613.5">	public int fib(int n) {</text><text id="kity_text_1115" text-rendering="inherit" font-size="12" dy=".8em" y="12479.700000047684" x="1613.5">	&#xa0; &#xa0; // 递归</text><text id="kity_text_1116" text-rendering="inherit" font-size="12" dy=".8em" y="12497.700000047684" x="1613.5">	&#xa0; &#xa0; // 1+1+2+3+5+8</text><text id="kity_text_1117" text-rendering="inherit" font-size="12" dy=".8em" y="12515.700000047684" x="1613.5">	&#xa0; &#xa0; // if(n&lt;=1) return n;</text><text id="kity_text_1118" text-rendering="inherit" font-size="12" dy=".8em" y="12533.700000047684" x="1613.5">	&#xa0; &#xa0; // return fib(n-2)+fib(n-1);</text><text id="kity_text_1119" text-rendering="inherit" font-size="12" dy=".8em" y="12551.700000047684" x="1613.5">	&#xa0; &#xa0; // 动态规划</text><text id="kity_text_1120" text-rendering="inherit" font-size="12" dy=".8em" y="12569.700000047684" x="1613.5">	&#xa0; &#xa0; if(n&lt;=1) return n;</text><text id="kity_text_1121" text-rendering="inherit" font-size="12" dy=".8em" y="12587.700000047684" x="1613.5">	&#xa0; &#xa0; int[] arr =new int[n+1];</text><text id="kity_text_1122" text-rendering="inherit" font-size="12" dy=".8em" y="12605.700000047684" x="1613.5">	&#xa0; &#xa0; arr[0] = 0;arr[1] = 1;</text><text id="kity_text_1123" text-rendering="inherit" font-size="12" dy=".8em" y="12623.700000047684" x="1613.5">	&#xa0; &#xa0; for(int i=2;i&lt;=n;i++){</text><text id="kity_text_1124" text-rendering="inherit" font-size="12" dy=".8em" y="12641.700000047684" x="1613.5">	&#xa0; &#xa0; &#xa0; &#xa0; arr[i]&#xa0; = (arr[i-2]+arr[i-1])00000007;</text><text id="kity_text_1125" text-rendering="inherit" font-size="12" dy=".8em" y="12659.700000047684" x="1613.5">	&#xa0; &#xa0; }</text><text id="kity_text_1126" text-rendering="inherit" font-size="12" dy=".8em" y="12677.700000047684" x="1613.5">	&#xa0; &#xa0; return arr[n];</text><text id="kity_text_1127" text-rendering="inherit" font-size="12" dy=".8em" y="12695.700000047684" x="1613.5">	}</text><text id="kity_text_1128" text-rendering="inherit" font-size="12" dy=".8em" y="12713.700000047684" x="1613.5">}</text></g></g><g id="minder_node113"><g id="node_expander112" style="cursor: pointer;"><path id="kity_path_2016" fill="white" stroke="gray" d="M1377.5,12926.5A6,6,0,1,1,1365.5,12926.5A6,6,0,1,1,1377.5,12926.5"></path><path id="kity_path_2017" fill="none" stroke="gray" d="M1367,12926.5L1376,12926.5"></path></g><path id="node_outline113" fill="none" stroke="none" d="M1382.5,12906.5h290a5,5,0,0,1,5,5v30a5,5,0,0,1,-5,5h-290a5,5,0,0,1,-5,-5v-30a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text113" fill="black"><text id="kity_text_1151" text-rendering="inherit" font-size="12" dy=".8em" y="12909.700000047684" x="1387.5">剑指 Offer 10- II. 青蛙跳台阶问题</text><text id="kity_text_1152" text-rendering="inherit" font-size="12" dy=".8em" y="12927.700000047684" x="1387.5">一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶</text></g></g><g id="minder_node114"><g id="node_expander111" style="cursor: pointer;" display="none"><path id="kity_path_2013" fill="white" stroke="gray" d="M1717.5,12926.5A6,6,0,1,1,1705.5,12926.5A6,6,0,1,1,1717.5,12926.5"></path><path id="kity_path_2014" fill="none" stroke="gray"></path></g><path id="node_outline112" fill="none" stroke="none" d="M1722.5,12762.5h174a5,5,0,0,1,5,5v318a5,5,0,0,1,-5,5h-174a5,5,0,0,1,-5,-5v-318a5,5,0,0,1,5,-5z"></path><g id="node_text112" fill="black"><text id="kity_text_1132" text-rendering="inherit" font-size="12" dy=".8em" y="12765.700000047684" x="1727.5">class Solution {</text><text id="kity_text_1133" text-rendering="inherit" font-size="12" dy=".8em" y="12783.700000047684" x="1727.5">	public int numWays(int n) {</text><text id="kity_text_1134" text-rendering="inherit" font-size="12" dy=".8em" y="12801.700000047684" x="1727.5">	&#xa0; &#xa0; /**</text><text id="kity_text_1135" text-rendering="inherit" font-size="12" dy=".8em" y="12819.700000047684" x="1727.5">	&#xa0; &#xa0; n = 1&#xa0; &#xa0; &#xa0;1&#xa0; &#xa0;&#xa0;</text><text id="kity_text_1136" text-rendering="inherit" font-size="12" dy=".8em" y="12837.700000047684" x="1727.5">	&#xa0; &#xa0; n = 2&#xa0; &#xa0; 1+1</text><text id="kity_text_1137" text-rendering="inherit" font-size="12" dy=".8em" y="12855.700000047684" x="1727.5">	&#xa0; &#xa0; n = 3&#xa0; &#xa0; 1+2 2+1&#xa0; 1+1+1</text><text id="kity_text_1138" text-rendering="inherit" font-size="12" dy=".8em" y="12873.700000047684" x="1727.5">	&#xa0; &#xa0; */</text><text id="kity_text_1139" text-rendering="inherit" font-size="12" dy=".8em" y="12891.700000047684" x="1727.5">	&#xa0; &#xa0; if(n&lt;=1) return 1;</text><text id="kity_text_1140" text-rendering="inherit" font-size="12" dy=".8em" y="12909.700000047684" x="1727.5">	&#xa0; &#xa0; int[] dp = new int[n+1];</text><text id="kity_text_1141" text-rendering="inherit" font-size="12" dy=".8em" y="12927.700000047684" x="1727.5">	&#xa0; &#xa0; dp[1] = 1;</text><text id="kity_text_1142" text-rendering="inherit" font-size="12" dy=".8em" y="12945.700000047684" x="1727.5">	&#xa0; &#xa0; dp[2] = 2;</text><text id="kity_text_1143" text-rendering="inherit" font-size="12" dy=".8em" y="12963.700000047684" x="1727.5">	&#xa0; &#xa0; for(int i =3;i&lt;=n;i++){</text><text id="kity_text_1144" text-rendering="inherit" font-size="12" dy=".8em" y="12981.700000047684" x="1727.5">	&#xa0; &#xa0; &#xa0; &#xa0; dp[i] = dp[i-1] +dp[i-2];</text><text id="kity_text_1145" text-rendering="inherit" font-size="12" dy=".8em" y="12999.700000047684" x="1727.5">	&#xa0; &#xa0; &#xa0; &#xa0; dp[i] =&#xa0; dp[i]00000007;</text><text id="kity_text_1146" text-rendering="inherit" font-size="12" dy=".8em" y="13017.700000047684" x="1727.5">	&#xa0; &#xa0; }</text><text id="kity_text_1147" text-rendering="inherit" font-size="12" dy=".8em" y="13035.700000047684" x="1727.5">	&#xa0; &#xa0; return dp[n];</text><text id="kity_text_1148" text-rendering="inherit" font-size="12" dy=".8em" y="13053.700000047684" x="1727.5">	}</text><text id="kity_text_1149" text-rendering="inherit" font-size="12" dy=".8em" y="13071.700000047684" x="1727.5">}</text></g></g><g id="minder_node115"><g id="node_expander114" style="cursor: pointer;"><path id="kity_path_2022" fill="white" stroke="gray" d="M1377.5,13248.5A6,6,0,1,1,1365.5,13248.5A6,6,0,1,1,1377.5,13248.5"></path><path id="kity_path_2023" fill="none" stroke="gray" d="M1367,13248.5L1376,13248.5"></path></g><path id="node_outline115" fill="none" stroke="none" d="M1382.5,13219.5h147a5,5,0,0,1,5,5v48a5,5,0,0,1,-5,5h-147a5,5,0,0,1,-5,-5v-48a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text115" fill="black"><text id="kity_text_1169" text-rendering="inherit" font-size="12" dy=".8em" y="13222.700000047684" x="1387.5">121. 买卖股票的最佳时机</text><text id="kity_text_1170" text-rendering="inherit" font-size="12" dy=".8em" y="13240.700000047684" x="1387.5">输入：[7,1,5,3,6,4]</text><text id="kity_text_1171" text-rendering="inherit" font-size="12" dy=".8em" y="13258.700000047684" x="1387.5">输出：5</text></g></g><g id="minder_node116"><g id="node_expander113" style="cursor: pointer;" display="none"><path id="kity_path_2019" fill="white" stroke="gray" d="M1574.5,13248.5A6,6,0,1,1,1562.5,13248.5A6,6,0,1,1,1574.5,13248.5"></path><path id="kity_path_2020" fill="none" stroke="gray"></path></g><path id="node_outline114" fill="none" stroke="none" d="M1579.5,13120.5h286a5,5,0,0,1,5,5v246a5,5,0,0,1,-5,5h-286a5,5,0,0,1,-5,-5v-246a5,5,0,0,1,5,-5z"></path><g id="node_text114" fill="black"><text id="kity_text_1154" text-rendering="inherit" font-size="12" dy=".8em" y="13123.700000047684" x="1584.5">class Solution {</text><text id="kity_text_1155" text-rendering="inherit" font-size="12" dy=".8em" y="13141.700000047684" x="1584.5">	public int maxProfit(int[] prices) {</text><text id="kity_text_1156" text-rendering="inherit" font-size="12" dy=".8em" y="13159.700000047684" x="1584.5">	&#xa0; &#xa0; if(prices.length==0){</text><text id="kity_text_1157" text-rendering="inherit" font-size="12" dy=".8em" y="13177.700000047684" x="1584.5">	&#xa0; &#xa0; &#xa0; &#xa0; return 0;</text><text id="kity_text_1158" text-rendering="inherit" font-size="12" dy=".8em" y="13195.700000047684" x="1584.5">	&#xa0; &#xa0; }</text><text id="kity_text_1159" text-rendering="inherit" font-size="12" dy=".8em" y="13213.700000047684" x="1584.5">	&#xa0; &#xa0;int maxRes = 0;</text><text id="kity_text_1160" text-rendering="inherit" font-size="12" dy=".8em" y="13231.700000047684" x="1584.5">	&#xa0; &#xa0; int min = prices[0];</text><text id="kity_text_1161" text-rendering="inherit" font-size="12" dy=".8em" y="13249.700000047684" x="1584.5">	&#xa0; &#xa0; for(int i =1;i&lt;prices.length;i++){</text><text id="kity_text_1162" text-rendering="inherit" font-size="12" dy=".8em" y="13267.700000047684" x="1584.5">	&#xa0; &#xa0; &#xa0; &#xa0; min = Math.min(min,prices[i]);</text><text id="kity_text_1163" text-rendering="inherit" font-size="12" dy=".8em" y="13285.700000047684" x="1584.5">	&#xa0; &#xa0; &#xa0; &#xa0; maxRes = Math.max(maxRes,prices[i]-min);</text><text id="kity_text_1164" text-rendering="inherit" font-size="12" dy=".8em" y="13303.700000047684" x="1584.5">	&#xa0; &#xa0; }</text><text id="kity_text_1165" text-rendering="inherit" font-size="12" dy=".8em" y="13321.700000047684" x="1584.5">	return maxRes;</text><text id="kity_text_1166" text-rendering="inherit" font-size="12" dy=".8em" y="13339.700000047684" x="1584.5">	}</text><text id="kity_text_1167" text-rendering="inherit" font-size="12" dy=".8em" y="13357.700000047684" x="1584.5">}</text></g></g><g id="minder_node117"><g id="node_expander116" style="cursor: pointer;"><path id="kity_path_2028" fill="white" stroke="gray" d="M1377.5,13730.5A6,6,0,1,1,1365.5,13730.5A6,6,0,1,1,1377.5,13730.5"></path><path id="kity_path_2029" fill="none" stroke="gray" d="M1367,13730.5L1376,13730.5"></path></g><path id="node_outline117" fill="none" stroke="none" d="M1382.5,13719.5h91a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-91a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text117" fill="black"><text id="kity_text_1186" text-rendering="inherit" font-size="12" dy=".8em" y="13722.700000047684" x="1387.5">53. 最大子序和</text></g></g><g id="minder_node118"><g id="node_expander115" style="cursor: pointer;" display="none"><path id="kity_path_2025" fill="white" stroke="gray" d="M1518.5,13730.5A6,6,0,1,1,1506.5,13730.5A6,6,0,1,1,1518.5,13730.5"></path><path id="kity_path_2026" fill="none" stroke="gray"></path></g><path id="node_outline116" fill="none" stroke="none" d="M1523.5,13620.5h268a5,5,0,0,1,5,5v210a5,5,0,0,1,-5,5h-268a5,5,0,0,1,-5,-5v-210a5,5,0,0,1,5,-5z"></path><g id="node_text116" fill="black"><text id="kity_text_1173" text-rendering="inherit" font-size="12" dy=".8em" y="13623.700000047684" x="1528.5">class Solution {</text><text id="kity_text_1174" text-rendering="inherit" font-size="12" dy=".8em" y="13641.700000047684" x="1528.5">	public int maxSubArray(int[] nums) {</text><text id="kity_text_1175" text-rendering="inherit" font-size="12" dy=".8em" y="13659.700000047684" x="1528.5">	&#xa0; &#xa0; int sum=nums[0];</text><text id="kity_text_1176" text-rendering="inherit" font-size="12" dy=".8em" y="13677.700000047684" x="1528.5">	&#xa0; &#xa0; int res=sum;</text><text id="kity_text_1177" text-rendering="inherit" font-size="12" dy=".8em" y="13695.700000047684" x="1528.5">	&#xa0; &#xa0; if(nums.length==1) return nums[0];</text><text id="kity_text_1178" text-rendering="inherit" font-size="12" dy=".8em" y="13713.700000047684" x="1528.5">	&#xa0; &#xa0; for(int i =1;i&lt;nums.length;i++){</text><text id="kity_text_1179" text-rendering="inherit" font-size="12" dy=".8em" y="13731.700000047684" x="1528.5">	&#xa0; &#xa0; &#xa0; &#xa0; sum = Math.max(nums[i],nums[i]+sum);</text><text id="kity_text_1180" text-rendering="inherit" font-size="12" dy=".8em" y="13749.700000047684" x="1528.5">	&#xa0; &#xa0; &#xa0; &#xa0; res&#xa0; =&#xa0; Math.max(res,sum);</text><text id="kity_text_1181" text-rendering="inherit" font-size="12" dy=".8em" y="13767.700000047684" x="1528.5">	&#xa0; &#xa0; }</text><text id="kity_text_1182" text-rendering="inherit" font-size="12" dy=".8em" y="13785.700000047684" x="1528.5">	&#xa0; &#xa0; return res;</text><text id="kity_text_1183" text-rendering="inherit" font-size="12" dy=".8em" y="13803.700000047684" x="1528.5">	}</text><text id="kity_text_1184" text-rendering="inherit" font-size="12" dy=".8em" y="13821.700000047684" x="1528.5">}</text></g></g><g id="minder_node119"><g id="node_expander118" style="cursor: pointer;"><path id="kity_path_2034" fill="white" stroke="gray" d="M1377.5,13980.5A6,6,0,1,1,1365.5,13980.5A6,6,0,1,1,1377.5,13980.5"></path><path id="kity_path_2035" fill="none" stroke="gray" d="M1367,13980.5L1376,13980.5"></path></g><path id="node_outline119" fill="none" stroke="none" d="M1382.5,13969.5h68a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-68a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text119" fill="black"><text id="kity_text_1201" text-rendering="inherit" font-size="12" dy=".8em" y="13972.700000047684" x="1387.5">70. 爬楼梯</text></g></g><g id="minder_node120"><g id="node_expander117" style="cursor: pointer;" display="none"><path id="kity_path_2031" fill="white" stroke="gray" d="M1495.5,13980.5A6,6,0,1,1,1483.5,13980.5A6,6,0,1,1,1495.5,13980.5"></path><path id="kity_path_2032" fill="none" stroke="gray"></path></g><path id="node_outline118" fill="none" stroke="none" d="M1500.5,13870.5h174a5,5,0,0,1,5,5v210a5,5,0,0,1,-5,5h-174a5,5,0,0,1,-5,-5v-210a5,5,0,0,1,5,-5z"></path><g id="node_text118" fill="black"><text id="kity_text_1188" text-rendering="inherit" font-size="12" dy=".8em" y="13873.700000047684" x="1505.5">//&#xa0;&#xa0;1 2 3 5 8</text><text id="kity_text_1189" text-rendering="inherit" font-size="12" dy=".8em" y="13891.700000047684" x="1505.5">class&#xa0;Solution&#xa0;{</text><text id="kity_text_1190" text-rendering="inherit" font-size="12" dy=".8em" y="13909.700000047684" x="1505.5">	public int&#xa0;climbStairs(int&#xa0;n) {</text><text id="kity_text_1191" text-rendering="inherit" font-size="12" dy=".8em" y="13927.700000047684" x="1505.5">	    int[]&#xa0;dp&#xa0;= new int[n+1];</text><text id="kity_text_1192" text-rendering="inherit" font-size="12" dy=".8em" y="13945.700000047684" x="1505.5">	    if(n&lt;=1) return 1;</text><text id="kity_text_1193" text-rendering="inherit" font-size="12" dy=".8em" y="13963.700000047684" x="1505.5">	&#xa0;&#xa0;&#xa0;&#xa0;dp[1]= 1;dp[2] = 2;</text><text id="kity_text_1194" text-rendering="inherit" font-size="12" dy=".8em" y="13981.700000047684" x="1505.5">	    for(int&#xa0;i&#xa0;= 3;i&lt;=n;i++){</text><text id="kity_text_1195" text-rendering="inherit" font-size="12" dy=".8em" y="13999.700000047684" x="1505.5">	&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;dp[i] =&#xa0;dp[i-1] +dp[i-2];</text><text id="kity_text_1196" text-rendering="inherit" font-size="12" dy=".8em" y="14017.700000047684" x="1505.5">	    }</text><text id="kity_text_1197" text-rendering="inherit" font-size="12" dy=".8em" y="14035.700000047684" x="1505.5">	    return&#xa0;dp[n];</text><text id="kity_text_1198" text-rendering="inherit" font-size="12" dy=".8em" y="14053.700000047684" x="1505.5">	}</text><text id="kity_text_1199" text-rendering="inherit" font-size="12" dy=".8em" y="14071.700000047684" x="1505.5">}</text></g></g><g id="minder_node121"><g id="node_expander148" style="cursor: pointer;"><path id="kity_path_2124" fill="white" stroke="gray" d="M1240.5,15959.5A6,6,0,1,1,1228.5,15959.5A6,6,0,1,1,1240.5,15959.5"></path><path id="kity_path_2125" fill="none" stroke="gray" d="M1230,15959.5L1239,15959.5"></path></g><path id="node_outline149" fill="rgb(238, 243, 246)" stroke="rgb(115, 161, 191)" d="M1244.5,15946.5h76a3,3,0,0,1,3,3v20a3,3,0,0,1,-3,3h-76a3,3,0,0,1,-3,-3v-20a3,3,0,0,1,3,-3z" stroke-width="1"></path><g id="node_text149" fill="black"><text id="kity_text_1416" text-rendering="inherit" font-size="14" dy=".8em" y="15950.400000095367" x="1261.5">字符串</text></g></g><g id="minder_node122"><g id="node_expander129" style="cursor: pointer;"><path id="kity_path_2067" fill="white" stroke="gray" d="M1363.5,14638.5A6,6,0,1,1,1351.5,14638.5A6,6,0,1,1,1363.5,14638.5"></path><path id="kity_path_2068" fill="none" stroke="gray" d="M1353,14638.5L1362,14638.5"></path></g><path id="node_outline130" fill="none" stroke="none" d="M1368.5,14627.5h36a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-36a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text130" fill="black"><text id="kity_text_1270" text-rendering="inherit" font-size="12" dy=".8em" y="14630.700000047684" x="1373.5">统计</text></g></g><g id="minder_node123"><g id="node_expander121" style="cursor: pointer;"><path id="kity_path_2043" fill="white" stroke="gray" d="M1449.5,14250.5A6,6,0,1,1,1437.5,14250.5A6,6,0,1,1,1449.5,14250.5"></path><path id="kity_path_2044" fill="none" stroke="gray" d="M1439,14250.5L1448,14250.5"></path></g><path id="node_outline122" fill="none" stroke="none" d="M1454.5,14239.5h225a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-225a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text122" fill="black"><text id="kity_text_1219" text-rendering="inherit" font-size="12" dy=".8em" y="14242.700000047684" x="1459.5">剑指 Offer 50. 第一个只出现一次的字符</text></g></g><g id="minder_node124"><g id="node_expander120" style="cursor: pointer;" display="none"><path id="kity_path_2040" fill="white" stroke="gray" d="M1724.5,14250.5A6,6,0,1,1,1712.5,14250.5A6,6,0,1,1,1724.5,14250.5"></path><path id="kity_path_2041" fill="none" stroke="gray"></path></g><path id="node_outline121" fill="none" stroke="none" d="M1729.5,14131.5h329a5,5,0,0,1,5,5v228a5,5,0,0,1,-5,5h-329a5,5,0,0,1,-5,-5v-228a5,5,0,0,1,5,-5z"></path><g id="node_text121" fill="black"><text id="kity_text_1205" text-rendering="inherit" font-size="12" dy=".8em" y="14134.700000047684" x="1734.5">class Solution {</text><text id="kity_text_1206" text-rendering="inherit" font-size="12" dy=".8em" y="14152.700000047684" x="1734.5">	public char firstUniqChar(String s) {</text><text id="kity_text_1207" text-rendering="inherit" font-size="12" dy=".8em" y="14170.700000047684" x="1734.5">	&#xa0; &#xa0; Map&lt;Character,Boolean&gt; map = new HashMap&lt;&gt;();</text><text id="kity_text_1208" text-rendering="inherit" font-size="12" dy=".8em" y="14188.700000047684" x="1734.5">	&#xa0; &#xa0; char[] ch = s.toCharArray();</text><text id="kity_text_1209" text-rendering="inherit" font-size="12" dy=".8em" y="14206.700000047684" x="1734.5">	&#xa0; &#xa0; for(char c : ch){</text><text id="kity_text_1210" text-rendering="inherit" font-size="12" dy=".8em" y="14224.700000047684" x="1734.5">	&#xa0; &#xa0; &#xa0; &#xa0; map.put(c,!map.containsKey(c));</text><text id="kity_text_1211" text-rendering="inherit" font-size="12" dy=".8em" y="14242.700000047684" x="1734.5">	&#xa0; &#xa0; }</text><text id="kity_text_1212" text-rendering="inherit" font-size="12" dy=".8em" y="14260.700000047684" x="1734.5">	&#xa0; &#xa0; for(char c : ch){</text><text id="kity_text_1213" text-rendering="inherit" font-size="12" dy=".8em" y="14278.700000047684" x="1734.5">	&#xa0; &#xa0; &#xa0; &#xa0; if(map.get(c)) return c;</text><text id="kity_text_1214" text-rendering="inherit" font-size="12" dy=".8em" y="14296.700000047684" x="1734.5">	&#xa0; &#xa0; }</text><text id="kity_text_1215" text-rendering="inherit" font-size="12" dy=".8em" y="14314.700000047684" x="1734.5">	&#xa0; &#xa0; return ' ';</text><text id="kity_text_1216" text-rendering="inherit" font-size="12" dy=".8em" y="14332.700000047684" x="1734.5">	}</text><text id="kity_text_1217" text-rendering="inherit" font-size="12" dy=".8em" y="14350.700000047684" x="1734.5">}</text></g></g><g id="minder_node125"><g id="node_expander126" style="cursor: pointer;"><path id="kity_path_2058" fill="white" stroke="gray" d="M1449.5,14652.5A6,6,0,1,1,1437.5,14652.5A6,6,0,1,1,1449.5,14652.5"></path><path id="kity_path_2059" fill="none" stroke="gray" d="M1439,14652.5L1448,14652.5"></path></g><path id="node_outline127" fill="none" stroke="none" d="M1454.5,14641.5h184a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-184a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text127" fill="black"><text id="kity_text_1251" text-rendering="inherit" font-size="12" dy=".8em" y="14644.700000047684" x="1459.5">剑指 Offer 15. 二进制中1的个数</text></g></g><g id="minder_node126"><g id="node_expander123" style="cursor: pointer;"><path id="kity_path_2049" fill="white" stroke="gray" d="M1683.5,14527.5A6,6,0,1,1,1671.5,14527.5A6,6,0,1,1,1683.5,14527.5"></path><path id="kity_path_2050" fill="none" stroke="gray" d="M1673,14527.5L1682,14527.5"></path></g><path id="node_outline124" fill="none" stroke="none" d="M1688.5,14516.5h42a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-42a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text124" fill="black"><text id="kity_text_1236" text-rendering="inherit" font-size="12" dy=".8em" y="14519.700000047684" x="1693.5">方法1</text></g></g><g id="minder_node127"><g id="node_expander122" style="cursor: pointer;" display="none"><path id="kity_path_2046" fill="white" stroke="gray" d="M1775.5,14527.5A6,6,0,1,1,1763.5,14527.5A6,6,0,1,1,1775.5,14527.5"></path><path id="kity_path_2047" fill="none" stroke="gray"></path></g><path id="node_outline123" fill="none" stroke="none" d="M1780.5,14399.5h315a5,5,0,0,1,5,5v246a5,5,0,0,1,-5,5h-315a5,5,0,0,1,-5,-5v-246a5,5,0,0,1,5,-5z"></path><g id="node_text123" fill="black"><text id="kity_text_1221" text-rendering="inherit" font-size="12" dy=".8em" y="14402.700000047684" x="1785.5">public class Solution {</text><text id="kity_text_1222" text-rendering="inherit" font-size="12" dy=".8em" y="14420.700000047684" x="1785.5"></text><text id="kity_text_1223" text-rendering="inherit" font-size="12" dy=".8em" y="14438.700000047684" x="1785.5">	public int hammingWeight(int n) {</text><text id="kity_text_1224" text-rendering="inherit" font-size="12" dy=".8em" y="14456.700000047684" x="1785.5">		</text><text id="kity_text_1225" text-rendering="inherit" font-size="12" dy=".8em" y="14474.700000047684" x="1785.5">	&#xa0; &#xa0; int temp = 0;</text><text id="kity_text_1226" text-rendering="inherit" font-size="12" dy=".8em" y="14492.700000047684" x="1785.5">	&#xa0; &#xa0; if(Integer.toBinaryString(n).length()&gt;32) return 0;</text><text id="kity_text_1227" text-rendering="inherit" font-size="12" dy=".8em" y="14510.700000047684" x="1785.5">	&#xa0; &#xa0; for(char c :Integer.toBinaryString(n).toCharArray()){</text><text id="kity_text_1228" text-rendering="inherit" font-size="12" dy=".8em" y="14528.700000047684" x="1785.5">	&#xa0; &#xa0; &#xa0; &#xa0; if(c == '1'){</text><text id="kity_text_1229" text-rendering="inherit" font-size="12" dy=".8em" y="14546.700000047684" x="1785.5">	&#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; temp++;</text><text id="kity_text_1230" text-rendering="inherit" font-size="12" dy=".8em" y="14564.700000047684" x="1785.5">	&#xa0; &#xa0; &#xa0; &#xa0; }</text><text id="kity_text_1231" text-rendering="inherit" font-size="12" dy=".8em" y="14582.700000047684" x="1785.5">	&#xa0; &#xa0; }</text><text id="kity_text_1232" text-rendering="inherit" font-size="12" dy=".8em" y="14600.700000047684" x="1785.5">	&#xa0; &#xa0; return temp;</text><text id="kity_text_1233" text-rendering="inherit" font-size="12" dy=".8em" y="14618.700000047684" x="1785.5">	}</text><text id="kity_text_1234" text-rendering="inherit" font-size="12" dy=".8em" y="14636.700000047684" x="1785.5">}</text></g></g><g id="minder_node128"><g id="node_expander125" style="cursor: pointer;"><path id="kity_path_2055" fill="white" stroke="gray" d="M1683.5,14777.5A6,6,0,1,1,1671.5,14777.5A6,6,0,1,1,1683.5,14777.5"></path><path id="kity_path_2056" fill="none" stroke="gray" d="M1673,14777.5L1682,14777.5"></path></g><path id="node_outline126" fill="none" stroke="none" d="M1688.5,14766.5h83a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-83a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text126" fill="black"><text id="kity_text_1249" text-rendering="inherit" font-size="12" dy=".8em" y="14769.700000047684" x="1693.5">方法2 位运算</text></g></g><g id="minder_node129"><g id="node_expander124" style="cursor: pointer;" display="none"><path id="kity_path_2052" fill="white" stroke="gray" d="M1816.5,14777.5A6,6,0,1,1,1804.5,14777.5A6,6,0,1,1,1816.5,14777.5"></path><path id="kity_path_2053" fill="none" stroke="gray"></path></g><path id="node_outline125" fill="none" stroke="none" d="M1821.5,14685.5h233a5,5,0,0,1,5,5v174a5,5,0,0,1,-5,5h-233a5,5,0,0,1,-5,-5v-174a5,5,0,0,1,5,-5z"></path><g id="node_text125" fill="black"><text id="kity_text_1238" text-rendering="inherit" font-size="12" dy=".8em" y="14688.700000047684" x="1826.5">public class&#xa0;Solution&#xa0;{</text><text id="kity_text_1239" text-rendering="inherit" font-size="12" dy=".8em" y="14706.700000047684" x="1826.5">	public int&#xa0;hammingWeight(int&#xa0;n) {</text><text id="kity_text_1240" text-rendering="inherit" font-size="12" dy=".8em" y="14724.700000047684" x="1826.5">	    int&#xa0;res&#xa0;= 0;</text><text id="kity_text_1241" text-rendering="inherit" font-size="12" dy=".8em" y="14742.700000047684" x="1826.5">	    while(n!=0){</text><text id="kity_text_1242" text-rendering="inherit" font-size="12" dy=".8em" y="14760.700000047684" x="1826.5">	&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;res&#xa0;++;</text><text id="kity_text_1243" text-rendering="inherit" font-size="12" dy=".8em" y="14778.700000047684" x="1826.5">	&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;n&#xa0;= (n-1)&amp;n; //&#xa0;110&#xa0;&amp;&#xa0;111&#xa0;=&gt;&#xa0;110</text><text id="kity_text_1244" text-rendering="inherit" font-size="12" dy=".8em" y="14796.700000047684" x="1826.5">	    }</text><text id="kity_text_1245" text-rendering="inherit" font-size="12" dy=".8em" y="14814.700000047684" x="1826.5">	    return&#xa0;res;</text><text id="kity_text_1246" text-rendering="inherit" font-size="12" dy=".8em" y="14832.700000047684" x="1826.5">	}</text><text id="kity_text_1247" text-rendering="inherit" font-size="12" dy=".8em" y="14850.700000047684" x="1826.5">}</text></g></g><g id="minder_node130"><g id="node_expander128" style="cursor: pointer;"><path id="kity_path_2064" fill="white" stroke="gray" d="M1449.5,15027.5A6,6,0,1,1,1437.5,15027.5A6,6,0,1,1,1449.5,15027.5"></path><path id="kity_path_2065" fill="none" stroke="gray" d="M1439,15027.5L1448,15027.5"></path></g><path id="node_outline129" fill="none" stroke="none" d="M1454.5,15016.5h183a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-183a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text129" fill="black"><text id="kity_text_1268" text-rendering="inherit" font-size="12" dy=".8em" y="15019.700000047684" x="1459.5">387. 字符串中的第一个唯一字符</text></g></g><g id="minder_node131"><g id="node_expander127" style="cursor: pointer;" display="none"><path id="kity_path_2061" fill="white" stroke="gray" d="M1682.5,15027.5A6,6,0,1,1,1670.5,15027.5A6,6,0,1,1,1682.5,15027.5"></path><path id="kity_path_2062" fill="none" stroke="gray"></path></g><path id="node_outline128" fill="none" stroke="none" d="M1687.5,14899.5h323a5,5,0,0,1,5,5v246a5,5,0,0,1,-5,5h-323a5,5,0,0,1,-5,-5v-246a5,5,0,0,1,5,-5z"></path><g id="node_text128" fill="black"><text id="kity_text_1253" text-rendering="inherit" font-size="12" dy=".8em" y="14902.700000047684" x="1692.5">class Solution {</text><text id="kity_text_1254" text-rendering="inherit" font-size="12" dy=".8em" y="14920.700000047684" x="1692.5">	public int firstUniqChar(String s) {</text><text id="kity_text_1255" text-rendering="inherit" font-size="12" dy=".8em" y="14938.700000047684" x="1692.5">	&#xa0; &#xa0; /**</text><text id="kity_text_1256" text-rendering="inherit" font-size="12" dy=".8em" y="14956.700000047684" x="1692.5">	&#xa0; &#xa0; map遍历一遍，key存索引，value存char</text><text id="kity_text_1257" text-rendering="inherit" font-size="12" dy=".8em" y="14974.700000047684" x="1692.5">	&#xa0; &#xa0; */</text><text id="kity_text_1258" text-rendering="inherit" font-size="12" dy=".8em" y="14992.700000047684" x="1692.5">	&#xa0; &#xa0; Map&lt;Character,Integer&gt; map = new HashMap&lt;&gt;();</text><text id="kity_text_1259" text-rendering="inherit" font-size="12" dy=".8em" y="15010.700000047684" x="1692.5">	&#xa0; &#xa0; char[] cs = s.toCharArray();</text><text id="kity_text_1260" text-rendering="inherit" font-size="12" dy=".8em" y="15028.700000047684" x="1692.5">	&#xa0; &#xa0; for(char c :cs)</text><text id="kity_text_1261" text-rendering="inherit" font-size="12" dy=".8em" y="15046.700000047684" x="1692.5">	&#xa0; &#xa0; &#xa0; &#xa0; map.put(c,map.getOrDefault(c,0)+1);</text><text id="kity_text_1262" text-rendering="inherit" font-size="12" dy=".8em" y="15064.700000047684" x="1692.5">	&#xa0; &#xa0; for(int i =0;i&lt;s.length();i++)</text><text id="kity_text_1263" text-rendering="inherit" font-size="12" dy=".8em" y="15082.700000047684" x="1692.5">	&#xa0; &#xa0; &#xa0; &#xa0; if(map.get(cs[i])== 1) return i;</text><text id="kity_text_1264" text-rendering="inherit" font-size="12" dy=".8em" y="15100.700000047684" x="1692.5">	&#xa0; &#xa0; return -1;</text><text id="kity_text_1265" text-rendering="inherit" font-size="12" dy=".8em" y="15118.700000047684" x="1692.5">	}</text><text id="kity_text_1266" text-rendering="inherit" font-size="12" dy=".8em" y="15136.700000047684" x="1692.5">}</text></g></g><g id="minder_node132"><g id="node_expander138" style="cursor: pointer;"><path id="kity_path_2094" fill="white" stroke="gray" d="M1363.5,15665.5A6,6,0,1,1,1351.5,15665.5A6,6,0,1,1,1363.5,15665.5"></path><path id="kity_path_2095" fill="none" stroke="gray" d="M1353,15665.5L1362,15665.5"></path></g><path id="node_outline139" fill="none" stroke="none" d="M1368.5,15654.5h91a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-91a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text139" fill="black"><text id="kity_text_1335" text-rendering="inherit" font-size="12" dy=".8em" y="15657.700000047684" x="1373.5">翻转 旋转 反转</text></g></g><g id="minder_node133"><g id="node_expander131" style="cursor: pointer;"><path id="kity_path_2073" fill="white" stroke="gray" d="M1504.5,15268.5A6,6,0,1,1,1492.5,15268.5A6,6,0,1,1,1504.5,15268.5"></path><path id="kity_path_2074" fill="none" stroke="gray" d="M1494,15268.5L1503,15268.5"></path></g><path id="node_outline132" fill="none" stroke="none" d="M1509.5,15257.5h181a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-181a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text132" fill="black"><text id="kity_text_1282" text-rendering="inherit" font-size="12" dy=".8em" y="15260.700000047684" x="1514.5">剑指 Offer 58 - I. 翻转单词顺序</text></g></g><g id="minder_node134"><g id="node_expander130" style="cursor: pointer;" display="none"><path id="kity_path_2070" fill="white" stroke="gray" d="M1735.5,15268.5A6,6,0,1,1,1723.5,15268.5A6,6,0,1,1,1735.5,15268.5"></path><path id="kity_path_2071" fill="none" stroke="gray"></path></g><path id="node_outline131" fill="none" stroke="none" d="M1740.5,15185.5h238a5,5,0,0,1,5,5v156a5,5,0,0,1,-5,5h-238a5,5,0,0,1,-5,-5v-156a5,5,0,0,1,5,-5z"></path><g id="node_text131" fill="black"><text id="kity_text_1272" text-rendering="inherit" font-size="12" dy=".8em" y="15188.700000047684" x="1745.5">public String reverseWords(String s) {</text><text id="kity_text_1273" text-rendering="inherit" font-size="12" dy=".8em" y="15206.700000047684" x="1745.5">  	 String[] strs = s.trim.spilt("\\s+");</text><text id="kity_text_1274" text-rendering="inherit" font-size="12" dy=".8em" y="15224.700000047684" x="1745.5">	&#xa0;StringBuilder res = new StringBuilder();</text><text id="kity_text_1275" text-rendering="inherit" font-size="12" dy=".8em" y="15242.700000047684" x="1745.5">	&#xa0;for(int i = strs.length()-1;i&gt;=0;i--){</text><text id="kity_text_1276" text-rendering="inherit" font-size="12" dy=".8em" y="15260.700000047684" x="1745.5">	    	if(strs[i]==" ") continue;</text><text id="kity_text_1277" text-rendering="inherit" font-size="12" dy=".8em" y="15278.700000047684" x="1745.5">	&#xa0; &#xa0; &#xa0;res.append(strs[i]+" ");</text><text id="kity_text_1278" text-rendering="inherit" font-size="12" dy=".8em" y="15296.700000047684" x="1745.5">	&#xa0;}</text><text id="kity_text_1279" text-rendering="inherit" font-size="12" dy=".8em" y="15314.700000047684" x="1745.5">	&#xa0;return res;</text><text id="kity_text_1280" text-rendering="inherit" font-size="12" dy=".8em" y="15332.700000047684" x="1745.5">&#xa0;}</text></g></g><g id="minder_node135"><g id="node_expander133" style="cursor: pointer;"><path id="kity_path_2079" fill="white" stroke="gray" d="M1504.5,15482.5A6,6,0,1,1,1492.5,15482.5A6,6,0,1,1,1504.5,15482.5"></path><path id="kity_path_2080" fill="none" stroke="gray" d="M1494,15482.5L1503,15482.5"></path></g><path id="node_outline134" fill="none" stroke="none" d="M1509.5,15471.5h183a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-183a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text134" fill="black"><text id="kity_text_1296" text-rendering="inherit" font-size="12" dy=".8em" y="15474.700000047684" x="1514.5">剑指 Offer 58 - II. 左旋转字符串</text></g></g><g id="minder_node136"><g id="node_expander132" style="cursor: pointer;" display="none"><path id="kity_path_2076" fill="white" stroke="gray" d="M1737.5,15482.5A6,6,0,1,1,1725.5,15482.5A6,6,0,1,1,1737.5,15482.5"></path><path id="kity_path_2077" fill="none" stroke="gray"></path></g><path id="node_outline133" fill="none" stroke="none" d="M1742.5,15381.5h279a5,5,0,0,1,5,5v192a5,5,0,0,1,-5,5h-279a5,5,0,0,1,-5,-5v-192a5,5,0,0,1,5,-5z"></path><g id="node_text133" fill="black"><text id="kity_text_1284" text-rendering="inherit" font-size="12" dy=".8em" y="15384.700000047684" x="1747.5">//方法2&#xa0;&#xa0;</text><text id="kity_text_1285" text-rendering="inherit" font-size="12" dy=".8em" y="15402.700000047684" x="1747.5">&#xa0; class Solution {</text><text id="kity_text_1286" text-rendering="inherit" font-size="12" dy=".8em" y="15420.700000047684" x="1747.5">	public String reverseLeftWords(String s, int n) {</text><text id="kity_text_1287" text-rendering="inherit" font-size="12" dy=".8em" y="15438.700000047684" x="1747.5">	&#xa0; &#xa0; StringBuilder res = new StringBuilder();</text><text id="kity_text_1288" text-rendering="inherit" font-size="12" dy=".8em" y="15456.700000047684" x="1747.5">	&#xa0; &#xa0; for(int i = n; i &lt; s.length(); i++)</text><text id="kity_text_1289" text-rendering="inherit" font-size="12" dy=".8em" y="15474.700000047684" x="1747.5">	&#xa0; &#xa0; &#xa0; &#xa0; res.append(s.charAt(i));</text><text id="kity_text_1290" text-rendering="inherit" font-size="12" dy=".8em" y="15492.700000047684" x="1747.5">	&#xa0; &#xa0; for(int i = 0; i &lt; n; i++)</text><text id="kity_text_1291" text-rendering="inherit" font-size="12" dy=".8em" y="15510.700000047684" x="1747.5">	&#xa0; &#xa0; &#xa0; &#xa0; res.append(s.charAt(i));</text><text id="kity_text_1292" text-rendering="inherit" font-size="12" dy=".8em" y="15528.700000047684" x="1747.5">	&#xa0; &#xa0; return res.toString();</text><text id="kity_text_1293" text-rendering="inherit" font-size="12" dy=".8em" y="15546.700000047684" x="1747.5">	}</text><text id="kity_text_1294" text-rendering="inherit" font-size="12" dy=".8em" y="15564.700000047684" x="1747.5">}</text></g></g><g id="minder_node137"><g id="node_expander135" style="cursor: pointer;"><path id="kity_path_2085" fill="white" stroke="gray" d="M1504.5,15759.5A6,6,0,1,1,1492.5,15759.5A6,6,0,1,1,1504.5,15759.5"></path><path id="kity_path_2086" fill="none" stroke="gray" d="M1494,15759.5L1503,15759.5"></path></g><path id="node_outline136" fill="none" stroke="none" d="M1509.5,15739.5h98a5,5,0,0,1,5,5v30a5,5,0,0,1,-5,5h-98a5,5,0,0,1,-5,-5v-30a5,5,0,0,1,5,-5z"></path><g id="node_text136" fill="black"><text id="kity_text_1315" text-rendering="inherit" font-size="12" dy=".8em" y="15742.700000047684" x="1514.5">344. 反转字符串</text><text id="kity_text_1316" text-rendering="inherit" font-size="12" dy=".8em" y="15760.700000047684" x="1514.5">原地交换</text></g></g><g id="minder_node138"><g id="node_expander134" style="cursor: pointer;" display="none"><path id="kity_path_2082" fill="white" stroke="gray" d="M1652.5,15759.5A6,6,0,1,1,1640.5,15759.5A6,6,0,1,1,1652.5,15759.5"></path><path id="kity_path_2083" fill="none" stroke="gray"></path></g><path id="node_outline135" fill="none" stroke="none" d="M1657.5,15613.5h355a5,5,0,0,1,5,5v282a5,5,0,0,1,-5,5h-355a5,5,0,0,1,-5,-5v-282a5,5,0,0,1,5,-5z"></path><g id="node_text135" fill="black"><text id="kity_text_1298" text-rendering="inherit" font-size="12" dy=".8em" y="15616.700000047684" x="1662.5">class&#xa0;Solution&#xa0;{</text><text id="kity_text_1299" text-rendering="inherit" font-size="12" dy=".8em" y="15634.700000047684" x="1662.5">	public static void&#xa0;reverseString(char[]&#xa0;s){</text><text id="kity_text_1300" text-rendering="inherit" font-size="12" dy=".8em" y="15652.700000047684" x="1662.5">//&#xa0;&#xa0;a=1&#xa0;b=2&#xa0;&#xa0;=&gt;&#xa0;a=2&#xa0;&#xa0;b=1&#xa0;&#xa0;</text><text id="kity_text_1301" text-rendering="inherit" font-size="12" dy=".8em" y="15670.700000047684" x="1662.5">//&#xa0;a=1^2=01^10&#xa0;=&#xa0;11&#xa0;=3&#xa0;&#xa0;b=01^11&#xa0;=2&#xa0;&#xa0;&#xa0;a=11^10&#xa0;=&#xa0;01=&#xa0;1&#xa0;</text><text id="kity_text_1302" text-rendering="inherit" font-size="12" dy=".8em" y="15688.700000047684" x="1662.5">//&#xa0;a&#xa0;=&#xa0;a^b&#xa0;&#xa0;b=a^b&#xa0;&#xa0;a&#xa0;=&#xa0;a^b&#xa0;&#xa0;&#xa0;a&lt;=&gt;b</text><text id="kity_text_1303" text-rendering="inherit" font-size="12" dy=".8em" y="15706.700000047684" x="1662.5">	 int&#xa0;n&#xa0;=&#xa0;s.length;</text><text id="kity_text_1304" text-rendering="inherit" font-size="12" dy=".8em" y="15724.700000047684" x="1662.5">	 int&#xa0;index&#xa0;=&#xa0;n-1;</text><text id="kity_text_1305" text-rendering="inherit" font-size="12" dy=".8em" y="15742.700000047684" x="1662.5">	    for (int&#xa0;i&#xa0;= 0;&#xa0;i&#xa0;&lt;&#xa0;n&#xa0;/ 2; ++i) {</text><text id="kity_text_1306" text-rendering="inherit" font-size="12" dy=".8em" y="15760.700000047684" x="1662.5">	        int&#xa0;j&#xa0;=&#xa0;index&#xa0;-&#xa0;i;</text><text id="kity_text_1307" text-rendering="inherit" font-size="12" dy=".8em" y="15778.700000047684" x="1662.5">	&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;s[i] ^=&#xa0;s[j];</text><text id="kity_text_1308" text-rendering="inherit" font-size="12" dy=".8em" y="15796.700000047684" x="1662.5">	&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;s[j] ^=&#xa0;s[i];</text><text id="kity_text_1309" text-rendering="inherit" font-size="12" dy=".8em" y="15814.700000047684" x="1662.5">	&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;s[i] ^=&#xa0;s[j];</text><text id="kity_text_1310" text-rendering="inherit" font-size="12" dy=".8em" y="15832.700000047684" x="1662.5">	    }</text><text id="kity_text_1311" text-rendering="inherit" font-size="12" dy=".8em" y="15850.700000047684" x="1662.5">	&#xa0;&#xa0;&#xa0;&#xa0;System.out.println(s);</text><text id="kity_text_1312" text-rendering="inherit" font-size="12" dy=".8em" y="15868.700000047684" x="1662.5">	}</text><text id="kity_text_1313" text-rendering="inherit" font-size="12" dy=".8em" y="15886.700000047684" x="1662.5">}</text></g></g><g id="minder_node139"><g id="node_expander137" style="cursor: pointer;"><path id="kity_path_2091" fill="white" stroke="gray" d="M1504.5,16063.5A6,6,0,1,1,1492.5,16063.5A6,6,0,1,1,1504.5,16063.5"></path><path id="kity_path_2092" fill="none" stroke="gray" d="M1494,16063.5L1503,16063.5"></path></g><path id="node_outline138" fill="none" stroke="none" d="M1509.5,16052.5h72a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-72a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text138" fill="black"><text id="kity_text_1333" text-rendering="inherit" font-size="12" dy=".8em" y="16055.700000047684" x="1514.5">7. 整数反转</text></g></g><g id="minder_node140"><g id="node_expander136" style="cursor: pointer;" display="none"><path id="kity_path_2088" fill="white" stroke="gray" d="M1626.5,16063.5A6,6,0,1,1,1614.5,16063.5A6,6,0,1,1,1626.5,16063.5"></path><path id="kity_path_2089" fill="none" stroke="gray"></path></g><path id="node_outline137" fill="none" stroke="none" d="M1631.5,15935.5h213a5,5,0,0,1,5,5v246a5,5,0,0,1,-5,5h-213a5,5,0,0,1,-5,-5v-246a5,5,0,0,1,5,-5z"></path><g id="node_text137" fill="black"><text id="kity_text_1318" text-rendering="inherit" font-size="12" dy=".8em" y="15938.700000047684" x="1636.5">class&#xa0;Solution&#xa0;{</text><text id="kity_text_1319" text-rendering="inherit" font-size="12" dy=".8em" y="15956.700000047684" x="1636.5">	public int&#xa0;reverse(int&#xa0;x) {</text><text id="kity_text_1320" text-rendering="inherit" font-size="12" dy=".8em" y="15974.700000047684" x="1636.5">	    //&#xa0;123&#xa0;=&#xa0;3&#xa0;&#xa0;123/10&#xa0;=&#xa0;12</text><text id="kity_text_1321" text-rendering="inherit" font-size="12" dy=".8em" y="15992.700000047684" x="1636.5">	    int&#xa0;res&#xa0;= 0,temp&#xa0;=0,flag&#xa0;= 0 ;</text><text id="kity_text_1322" text-rendering="inherit" font-size="12" dy=".8em" y="16010.700000047684" x="1636.5">	    while(x!=0){</text><text id="kity_text_1323" text-rendering="inherit" font-size="12" dy=".8em" y="16028.700000047684" x="1636.5">	&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;temp&#xa0;=&#xa0;x;</text><text id="kity_text_1324" text-rendering="inherit" font-size="12" dy=".8em" y="16046.700000047684" x="1636.5">	&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;flag&#xa0;=&#xa0;res;</text><text id="kity_text_1325" text-rendering="inherit" font-size="12" dy=".8em" y="16064.700000047684" x="1636.5">	&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;res&#xa0;=&#xa0;res*10+temp;</text><text id="kity_text_1326" text-rendering="inherit" font-size="12" dy=".8em" y="16082.700000047684" x="1636.5">	         if(res/10 !=flag) return 0;//超过int了</text><text id="kity_text_1327" text-rendering="inherit" font-size="12" dy=".8em" y="16100.700000047684" x="1636.5">	&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;x/=10;</text><text id="kity_text_1328" text-rendering="inherit" font-size="12" dy=".8em" y="16118.700000047684" x="1636.5">	    }</text><text id="kity_text_1329" text-rendering="inherit" font-size="12" dy=".8em" y="16136.700000047684" x="1636.5">	    return&#xa0;res;</text><text id="kity_text_1330" text-rendering="inherit" font-size="12" dy=".8em" y="16154.700000047684" x="1636.5">	}</text><text id="kity_text_1331" text-rendering="inherit" font-size="12" dy=".8em" y="16172.700000047684" x="1636.5">}</text></g></g><g id="minder_node141"><g id="node_expander141" style="cursor: pointer;"><path id="kity_path_2103" fill="white" stroke="gray" d="M1363.5,16492.5A6,6,0,1,1,1351.5,16492.5A6,6,0,1,1,1363.5,16492.5"></path><path id="kity_path_2104" fill="none" stroke="gray" d="M1353,16492.5L1362,16492.5"></path></g><path id="node_outline142" fill="none" stroke="none" d="M1368.5,16481.5h35a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-35a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text142" fill="black"><text id="kity_text_1370" text-rendering="inherit" font-size="12" dy=".8em" y="16484.700000047684" x="1373.5">回文</text></g></g><g id="minder_node142"><g id="node_expander140" style="cursor: pointer;"><path id="kity_path_2100" fill="white" stroke="gray" d="M1448.5,16492.5A6,6,0,1,1,1436.5,16492.5A6,6,0,1,1,1448.5,16492.5"></path><path id="kity_path_2101" fill="none" stroke="gray" d="M1438,16492.5L1447,16492.5"></path></g><path id="node_outline141" fill="none" stroke="none" d="M1453.5,16481.5h98a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-98a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text141" fill="black"><text id="kity_text_1368" text-rendering="inherit" font-size="12" dy=".8em" y="16484.700000047684" x="1458.5">125. 验证回文串</text></g></g><g id="minder_node143"><g id="node_expander139" style="cursor: pointer;" display="none"><path id="kity_path_2097" fill="white" stroke="gray" d="M1596.5,16492.5A6,6,0,1,1,1584.5,16492.5A6,6,0,1,1,1596.5,16492.5"></path><path id="kity_path_2098" fill="none" stroke="gray"></path></g><path id="node_outline140" fill="none" stroke="none" d="M1601.5,16220.5h458a5,5,0,0,1,5,5v534a5,5,0,0,1,-5,5h-458a5,5,0,0,1,-5,-5v-534a5,5,0,0,1,5,-5z"></path><g id="node_text140" fill="black"><text id="kity_text_1337" text-rendering="inherit" font-size="12" dy=".8em" y="16223.700000047684" x="1606.5">class&#xa0;Solution&#xa0;{</text><text id="kity_text_1338" text-rendering="inherit" font-size="12" dy=".8em" y="16241.700000047684" x="1606.5">	public boolean&#xa0;isPalindrome(String&#xa0;s) {</text><text id="kity_text_1339" text-rendering="inherit" font-size="12" dy=".8em" y="16259.700000047684" x="1606.5">	    /**</text><text id="kity_text_1340" text-rendering="inherit" font-size="12" dy=".8em" y="16277.700000047684" x="1606.5">	&#xa0;&#xa0;&#xa0;&#xa0;双指针，一个从左到右&#xa0;&#xa0;一个从右到左&#xa0;忽略大小写&#xa0;和字符</text><text id="kity_text_1341" text-rendering="inherit" font-size="12" dy=".8em" y="16295.700000047684" x="1606.5">	&#xa0;&#xa0;&#xa0;&#xa0;*/</text><text id="kity_text_1342" text-rendering="inherit" font-size="12" dy=".8em" y="16313.700000047684" x="1606.5">	    int&#xa0;len&#xa0;=&#xa0;s.length();</text><text id="kity_text_1343" text-rendering="inherit" font-size="12" dy=".8em" y="16331.700000047684" x="1606.5">	    int&#xa0;a&#xa0;= 0,b&#xa0;=len-1;</text><text id="kity_text_1344" text-rendering="inherit" font-size="12" dy=".8em" y="16349.700000047684" x="1606.5">	    while(a&lt;b){</text><text id="kity_text_1345" text-rendering="inherit" font-size="12" dy=".8em" y="16367.700000047684" x="1606.5">	        //&#xa0;如果是字母或者是数字就退出&#xa0;比较</text><text id="kity_text_1346" text-rendering="inherit" font-size="12" dy=".8em" y="16385.700000047684" x="1606.5">	        while (a&#xa0;&lt;&#xa0;b&#xa0;&amp;&amp; !Character.isLetterOrDigit(s.charAt(a))) {</text><text id="kity_text_1347" text-rendering="inherit" font-size="12" dy=".8em" y="16403.700000047684" x="1606.5">	            ++a;</text><text id="kity_text_1348" text-rendering="inherit" font-size="12" dy=".8em" y="16421.700000047684" x="1606.5">	        }</text><text id="kity_text_1349" text-rendering="inherit" font-size="12" dy=".8em" y="16439.700000047684" x="1606.5">	        //&#xa0;如果是字母或者是数字就退出</text><text id="kity_text_1350" text-rendering="inherit" font-size="12" dy=".8em" y="16457.700000047684" x="1606.5">	        while (a&#xa0;&lt;&#xa0;b&#xa0;&amp;&amp; !Character.isLetterOrDigit(s.charAt(b))) {</text><text id="kity_text_1351" text-rendering="inherit" font-size="12" dy=".8em" y="16475.700000047684" x="1606.5">	            --b;</text><text id="kity_text_1352" text-rendering="inherit" font-size="12" dy=".8em" y="16493.700000047684" x="1606.5">	        }</text><text id="kity_text_1353" text-rendering="inherit" font-size="12" dy=".8em" y="16511.700000047684" x="1606.5">	        </text><text id="kity_text_1354" text-rendering="inherit" font-size="12" dy=".8em" y="16529.700000047684" x="1606.5">	        if (a&#xa0;&lt;&#xa0;b) {</text><text id="kity_text_1355" text-rendering="inherit" font-size="12" dy=".8em" y="16547.700000047684" x="1606.5">	            //比较两个字母是否一致</text><text id="kity_text_1356" text-rendering="inherit" font-size="12" dy=".8em" y="16565.700000047684" x="1606.5">	            if (Character.toLowerCase(s.charAt(a)) !=&#xa0;Character.toLowerCase(s.charAt(b))) {</text><text id="kity_text_1357" text-rendering="inherit" font-size="12" dy=".8em" y="16583.700000047684" x="1606.5">	                return false;</text><text id="kity_text_1358" text-rendering="inherit" font-size="12" dy=".8em" y="16601.700000047684" x="1606.5">	            }</text><text id="kity_text_1359" text-rendering="inherit" font-size="12" dy=".8em" y="16619.700000047684" x="1606.5">	            ++a;</text><text id="kity_text_1360" text-rendering="inherit" font-size="12" dy=".8em" y="16637.700000047684" x="1606.5">	            --b;</text><text id="kity_text_1361" text-rendering="inherit" font-size="12" dy=".8em" y="16655.700000047684" x="1606.5">	        }</text><text id="kity_text_1362" text-rendering="inherit" font-size="12" dy=".8em" y="16673.700000047684" x="1606.5">	      </text><text id="kity_text_1363" text-rendering="inherit" font-size="12" dy=".8em" y="16691.700000047684" x="1606.5">	    }</text><text id="kity_text_1364" text-rendering="inherit" font-size="12" dy=".8em" y="16709.700000047684" x="1606.5">	    return true;</text><text id="kity_text_1365" text-rendering="inherit" font-size="12" dy=".8em" y="16727.700000047684" x="1606.5">	}</text><text id="kity_text_1366" text-rendering="inherit" font-size="12" dy=".8em" y="16745.700000047684" x="1606.5">}</text></g></g><g id="minder_node144"><g id="node_expander144" style="cursor: pointer;"><path id="kity_path_2112" fill="white" stroke="gray" d="M1363.5,16958.5A6,6,0,1,1,1351.5,16958.5A6,6,0,1,1,1363.5,16958.5"></path><path id="kity_path_2113" fill="none" stroke="gray" d="M1353,16958.5L1362,16958.5"></path></g><path id="node_outline145" fill="none" stroke="none" d="M1368.5,16947.5h39a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-39a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text145" fill="black"><text id="kity_text_1394" text-rendering="inherit" font-size="12" dy=".8em" y="16950.700000047684" x="1373.5">实现&#xa0;</text></g></g><g id="minder_node145"><g id="node_expander143" style="cursor: pointer;"><path id="kity_path_2109" fill="white" stroke="gray" d="M1452.5,16958.5A6,6,0,1,1,1440.5,16958.5A6,6,0,1,1,1452.5,16958.5"></path><path id="kity_path_2110" fill="none" stroke="gray" d="M1442,16958.5L1451,16958.5"></path></g><path id="node_outline144" fill="none" stroke="none" d="M1457.5,16938.5h167a5,5,0,0,1,5,5v30a5,5,0,0,1,-5,5h-167a5,5,0,0,1,-5,-5v-30a5,5,0,0,1,5,-5z"></path><g id="node_text144" fill="black"><text id="kity_text_1391" text-rendering="inherit" font-size="12" dy=".8em" y="16941.700000047684" x="1462.5">28. 实现 strStr()</text><text id="kity_text_1392" text-rendering="inherit" font-size="12" dy=".8em" y="16959.700000047684" x="1462.5">子串匹配父串时的第一个索引</text></g></g><g id="minder_node146"><g id="node_expander142" style="cursor: pointer;" display="none"><path id="kity_path_2106" fill="white" stroke="gray" d="M1669.5,16958.5A6,6,0,1,1,1657.5,16958.5A6,6,0,1,1,1669.5,16958.5"></path><path id="kity_path_2107" fill="none" stroke="gray"></path></g><path id="node_outline143" fill="none" stroke="none" d="M1674.5,16794.5h457a5,5,0,0,1,5,5v318a5,5,0,0,1,-5,5h-457a5,5,0,0,1,-5,-5v-318a5,5,0,0,1,5,-5z"></path><g id="node_text143" fill="black"><text id="kity_text_1372" text-rendering="inherit" font-size="12" dy=".8em" y="16797.700000047684" x="1679.5">class Solution {</text><text id="kity_text_1373" text-rendering="inherit" font-size="12" dy=".8em" y="16815.700000047684" x="1679.5"></text><text id="kity_text_1374" text-rendering="inherit" font-size="12" dy=".8em" y="16833.700000047684" x="1679.5">	public int strStr(String haystack, String needle) {</text><text id="kity_text_1375" text-rendering="inherit" font-size="12" dy=".8em" y="16851.700000047684" x="1679.5">	&#xa0; &#xa0; /**</text><text id="kity_text_1376" text-rendering="inherit" font-size="12" dy=".8em" y="16869.700000047684" x="1679.5">	&#xa0; &#xa0; abc&#xa0; b&#xa0; &#xa0; &#xa0;3&#xa0; &#xa0;1</text><text id="kity_text_1377" text-rendering="inherit" font-size="12" dy=".8em" y="16887.700000047684" x="1679.5">	&#xa0; &#xa0; */</text><text id="kity_text_1378" text-rendering="inherit" font-size="12" dy=".8em" y="16905.700000047684" x="1679.5">	&#xa0; &#xa0; int a=0,b=0,bigLen=haystack.length(),chileLen=needle.length(),bigIndex=0;</text><text id="kity_text_1379" text-rendering="inherit" font-size="12" dy=".8em" y="16923.700000047684" x="1679.5">	&#xa0; &#xa0; while( (a&lt;bigLen)&amp;&amp;(b&lt;chileLen) ){ // 2&lt;3&#xa0; 1&lt;1&#xa0; false</text><text id="kity_text_1380" text-rendering="inherit" font-size="12" dy=".8em" y="16941.700000047684" x="1679.5">	&#xa0; &#xa0; &#xa0; &#xa0; if(haystack.charAt(a)==needle.charAt(b)) { // a!=b&#xa0; &#xa0;b=b</text><text id="kity_text_1381" text-rendering="inherit" font-size="12" dy=".8em" y="16959.700000047684" x="1679.5">	&#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; a++;b++;&#xa0; &#xa0; // a=2&#xa0; b = 1</text><text id="kity_text_1382" text-rendering="inherit" font-size="12" dy=".8em" y="16977.700000047684" x="1679.5">	&#xa0; &#xa0; &#xa0; &#xa0; }else {&#xa0;</text><text id="kity_text_1383" text-rendering="inherit" font-size="12" dy=".8em" y="16995.700000047684" x="1679.5">	&#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; a= ++bigIndex; // a =1</text><text id="kity_text_1384" text-rendering="inherit" font-size="12" dy=".8em" y="17013.700000047684" x="1679.5">	&#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; b=0; // 0</text><text id="kity_text_1385" text-rendering="inherit" font-size="12" dy=".8em" y="17031.700000047684" x="1679.5">	&#xa0; &#xa0; &#xa0; &#xa0; }</text><text id="kity_text_1386" text-rendering="inherit" font-size="12" dy=".8em" y="17049.700000047684" x="1679.5">	&#xa0; &#xa0; }</text><text id="kity_text_1387" text-rendering="inherit" font-size="12" dy=".8em" y="17067.700000047684" x="1679.5">	&#xa0; &#xa0;return b&gt;=chileLen?bigIndex:-1;</text><text id="kity_text_1388" text-rendering="inherit" font-size="12" dy=".8em" y="17085.700000047684" x="1679.5">	}</text><text id="kity_text_1389" text-rendering="inherit" font-size="12" dy=".8em" y="17103.700000047684" x="1679.5">}</text></g></g><g id="minder_node147"><g id="node_expander147" style="cursor: pointer;"><path id="kity_path_2121" fill="white" stroke="gray" d="M1363.5,17280.5A6,6,0,1,1,1351.5,17280.5A6,6,0,1,1,1363.5,17280.5"></path><path id="kity_path_2122" fill="none" stroke="gray" d="M1353,17280.5L1362,17280.5"></path></g><path id="node_outline148" fill="none" stroke="none" d="M1368.5,17269.5h82a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-82a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text148" fill="black"><text id="kity_text_1414" text-rendering="inherit" font-size="12" dy=".8em" y="17272.700000047684" x="1373.5">前缀&#xa0; 匹配 等</text></g></g><g id="minder_node148"><g id="node_expander146" style="cursor: pointer;"><path id="kity_path_2118" fill="white" stroke="gray" d="M1495.5,17280.5A6,6,0,1,1,1483.5,17280.5A6,6,0,1,1,1495.5,17280.5"></path><path id="kity_path_2119" fill="none" stroke="gray" d="M1485,17280.5L1494,17280.5"></path></g><path id="node_outline147" fill="none" stroke="none" d="M1500.5,17260.5h136a5,5,0,0,1,5,5v30a5,5,0,0,1,-5,5h-136a5,5,0,0,1,-5,-5v-30a5,5,0,0,1,5,-5z"></path><g id="node_text147" fill="black"><text id="kity_text_1411" text-rendering="inherit" font-size="12" dy=".8em" y="17263.700000047684" x="1505.5">14. 最长公共前缀</text><text id="kity_text_1412" text-rendering="inherit" font-size="12" dy=".8em" y="17281.700000047684" x="1505.5">字符串数组 的公共前缀</text></g></g><g id="minder_node149"><g id="node_expander145" style="cursor: pointer;" display="none"><path id="kity_path_2115" fill="white" stroke="gray" d="M1681.5,17280.5A6,6,0,1,1,1669.5,17280.5A6,6,0,1,1,1681.5,17280.5"></path><path id="kity_path_2116" fill="none" stroke="gray"></path></g><path id="node_outline146" fill="none" stroke="none" d="M1686.5,17152.5h296a5,5,0,0,1,5,5v246a5,5,0,0,1,-5,5h-296a5,5,0,0,1,-5,-5v-246a5,5,0,0,1,5,-5z"></path><g id="node_text146" fill="black"><text id="kity_text_1396" text-rendering="inherit" font-size="12" dy=".8em" y="17155.700000047684" x="1691.5">class&#xa0;Solution&#xa0;{</text><text id="kity_text_1397" text-rendering="inherit" font-size="12" dy=".8em" y="17173.700000047684" x="1691.5">	public&#xa0;String&#xa0;longestCommonPrefix(String[]&#xa0;strs) {</text><text id="kity_text_1398" text-rendering="inherit" font-size="12" dy=".8em" y="17191.700000047684" x="1691.5">	     if((strs==null)|| (strs.length&#xa0;== 0) ) return "";</text><text id="kity_text_1399" text-rendering="inherit" font-size="12" dy=".8em" y="17209.700000047684" x="1691.5">	&#xa0;&#xa0;&#xa0;&#xa0;Arrays.sort(strs);</text><text id="kity_text_1400" text-rendering="inherit" font-size="12" dy=".8em" y="17227.700000047684" x="1691.5">	    char[]&#xa0;min&#xa0;=&#xa0;&#xa0;strs[0].toCharArray();</text><text id="kity_text_1401" text-rendering="inherit" font-size="12" dy=".8em" y="17245.700000047684" x="1691.5">	    char[]&#xa0;max&#xa0;=&#xa0;strs[strs.length-1].toCharArray();</text><text id="kity_text_1402" text-rendering="inherit" font-size="12" dy=".8em" y="17263.700000047684" x="1691.5">	&#xa0;&#xa0;&#xa0;&#xa0;StringBuilder&#xa0;res&#xa0;= new&#xa0;StringBuilder();</text><text id="kity_text_1403" text-rendering="inherit" font-size="12" dy=".8em" y="17281.700000047684" x="1691.5">	    for(int&#xa0;i&#xa0;= 0 ;&#xa0;i&lt;min.length;i++){</text><text id="kity_text_1404" text-rendering="inherit" font-size="12" dy=".8em" y="17299.700000047684" x="1691.5">	            if(min[i]==max[i] )&#xa0;&#xa0;res.append(min[i]);</text><text id="kity_text_1405" text-rendering="inherit" font-size="12" dy=".8em" y="17317.700000047684" x="1691.5">	            else break;</text><text id="kity_text_1406" text-rendering="inherit" font-size="12" dy=".8em" y="17335.700000047684" x="1691.5">	    }</text><text id="kity_text_1407" text-rendering="inherit" font-size="12" dy=".8em" y="17353.700000047684" x="1691.5">	    return&#xa0;res.toString();</text><text id="kity_text_1408" text-rendering="inherit" font-size="12" dy=".8em" y="17371.700000047684" x="1691.5">	}</text><text id="kity_text_1409" text-rendering="inherit" font-size="12" dy=".8em" y="17389.700000047684" x="1691.5">}</text></g></g><g id="minder_node150"><g id="node_expander151" style="cursor: pointer;"><path id="kity_path_2133" fill="white" stroke="gray" d="M900.5,8599.5A6,6,0,1,1,888.5,8599.5A6,6,0,1,1,900.5,8599.5"></path><path id="kity_path_2134" fill="none" stroke="gray" d="M890,8599.5L899,8599.5"></path></g><path id="node_outline152" fill="rgb(238, 243, 246)" stroke="rgb(115, 161, 191)" d="M793.5,8586.5h91a3,3,0,0,1,3,3v20a3,3,0,0,1,-3,3h-91a3,3,0,0,1,-3,-3v-20a3,3,0,0,1,3,-3z" stroke-width="1"></path><g id="node_text152" fill="black"><text id="kity_text_1454" text-rendering="inherit" font-size="14" dy=".8em" y="8590.400000095367" x="810.5">滑动窗口</text></g></g><g id="minder_node151"><g id="node_expander150" style="cursor: pointer;"><path id="kity_path_2130" fill="white" stroke="gray" d="M762.5,8599.5A6,6,0,1,1,750.5,8599.5A6,6,0,1,1,762.5,8599.5"></path><path id="kity_path_2131" fill="none" stroke="gray" d="M752,8599.5L761,8599.5"></path></g><path id="node_outline151" fill="none" stroke="none" d="M520.5,8570.5h225a5,5,0,0,1,5,5v48a5,5,0,0,1,-5,5h-225a5,5,0,0,1,-5,-5v-48a5,5,0,0,1,5,-5z"></path><g id="node_text151" fill="black"><text id="kity_text_1450" text-rendering="inherit" font-size="12" dy=".8em" y="8573.700000047684" x="525.5">剑指 Offer 57 - II. 和为s的连续正数序列</text><text id="kity_text_1451" text-rendering="inherit" font-size="12" dy=".8em" y="8591.700000047684" x="525.5">输入：target = 9</text><text id="kity_text_1452" text-rendering="inherit" font-size="12" dy=".8em" y="8609.700000047684" x="525.5">输出：[[2,3,4],[4,5]]</text></g></g><g id="minder_node152"><g id="node_expander149" style="cursor: pointer;" display="none"><path id="kity_path_2127" fill="white" stroke="gray" d="M487.5,8599.5A6,6,0,1,1,475.5,8599.5A6,6,0,1,1,487.5,8599.5"></path><path id="kity_path_2128" fill="none" stroke="gray"></path></g><path id="node_outline150" fill="none" stroke="none" d="M29.5,8318.5h441a5,5,0,0,1,5,5v552a5,5,0,0,1,-5,5h-441a5,5,0,0,1,-5,-5v-552a5,5,0,0,1,5,-5z"></path><g id="node_text150" fill="black"><text id="kity_text_1418" text-rendering="inherit" font-size="12" dy=".8em" y="8321.700000047684" x="34.5">class Solution {</text><text id="kity_text_1419" text-rendering="inherit" font-size="12" dy=".8em" y="8339.700000047684" x="34.5">	public int[][] findContinuousSequence(int target) {</text><text id="kity_text_1420" text-rendering="inherit" font-size="12" dy=".8em" y="8357.700000047684" x="34.5">	&#xa0; &#xa0; /**</text><text id="kity_text_1421" text-rendering="inherit" font-size="12" dy=".8em" y="8375.700000047684" x="34.5">	&#xa0; &#xa0; 1. &gt;=3 才有&#xa0; 从 1-（targer/2)+1 中找，超过就跳出</text><text id="kity_text_1422" text-rendering="inherit" font-size="12" dy=".8em" y="8393.700000047684" x="34.5">	&#xa0; &#xa0; 2. 123456789&#xa0; 123=6&lt;9 1234=10&gt;9 234=9&#xa0; 34&lt;9 345&lt;9 45=9&#xa0;</text><text id="kity_text_1423" text-rendering="inherit" font-size="12" dy=".8em" y="8411.700000047684" x="34.5">	&#xa0; &#xa0; 3. 一开始先维护 三个大小的区间&#xa0;</text><text id="kity_text_1424" text-rendering="inherit" font-size="12" dy=".8em" y="8429.700000047684" x="34.5">	&#xa0; &#xa0; */</text><text id="kity_text_1425" text-rendering="inherit" font-size="12" dy=".8em" y="8447.700000047684" x="34.5">	&#xa0; &#xa0; int a=1,b=2,s=3;</text><text id="kity_text_1426" text-rendering="inherit" font-size="12" dy=".8em" y="8465.700000047684" x="34.5">	&#xa0; &#xa0; List&lt;int[]&gt; res&#xa0; = new ArrayList&lt;&gt;();</text><text id="kity_text_1427" text-rendering="inherit" font-size="12" dy=".8em" y="8483.700000047684" x="34.5">	&#xa0; &#xa0; while(a&lt;b){</text><text id="kity_text_1428" text-rendering="inherit" font-size="12" dy=".8em" y="8501.700000047684" x="34.5">	&#xa0; &#xa0; &#xa0; &#xa0; if(s==target){</text><text id="kity_text_1429" text-rendering="inherit" font-size="12" dy=".8em" y="8519.700000047684" x="34.5">	&#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; int[] arr = new int[b-a+1];</text><text id="kity_text_1430" text-rendering="inherit" font-size="12" dy=".8em" y="8537.700000047684" x="34.5">	&#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; for(int k=a;k&lt;=b;k++){</text><text id="kity_text_1431" text-rendering="inherit" font-size="12" dy=".8em" y="8555.700000047684" x="34.5">	&#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; arr[k-a] = k;</text><text id="kity_text_1432" text-rendering="inherit" font-size="12" dy=".8em" y="8573.700000047684" x="34.5">	&#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; }</text><text id="kity_text_1433" text-rendering="inherit" font-size="12" dy=".8em" y="8591.700000047684" x="34.5">	&#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; res.add(arr);</text><text id="kity_text_1434" text-rendering="inherit" font-size="12" dy=".8em" y="8609.700000047684" x="34.5">	&#xa0; &#xa0; &#xa0; &#xa0; }</text><text id="kity_text_1435" text-rendering="inherit" font-size="12" dy=".8em" y="8627.700000047684" x="34.5">	&#xa0; &#xa0; &#xa0; &#xa0; //2.3&gt;target&#xa0; 说明现在的a+b大了，那就s - a 试试，然后 a右移 也就是 +1</text><text id="kity_text_1436" text-rendering="inherit" font-size="12" dy=".8em" y="8645.700000047684" x="34.5">	&#xa0; &#xa0; &#xa0; &#xa0; if(s&gt;=target){</text><text id="kity_text_1437" text-rendering="inherit" font-size="12" dy=".8em" y="8663.700000047684" x="34.5">	&#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; s-=a;</text><text id="kity_text_1438" text-rendering="inherit" font-size="12" dy=".8em" y="8681.700000047684" x="34.5">	&#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; a++;</text><text id="kity_text_1439" text-rendering="inherit" font-size="12" dy=".8em" y="8699.700000047684" x="34.5">	&#xa0; &#xa0; &#xa0; &#xa0; }</text><text id="kity_text_1440" text-rendering="inherit" font-size="12" dy=".8em" y="8717.700000047684" x="34.5">	&#xa0; &#xa0; &#xa0; &#xa0; // 3. 3&lt;target 说明现在的a+b小了，那就&#xa0;</text><text id="kity_text_1441" text-rendering="inherit" font-size="12" dy=".8em" y="8735.700000047684" x="34.5">	&#xa0; &#xa0; &#xa0; &#xa0; if(s&lt;target){</text><text id="kity_text_1442" text-rendering="inherit" font-size="12" dy=".8em" y="8753.700000047684" x="34.5">	&#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; b++;</text><text id="kity_text_1443" text-rendering="inherit" font-size="12" dy=".8em" y="8771.700000047684" x="34.5">	&#xa0; &#xa0; &#xa0; &#xa0; &#xa0; &#xa0; s+=b;</text><text id="kity_text_1444" text-rendering="inherit" font-size="12" dy=".8em" y="8789.700000047684" x="34.5">	&#xa0; &#xa0; &#xa0; &#xa0; }</text><text id="kity_text_1445" text-rendering="inherit" font-size="12" dy=".8em" y="8807.700000047684" x="34.5">	&#xa0; &#xa0; }</text><text id="kity_text_1446" text-rendering="inherit" font-size="12" dy=".8em" y="8825.700000047684" x="34.5">	&#xa0; &#xa0; return res.toArray(new int[0][]);</text><text id="kity_text_1447" text-rendering="inherit" font-size="12" dy=".8em" y="8843.700000047684" x="34.5">	}</text><text id="kity_text_1448" text-rendering="inherit" font-size="12" dy=".8em" y="8861.700000047684" x="34.5">}</text></g></g><g id="minder_node153"><g id="node_expander154" style="cursor: pointer;"><path id="kity_path_2142" fill="white" stroke="gray" d="M900.5,9084.5A6,6,0,1,1,888.5,9084.5A6,6,0,1,1,900.5,9084.5"></path><path id="kity_path_2143" fill="none" stroke="gray" d="M890,9084.5L899,9084.5"></path></g><path id="node_outline155" fill="rgb(238, 243, 246)" stroke="rgb(115, 161, 191)" d="M820.5,9071.5h64a3,3,0,0,1,3,3v20a3,3,0,0,1,-3,3h-64a3,3,0,0,1,-3,-3v-20a3,3,0,0,1,3,-3z" stroke-width="1"></path><g id="node_text155" fill="black"><text id="kity_text_1477" text-rendering="inherit" font-size="14" dy=".8em" y="9075.400000095367" x="837.5">公式</text></g></g><g id="minder_node154"><g id="node_expander153" style="cursor: pointer;"><path id="kity_path_2139" fill="white" stroke="gray" d="M789.5,9084.5A6,6,0,1,1,777.5,9084.5A6,6,0,1,1,789.5,9084.5"></path><path id="kity_path_2140" fill="none" stroke="gray" d="M779,9084.5L788,9084.5"></path></g><path id="node_outline154" fill="none" stroke="none" d="M507.5,9073.5h265a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-265a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text154" fill="black"><text id="kity_text_1475" text-rendering="inherit" font-size="12" dy=".8em" y="9076.700000047684" x="512.5">剑指 Offer 62. 圆圈中最后剩下的数字&#xa0;约瑟夫环</text></g></g><g id="minder_node155"><g id="node_expander152" style="cursor: pointer;" display="none"><path id="kity_path_2136" fill="white" stroke="gray" d="M474.5,9084.5A6,6,0,1,1,462.5,9084.5A6,6,0,1,1,474.5,9084.5"></path><path id="kity_path_2137" fill="none" stroke="gray"></path></g><path id="node_outline153" fill="none" stroke="none" d="M25.5,8920.5h432a5,5,0,0,1,5,5v318a5,5,0,0,1,-5,5h-432a5,5,0,0,1,-5,-5v-318a5,5,0,0,1,5,-5z"></path><g id="node_text153" fill="black"><text id="kity_text_1456" text-rendering="inherit" font-size="12" dy=".8em" y="8923.700000047684" x="30.5">class Solution {</text><text id="kity_text_1457" text-rendering="inherit" font-size="12" dy=".8em" y="8941.700000047684" x="30.5">	public int lastRemaining(int n, int m) {</text><text id="kity_text_1458" text-rendering="inherit" font-size="12" dy=".8em" y="8959.700000047684" x="30.5">	&#xa0; &#xa0; //&#xa0; 0 1 2 3 4&#xa0; m = 3&#xa0; &#xa0; 第一次删除2 第二次删除0&#xa0; 第三次删除4&#xa0; 第四次删除1</text><text id="kity_text_1459" text-rendering="inherit" font-size="12" dy=".8em" y="8977.700000047684" x="30.5">	&#xa0; &#xa0; // x = 1,1,0,3</text><text id="kity_text_1460" text-rendering="inherit" font-size="12" dy=".8em" y="8995.700000047684" x="30.5">	&#xa0; &#xa0; // int x = 0;</text><text id="kity_text_1461" text-rendering="inherit" font-size="12" dy=".8em" y="9013.700000047684" x="30.5">	&#xa0; &#xa0; // for(int i =2;i&lt;=n;i++){</text><text id="kity_text_1462" text-rendering="inherit" font-size="12" dy=".8em" y="9031.700000047684" x="30.5">	&#xa0; &#xa0; //&#xa0; &#xa0; &#xa0;x = (x+m)%i;</text><text id="kity_text_1463" text-rendering="inherit" font-size="12" dy=".8em" y="9049.700000047684" x="30.5">	&#xa0; &#xa0; // }</text><text id="kity_text_1464" text-rendering="inherit" font-size="12" dy=".8em" y="9067.700000047684" x="30.5">	&#xa0; &#xa0; // return x;</text><text id="kity_text_1465" text-rendering="inherit" font-size="12" dy=".8em" y="9085.700000047684" x="30.5">	&#xa0; &#xa0; int p=0;</text><text id="kity_text_1466" text-rendering="inherit" font-size="12" dy=".8em" y="9103.700000047684" x="30.5">	for(int i=2;i&lt;=n;i++)</text><text id="kity_text_1467" text-rendering="inherit" font-size="12" dy=".8em" y="9121.700000047684" x="30.5">	{</text><text id="kity_text_1468" text-rendering="inherit" font-size="12" dy=".8em" y="9139.700000047684" x="30.5">		p=(p+m)%i;&#xa0; // 1,1,0,3</text><text id="kity_text_1469" text-rendering="inherit" font-size="12" dy=".8em" y="9157.700000047684" x="30.5">	}</text><text id="kity_text_1470" text-rendering="inherit" font-size="12" dy=".8em" y="9175.700000047684" x="30.5">	// return p+1;</text><text id="kity_text_1471" text-rendering="inherit" font-size="12" dy=".8em" y="9193.700000047684" x="30.5">	return p;</text><text id="kity_text_1472" text-rendering="inherit" font-size="12" dy=".8em" y="9211.700000047684" x="30.5">	}</text><text id="kity_text_1473" text-rendering="inherit" font-size="12" dy=".8em" y="9229.700000047684" x="30.5">}</text></g></g><g id="minder_node156"><g id="node_expander158" style="cursor: pointer;"><path id="kity_path_2154" fill="white" stroke="gray" d="M900.5,9371.5A6,6,0,1,1,888.5,9371.5A6,6,0,1,1,900.5,9371.5"></path><path id="kity_path_2155" fill="none" stroke="gray" d="M890,9371.5L899,9371.5"></path></g><path id="node_outline159" fill="rgb(238, 243, 246)" stroke="rgb(115, 161, 191)" d="M806.5,9358.5h78a3,3,0,0,1,3,3v20a3,3,0,0,1,-3,3h-78a3,3,0,0,1,-3,-3v-20a3,3,0,0,1,3,-3z" stroke-width="1"></path><g id="node_text159" fill="black"><text id="kity_text_1493" text-rendering="inherit" font-size="14" dy=".8em" y="9362.400000095367" x="823.5">位运算</text></g></g><g id="minder_node157"><g id="node_expander157" style="cursor: pointer;"><path id="kity_path_2151" fill="white" stroke="gray" d="M775.5,9371.5A6,6,0,1,1,763.5,9371.5A6,6,0,1,1,775.5,9371.5"></path><path id="kity_path_2152" fill="none" stroke="gray" d="M765,9371.5L774,9371.5"></path></g><path id="node_outline158" fill="none" stroke="none" d="M674.5,9360.5h84a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-84a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text158" fill="black"><text id="kity_text_1491" text-rendering="inherit" font-size="12" dy=".8em" y="9363.700000047684" x="679.5">实现加减乘除</text></g></g><g id="minder_node158"><g id="node_expander156" style="cursor: pointer;"><path id="kity_path_2148" fill="white" stroke="gray" d="M641.5,9371.5A6,6,0,1,1,629.5,9371.5A6,6,0,1,1,641.5,9371.5"></path><path id="kity_path_2149" fill="none" stroke="gray" d="M631,9371.5L640,9371.5"></path></g><path id="node_outline157" fill="none" stroke="none" d="M423.5,9360.5h201a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-201a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text157" fill="black"><text id="kity_text_1489" text-rendering="inherit" font-size="12" dy=".8em" y="9363.700000047684" x="428.5">剑指 Offer 65. 不用加减乘除做加法</text></g></g><g id="minder_node159"><g id="node_expander155" style="cursor: pointer;" display="none"><path id="kity_path_2145" fill="white" stroke="gray" d="M390.5,9371.5A6,6,0,1,1,378.5,9371.5A6,6,0,1,1,390.5,9371.5"></path><path id="kity_path_2146" fill="none" stroke="gray"></path></g><path id="node_outline156" fill="none" stroke="none" d="M207.5,9288.5h166a5,5,0,0,1,5,5v156a5,5,0,0,1,-5,5h-166a5,5,0,0,1,-5,-5v-156a5,5,0,0,1,5,-5z"></path><g id="node_text156" fill="black"><text id="kity_text_1479" text-rendering="inherit" font-size="12" dy=".8em" y="9291.700000047684" x="212.5">  </text><text id="kity_text_1480" text-rendering="inherit" font-size="12" dy=".8em" y="9309.700000047684" x="212.5">	&#xa0;public int add(int a, int b) {</text><text id="kity_text_1481" text-rendering="inherit" font-size="12" dy=".8em" y="9327.700000047684" x="212.5">	&#xa0; &#xa0; while(b!=0){</text><text id="kity_text_1482" text-rendering="inherit" font-size="12" dy=".8em" y="9345.700000047684" x="212.5">	&#xa0; &#xa0; &#xa0; &#xa0; int i = (a&amp;b) &lt;&lt; 1;</text><text id="kity_text_1483" text-rendering="inherit" font-size="12" dy=".8em" y="9363.700000047684" x="212.5">	&#xa0; &#xa0; &#xa0; &#xa0; a ^=b;&#xa0;&#xa0;</text><text id="kity_text_1484" text-rendering="inherit" font-size="12" dy=".8em" y="9381.700000047684" x="212.5">	&#xa0; &#xa0; &#xa0; &#xa0; b&#xa0; = i;</text><text id="kity_text_1485" text-rendering="inherit" font-size="12" dy=".8em" y="9399.700000047684" x="212.5">	&#xa0; &#xa0; }</text><text id="kity_text_1486" text-rendering="inherit" font-size="12" dy=".8em" y="9417.700000047684" x="212.5">	&#xa0; &#xa0; return a;</text><text id="kity_text_1487" text-rendering="inherit" font-size="12" dy=".8em" y="9435.700000047684" x="212.5">	}</text></g></g><g id="minder_node160"><g id="node_expander162" style="cursor: pointer;"><path id="kity_path_2166" fill="white" stroke="gray" d="M900.5,9640.5A6,6,0,1,1,888.5,9640.5A6,6,0,1,1,900.5,9640.5"></path><path id="kity_path_2167" fill="none" stroke="gray" d="M890,9640.5L899,9640.5"></path></g><path id="node_outline163" fill="rgb(238, 243, 246)" stroke="rgb(115, 161, 191)" d="M834.5,9627.5h50a3,3,0,0,1,3,3v20a3,3,0,0,1,-3,3h-50a3,3,0,0,1,-3,-3v-20a3,3,0,0,1,3,-3z" stroke-width="1"></path><g id="node_text163" fill="black"><text id="kity_text_1517" text-rendering="inherit" font-size="14" dy=".8em" y="9631.400000095367" x="851.5">栈</text></g></g><g id="minder_node161"><g id="node_expander161" style="cursor: pointer;"><path id="kity_path_2163" fill="white" stroke="gray" d="M803.5,9640.5A6,6,0,1,1,791.5,9640.5A6,6,0,1,1,803.5,9640.5"></path><path id="kity_path_2164" fill="none" stroke="gray" d="M793,9640.5L802,9640.5"></path></g><path id="node_outline162" fill="none" stroke="none" d="M748.5,9629.5h38a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-38a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z"></path><g id="node_text162" fill="black"><text id="kity_text_1515" text-rendering="inherit" font-size="12" dy=".8em" y="9632.700000047684" x="753.5">匹配&#xa0;</text></g></g><g id="minder_node162"><g id="node_expander160" style="cursor: pointer;"><path id="kity_path_2160" fill="white" stroke="gray" d="M715.5,9640.5A6,6,0,1,1,703.5,9640.5A6,6,0,1,1,715.5,9640.5"></path><path id="kity_path_2161" fill="none" stroke="gray" d="M705,9640.5L714,9640.5"></path></g><path id="node_outline161" fill="none" stroke="none" d="M580.5,9620.5h118a5,5,0,0,1,5,5v30a5,5,0,0,1,-5,5h-118a5,5,0,0,1,-5,-5v-30a5,5,0,0,1,5,-5z"></path><g id="node_text161" fill="black"><text id="kity_text_1512" text-rendering="inherit" font-size="12" dy=".8em" y="9623.700000047684" x="585.5">20. 有效的括号</text><text id="kity_text_1513" text-rendering="inherit" font-size="12" dy=".8em" y="9641.700000047684" x="585.5">以正确的顺序闭合。</text></g></g><g id="minder_node163"><g id="node_expander159" style="cursor: pointer;" display="none"><path id="kity_path_2157" fill="white" stroke="gray" d="M547.5,9640.5A6,6,0,1,1,535.5,9640.5A6,6,0,1,1,547.5,9640.5"></path><path id="kity_path_2158" fill="none" stroke="gray"></path></g><path id="node_outline160" fill="none" stroke="none" d="M267.5,9494.5h263a5,5,0,0,1,5,5v282a5,5,0,0,1,-5,5h-263a5,5,0,0,1,-5,-5v-282a5,5,0,0,1,5,-5z"></path><g id="node_text160" fill="black"><text id="kity_text_1495" text-rendering="inherit" font-size="12" dy=".8em" y="9497.700000047684" x="272.5">class&#xa0;Solution&#xa0;{</text><text id="kity_text_1496" text-rendering="inherit" font-size="12" dy=".8em" y="9515.700000047684" x="272.5">	public boolean&#xa0;isValid(String&#xa0;s) {</text><text id="kity_text_1497" text-rendering="inherit" font-size="12" dy=".8em" y="9533.700000047684" x="272.5">	    //&#xa0;({)}&#xa0;false&#xa0;&#xa0;{()}&#xa0;true</text><text id="kity_text_1498" text-rendering="inherit" font-size="12" dy=".8em" y="9551.700000047684" x="272.5">	  char[]&#xa0;ch&#xa0;=&#xa0;s.toCharArray();</text><text id="kity_text_1499" text-rendering="inherit" font-size="12" dy=".8em" y="9569.700000047684" x="272.5">	&#xa0;&#xa0;Stack&lt;Character&gt;&#xa0;stack&#xa0;= new&#xa0;Stack&lt;&gt;();</text><text id="kity_text_1500" text-rendering="inherit" font-size="12" dy=".8em" y="9587.700000047684" x="272.5">	  for(char&#xa0;c&#xa0;:&#xa0;ch){</text><text id="kity_text_1501" text-rendering="inherit" font-size="12" dy=".8em" y="9605.700000047684" x="272.5">	       if(c=='('||c=='{'||c=='[')&#xa0;stack.push(c);//入栈</text><text id="kity_text_1502" text-rendering="inherit" font-size="12" dy=".8em" y="9623.700000047684" x="272.5">	       if(stack.isEmpty()) return false;</text><text id="kity_text_1503" text-rendering="inherit" font-size="12" dy=".8em" y="9641.700000047684" x="272.5">	       if(c&#xa0;== ')' &amp;&amp;&#xa0;stack.pop() != '(' ) return false;</text><text id="kity_text_1504" text-rendering="inherit" font-size="12" dy=".8em" y="9659.700000047684" x="272.5">	       if(c&#xa0;== '}' &amp;&amp;&#xa0;stack.pop() != '{' ) return false;</text><text id="kity_text_1505" text-rendering="inherit" font-size="12" dy=".8em" y="9677.700000047684" x="272.5">	       if(c&#xa0;== ']' &amp;&amp;&#xa0;stack.pop() != '[' ) return false;</text><text id="kity_text_1506" text-rendering="inherit" font-size="12" dy=".8em" y="9695.700000047684" x="272.5">	  }</text><text id="kity_text_1507" text-rendering="inherit" font-size="12" dy=".8em" y="9713.700000047684" x="272.5"></text><text id="kity_text_1508" text-rendering="inherit" font-size="12" dy=".8em" y="9731.700000047684" x="272.5">	  return&#xa0;stack.isEmpty();</text><text id="kity_text_1509" text-rendering="inherit" font-size="12" dy=".8em" y="9749.700000047684" x="272.5">	}</text><text id="kity_text_1510" text-rendering="inherit" font-size="12" dy=".8em" y="9767.700000047684" x="272.5">}</text></g></g><g id="minder_node164"><g id="node_expander163" style="cursor: pointer;"><path id="kity_path_2174" fill="white" stroke="gray" d="M1497.5,148.5A6,6,0,1,1,1485.5,148.5A6,6,0,1,1,1497.5,148.5"></path><path id="kity_path_2175" fill="none" stroke="gray" d="M1487,148.5L1496,148.5"></path></g><path id="node_outline164" fill="none" stroke="none" d="M1502.5,137.5h127a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-127a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text164" fill="black"><text id="kity_text_2171" text-rendering="inherit" font-size="12" dy=".8em" y="140.70000004768372" x="1507.5">94. 二叉树的中序遍历</text></g></g><g id="minder_node165"><g id="node_expander164" style="cursor: pointer;" display="none"><path id="kity_path_2182" fill="white" stroke="gray" d="M1674.5,148.5A6,6,0,1,1,1662.5,148.5A6,6,0,1,1,1674.5,148.5"></path><path id="kity_path_2183" fill="none" stroke="gray"></path></g><path id="node_outline165" fill="none" stroke="none" d="M1679.5,20.5h324a5,5,0,0,1,5,5v246a5,5,0,0,1,-5,5h-324a5,5,0,0,1,-5,-5v-246a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text165" fill="black"><text id="kity_text_2179" text-rendering="inherit" font-size="12" dy=".8em" y="23.700000047683716" x="1684.5">class Solution {</text><text id="kity_text_2184" text-rendering="inherit" font-size="12" dy=".8em" y="41.700000047683716" x="1684.5">	public List&lt;Integer&gt; inorderTraversal(TreeNode root) {</text><text id="kity_text_2185" text-rendering="inherit" font-size="12" dy=".8em" y="59.700000047683716" x="1684.5">	&#xa0; &#xa0; List&lt;Integer&gt; res = new ArrayList&lt;&gt;();</text><text id="kity_text_2186" text-rendering="inherit" font-size="12" dy=".8em" y="77.70000004768372" x="1684.5">	&#xa0; &#xa0; dfs(res,root);</text><text id="kity_text_2187" text-rendering="inherit" font-size="12" dy=".8em" y="95.70000004768372" x="1684.5">	&#xa0; &#xa0; return res;</text><text id="kity_text_2188" text-rendering="inherit" font-size="12" dy=".8em" y="113.70000004768372" x="1684.5">	}</text><text id="kity_text_2189" text-rendering="inherit" font-size="12" dy=".8em" y="131.70000004768372" x="1684.5">	// dfs&#xa0;</text><text id="kity_text_2190" text-rendering="inherit" font-size="12" dy=".8em" y="149.70000004768372" x="1684.5">	void dfs(List res,TreeNode root){</text><text id="kity_text_2191" text-rendering="inherit" font-size="12" dy=".8em" y="167.70000004768372" x="1684.5">	&#xa0; &#xa0; if(root==null) return ;</text><text id="kity_text_2192" text-rendering="inherit" font-size="12" dy=".8em" y="185.70000004768372" x="1684.5">	&#xa0; &#xa0; dfs(res,root.left);</text><text id="kity_text_2193" text-rendering="inherit" font-size="12" dy=".8em" y="203.70000004768372" x="1684.5">	&#xa0; &#xa0; res.add(root.val);</text><text id="kity_text_2194" text-rendering="inherit" font-size="12" dy=".8em" y="221.70000004768372" x="1684.5">	&#xa0; &#xa0; dfs(res,root.right);</text><text id="kity_text_2195" text-rendering="inherit" font-size="12" dy=".8em" y="239.70000004768372" x="1684.5">	}</text><text id="kity_text_2196" text-rendering="inherit" font-size="12" dy=".8em" y="257.7000000476837" x="1684.5">}</text></g></g><g id="minder_node166"><g id="node_expander165" style="cursor: pointer;"><path id="kity_path_2206" fill="white" stroke="gray" d="M1497.5,470.5A6,6,0,1,1,1485.5,470.5A6,6,0,1,1,1497.5,470.5"></path><path id="kity_path_2207" fill="none" stroke="gray" d="M1487,470.5L1496,470.5"></path></g><path id="node_outline166" fill="none" stroke="none" d="M1502.5,459.5h134a5,5,0,0,1,5,5v12a5,5,0,0,1,-5,5h-134a5,5,0,0,1,-5,-5v-12a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text166" fill="black"><text id="kity_text_2203" text-rendering="inherit" font-size="12" dy=".8em" y="462.7000000476837" x="1507.5">102. 二叉树的层序遍历</text></g></g><g id="minder_node167"><g id="node_expander166" style="cursor: pointer;" display="none"><path id="kity_path_2214" fill="white" stroke="gray" d="M1681.5,470.5A6,6,0,1,1,1669.5,470.5A6,6,0,1,1,1681.5,470.5"></path><path id="kity_path_2215" fill="none" stroke="gray"></path></g><path id="node_outline167" fill="none" stroke="none" d="M1686.5,306.5h353a5,5,0,0,1,5,5v318a5,5,0,0,1,-5,5h-353a5,5,0,0,1,-5,-5v-318a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text167" fill="black"><text id="kity_text_2211" text-rendering="inherit" font-size="12" dy=".8em" y="309.7000000476837" x="1691.5">class&#xa0;Solution&#xa0;{</text><text id="kity_text_2216" text-rendering="inherit" font-size="12" dy=".8em" y="327.7000000476837" x="1691.5">	public&#xa0;List&lt;List&lt;Integer&gt;&gt;&#xa0;levelOrder(TreeNode&#xa0;root) {</text><text id="kity_text_2217" text-rendering="inherit" font-size="12" dy=".8em" y="345.7000000476837" x="1691.5">	&#xa0;&#xa0;&#xa0;&#xa0;List&lt;List&lt;Integer&gt;&gt;&#xa0;resList&#xa0;= new&#xa0;ArrayList&lt;&gt;();</text><text id="kity_text_2218" text-rendering="inherit" font-size="12" dy=".8em" y="363.7000000476837" x="1691.5">	Queue&lt;TreeNode&gt;&#xa0;queue&#xa0;= new&#xa0;LinkedList&lt;&gt;();</text><text id="kity_text_2219" text-rendering="inherit" font-size="12" dy=".8em" y="381.7000000476837" x="1691.5">	if(root!=null)&#xa0;queue.add(root);</text><text id="kity_text_2220" text-rendering="inherit" font-size="12" dy=".8em" y="399.7000000476837" x="1691.5">	while(!queue.isEmpty()){</text><text id="kity_text_2221" text-rendering="inherit" font-size="12" dy=".8em" y="417.7000000476837" x="1691.5">	&#xa0;&#xa0;&#xa0;&#xa0;List&lt;Integer&gt;&#xa0;tmp&#xa0;= new&#xa0;ArrayList&lt;&gt;();</text><text id="kity_text_2222" text-rendering="inherit" font-size="12" dy=".8em" y="435.7000000476837" x="1691.5">	    for(int&#xa0;i&#xa0;=&#xa0;queue.size();i&gt;0;i--){ //&#xa0;int&#xa0;i&#xa0;=&#xa0;0;i&lt;queue.size();i++</text><text id="kity_text_2223" text-rendering="inherit" font-size="12" dy=".8em" y="453.7000000476837" x="1691.5">	&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;TreeNode&#xa0;node&#xa0;=&#xa0;&#xa0;queue.poll();</text><text id="kity_text_2224" text-rendering="inherit" font-size="12" dy=".8em" y="471.7000000476837" x="1691.5">	&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;tmp.add(node.val);</text><text id="kity_text_2225" text-rendering="inherit" font-size="12" dy=".8em" y="489.7000000476837" x="1691.5">	        if(node.left!=null)&#xa0;queue.add(node.left);</text><text id="kity_text_2226" text-rendering="inherit" font-size="12" dy=".8em" y="507.7000000476837" x="1691.5">	        if(node.right!=null)&#xa0;queue.add(node.right);</text><text id="kity_text_2227" text-rendering="inherit" font-size="12" dy=".8em" y="525.7000000476837" x="1691.5">	    }</text><text id="kity_text_2228" text-rendering="inherit" font-size="12" dy=".8em" y="543.7000000476837" x="1691.5">	&#xa0;&#xa0;&#xa0;&#xa0;resList.add(tmp);</text><text id="kity_text_2229" text-rendering="inherit" font-size="12" dy=".8em" y="561.7000000476837" x="1691.5">	}</text><text id="kity_text_2230" text-rendering="inherit" font-size="12" dy=".8em" y="579.7000000476837" x="1691.5">	return&#xa0;resList;</text><text id="kity_text_2231" text-rendering="inherit" font-size="12" dy=".8em" y="597.7000000476837" x="1691.5">	}</text><text id="kity_text_2232" text-rendering="inherit" font-size="12" dy=".8em" y="615.7000000476837" x="1691.5">}</text></g></g><g id="minder_node168"><g id="node_expander167" style="cursor: pointer;"><path id="kity_path_2239" fill="white" stroke="gray" d="M1377.5,13498.5A6,6,0,1,1,1365.5,13498.5A6,6,0,1,1,1377.5,13498.5"></path><path id="kity_path_2240" fill="none" stroke="gray" d="M1367,13498.5L1376,13498.5"></path></g><path id="node_outline168" fill="none" stroke="none" d="M1382.5,13478.5h224a5,5,0,0,1,5,5v30a5,5,0,0,1,-5,5h-224a5,5,0,0,1,-5,-5v-30a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text168" fill="black"><text id="kity_text_2236" text-rendering="inherit" font-size="12" dy=".8em" y="13481.700000047684" x="1387.5">122. 买卖股票的最佳时机 II</text><text id="kity_text_2258" text-rendering="inherit" font-size="12" dy=".8em" y="13499.700000047684" x="1387.5">[7,1,5,3,6,4] 下标1买 2卖 3买 5卖 最大7</text></g></g><g id="minder_node169"><g id="node_expander168" style="cursor: pointer;" display="none"><path id="kity_path_2247" fill="white" stroke="gray" d="M1651.5,13498.5A6,6,0,1,1,1639.5,13498.5A6,6,0,1,1,1651.5,13498.5"></path><path id="kity_path_2248" fill="none" stroke="gray"></path></g><path id="node_outline169" fill="none" stroke="none" d="M1656.5,13406.5h217a5,5,0,0,1,5,5v174a5,5,0,0,1,-5,5h-217a5,5,0,0,1,-5,-5v-174a5,5,0,0,1,5,-5z" stroke-width="3"></path><g id="node_text169" fill="black"><text id="kity_text_2244" text-rendering="inherit" font-size="12" dy=".8em" y="13409.700000047684" x="1661.5">class Solution {</text><text id="kity_text_2249" text-rendering="inherit" font-size="12" dy=".8em" y="13427.700000047684" x="1661.5">	public int maxProfit(int[] prices) {</text><text id="kity_text_2250" text-rendering="inherit" font-size="12" dy=".8em" y="13445.700000047684" x="1661.5">	&#xa0; &#xa0; int result = 0;</text><text id="kity_text_2251" text-rendering="inherit" font-size="12" dy=".8em" y="13463.700000047684" x="1661.5">	&#xa0; &#xa0; for(int i =1;i&lt;prices.length;i++){</text><text id="kity_text_2252" text-rendering="inherit" font-size="12" dy=".8em" y="13481.700000047684" x="1661.5">	&#xa0; &#xa0; &#xa0; &#xa0;int temp = prices[i] - prices[i-1];</text><text id="kity_text_2253" text-rendering="inherit" font-size="12" dy=".8em" y="13499.700000047684" x="1661.5">	&#xa0; &#xa0; &#xa0; &#xa0; if(temp&gt;0) result+=temp;</text><text id="kity_text_2254" text-rendering="inherit" font-size="12" dy=".8em" y="13517.700000047684" x="1661.5">	&#xa0; &#xa0; }</text><text id="kity_text_2255" text-rendering="inherit" font-size="12" dy=".8em" y="13535.700000047684" x="1661.5">	&#xa0; &#xa0; return result;</text><text id="kity_text_2256" text-rendering="inherit" font-size="12" dy=".8em" y="13553.700000047684" x="1661.5">	}</text><text id="kity_text_2257" text-rendering="inherit" font-size="12" dy=".8em" y="13571.700000047684" x="1661.5">}</text></g></g></g></g></svg>